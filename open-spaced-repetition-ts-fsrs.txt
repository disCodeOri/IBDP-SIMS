Directory structure:
└── open-spaced-repetition-ts-fsrs/
    ├── README.md
    ├── LICENSE
    ├── README_CN.md
    ├── README_JA.md
    ├── eslint.config.mjs
    ├── jest.config.js
    ├── nodemon.json
    ├── package.json
    ├── pnpm-lock.yaml
    ├── rollup.config.ts
    ├── ts-fsrs-workflow.drawio
    ├── tsconfig.json
    ├── typedoc.json
    ├── .eslintrc.json
    ├── .npmignore
    ├── .nvmrc
    ├── .prettierrc.json
    ├── __tests__/
    │   ├── FSRSV5.test.ts
    │   ├── alea.test.ts
    │   ├── algorithm.test.ts
    │   ├── default.test.ts
    │   ├── elapsed_days.test.ts
    │   ├── forget.test.ts
    │   ├── handler.test.ts
    │   ├── help.test.ts
    │   ├── models.test.ts
    │   ├── reschedule.test.ts
    │   ├── rollback.test.ts
    │   ├── show_diff_message.test.ts
    │   ├── version.test.ts
    │   ├── fixed/
    │   │   ├── calc-elapsed-days.test.ts
    │   │   └── same-seed.test.ts
    │   ├── impl/
    │   │   ├── abstract_scheduler.test.ts
    │   │   ├── basic_scheduler.test.ts
    │   │   └── long-term_scheduler.test.ts
    │   └── strategies/
    │       └── seed.test.ts
    ├── debug/
    │   ├── index.ts
    │   ├── long-term.ts
    │   └── short-term.ts
    ├── digrams/
    │   ├── algorithm.pu
    │   ├── cardState.pu
    │   ├── class.pu
    │   └── models.pu
    ├── example/
    │   ├── example.html
    │   ├── example.jsx
    │   └── exampleComponent.jsx
    ├── src/
    │   └── fsrs/
    │       ├── abstract_scheduler.ts
    │       ├── alea.ts
    │       ├── algorithm.ts
    │       ├── convert.ts
    │       ├── default.ts
    │       ├── fsrs.ts
    │       ├── help.ts
    │       ├── index.ts
    │       ├── models.ts
    │       ├── reschedule.ts
    │       ├── types.ts
    │       ├── impl/
    │       │   ├── basic_scheduler.ts
    │       │   └── long_term_scheduler.ts
    │       └── strategies/
    │           ├── index.ts
    │           ├── seed.ts
    │           └── types.ts
    └── .github/
        ├── FUNDING.yml
        └── workflows/
            ├── ci.yml
            ├── deploy.yml
            └── npm-publish.yml

================================================
File: README.md
================================================
[Introduction](./README.md) | [简体中文](./README_CN.md) ｜[はじめに](./README_JA.md)

---

# About The
[![ts-fsrs npm version](https://img.shields.io/npm/v/ts-fsrs.svg)](https://www.npmjs.com/package/ts-fsrs)
[![Downloads](https://img.shields.io/npm/dm/ts-fsrs)](https://www.npmjs.com/package/ts-fsrs)
[![codecov](https://codecov.io/gh/open-spaced-repetition/ts-fsrs/graph/badge.svg?token=E3KLLDL8QH)](https://codecov.io/gh/open-spaced-repetition/ts-fsrs)
[![Build and Publish](https://github.com/open-spaced-repetition/ts-fsrs/actions/workflows/npm-publish.yml/badge.svg)](https://github.com/open-spaced-repetition/ts-fsrs/actions/workflows/npm-publish.yml)
[![Deploy](https://github.com/open-spaced-repetition/ts-fsrs/actions/workflows/deploy.yml/badge.svg)](https://github.com/open-spaced-repetition/ts-fsrs/actions/workflows/deploy.yml)

ts-fsrs is a versatile package based on TypeScript that supports [ES modules](https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c), [CommonJS](https://en.wikipedia.org/wiki/CommonJS), and UMD. It implements the [Free Spaced Repetition Scheduler (FSRS) algorithm](https://github.com/open-spaced-repetition/free-spaced-repetition-scheduler), enabling developers to integrate FSRS into their flashcard applications to enhance the user learning experience.

The workflow for TS-FSRS can be referenced from the following resources:
> - google driver: [ts-fsrs-workflow.drawio](https://drive.google.com/file/d/1FLKjpt4T3Iis02vjoA10q7vxKCWwClfR/view?usp=sharing) (You may provide commentary)
> - github: [ts-fsrs-workflow.drawio](./ts-fsrs-workflow.drawio)


# Usage
The `ts-fsrs@3.x` package requires Node.js version `16.0.0` or higher. Starting with `ts-fsrs@4.x`, the minimum required Node.js version is `18.0.0`.
From version `3.5.6` onwards, ts-fsrs supports CommonJS, ESM, and UMD module systems.

```
npm install ts-fsrs
yarn install ts-fsrs
pnpm install ts-fsrs
bun install ts-fsrs
```

# Example

```typescript
import {createEmptyCard, formatDate, fsrs, generatorParameters, Rating, Grades} from 'ts-fsrs';

const params = generatorParameters({ enable_fuzz: true, enable_short_term: false });
const f = fsrs(params);
const card = createEmptyCard(new Date('2022-2-1 10:00:00'));// createEmptyCard();
const now = new Date('2022-2-2 10:00:00');// new Date();
const scheduling_cards = f.repeat(card, now);

// console.log(scheduling_cards);
for (const item of scheduling_cards) {
    // grades = [Rating.Again, Rating.Hard, Rating.Good, Rating.Easy]
    const grade = item.log.rating
    const { log, card } = item;
    console.group(`${Rating[grade]}`);
    console.table({
        [`card_${Rating[grade]}`]: {
            ...card,
            due: formatDate(card.due),
            last_review: formatDate(card.last_review as Date),
        },
    });
    console.table({
        [`log_${Rating[grade]}`]: {
            ...log,
            review: formatDate(log.review),
        },
    });
    console.groupEnd();
    console.log('----------------------------------------------------------------');
}
```

More refer:
- [Docs - Github Pages](https://open-spaced-repetition.github.io/ts-fsrs/)
- [Example.html - Github Pages](https://open-spaced-repetition.github.io/ts-fsrs/example)
- [Browser](https://github.com/open-spaced-repetition/ts-fsrs/blob/master/example/example.html) (ts-fsrs package using CDN)
- [ts-fsrs-demo - Next.js+Prisma](https://github.com/ishiko732/ts-fsrs-demo)
- [spaced - Next.js+Drizzle+tRPC](https://github.com/zsh-eng/spaced)

# Basic Use 

## 1. **Initialization**:
To begin, create an empty card instance and set the current date(default: current time from system):

```typescript
import { Card, createEmptyCard } from "ts-fsrs";
let card: Card = createEmptyCard();
// createEmptyCard(new Date('2022-2-1 10:00:00'));
// createEmptyCard(new Date(Date.UTC(2023, 9, 18, 14, 32, 3, 370)));
// createEmptyCard(new Date('2023-09-18T14:32:03.370Z'));
```

## 2. **Parameter Configuration**:
The library allows for customization of SRS parameters. Use `generatorParameters` to produce the final set of parameters for the SRS algorithm. Here's an example setting a maximum interval:

```typescript
import { Card, createEmptyCard, generatorParameters, FSRSParameters } from "ts-fsrs";
let card: Card = createEmptyCard();
const params: FSRSParameters = generatorParameters({ maximum_interval: 1000 });
```

## 3. **Scheduling with FSRS**:
The core functionality lies in the `fsrs` function. When invoked, it returns a collection of cards scheduled based on different potential user ratings:

```typescript
import {
  Card,
  createEmptyCard,
  generatorParameters,
  FSRSParameters,
  FSRS,
  RecordLog,
} from "ts-fsrs";

let card: Card = createEmptyCard();
const f: FSRS = new FSRS(); // or const f: FSRS = fsrs(params);
let scheduling_cards: RecordLog = f.repeat(card, new Date());
// if you want to specify the grade, you can use the following code: (ts-fsrs >=4.0.0)
// let scheduling_card: RecordLog = f.next(card, new Date(), Rating.Good);
```

## 4. **Retrieving Scheduled Cards**:
Once you have the `scheduling_cards` object, you can retrieve cards based on user ratings. For instance, to access the card scheduled for a 'Good' rating:

```typescript
const good: RecordLogItem = scheduling_cards[Rating.Good];
const newCard: Card = good.card;
```

Get the new state of card for each rating:
```typescript
scheduling_cards[Rating.Again].card
scheduling_cards[Rating.Again].log

scheduling_cards[Rating.Hard].card
scheduling_cards[Rating.Hard].log

scheduling_cards[Rating.Good].card
scheduling_cards[Rating.Good].log

scheduling_cards[Rating.Easy].card
scheduling_cards[Rating.Easy].log
```

## 5. **Understanding Card Attributes**:
Each `Card` object consists of various attributes that determine its status, scheduling, and other metrics:

```typescript
type Card = {
  due: Date;           // Date when the card is next due for review
  stability: number;   // A measure of how well the information is retained
  difficulty: number;  // Reflects the inherent difficulty of the card content
  elapsed_days: number; // Days since the card was last reviewed
  scheduled_days: number; // The interval at which the card is next scheduled
  reps: number;          // Total number of times the card has been reviewed
  lapses: number;        // Times the card was forgotten or remembered incorrectly
  state: State;          // The current state of the card (New, Learning, Review, Relearning)
  last_review?: Date;    // The most recent review date, if applicable
};
```

## 6. **Understanding Log Attributes**:
Each `ReviewLog` object contains various attributes that determine the review record information associated with the card, used for analysis, undoing the review, and [optimization (WIP)](https://github.com/open-spaced-repetition/fsrs-optimizer).

```typescript
type ReviewLog = {
    rating: Rating; // Rating of the review (Again, Hard, Good, Easy)
    state: State; // State of the review (New, Learning, Review, Relearning)
    due: Date;  // Date of the last scheduling
    stability: number; // Stability of the card before the review
    difficulty: number; // Difficulty of the card before the review
    elapsed_days: number; // Number of days elapsed since the last review
    last_elapsed_days: number; // Number of days between the last two reviews
    scheduled_days: number; // Number of days until the next review
    review: Date; // Date of the review
}
```

================================================
File: LICENSE
================================================
MIT License

Copyright (c) 2024 Open Spaced Repetition

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


================================================
File: README_CN.md
================================================
[Introduction](./README.md) | [简体中文](./README_CN.md) ｜[はじめに](./README_JA.md)

---

# 关于

[![ts-fsrs npm version](https://img.shields.io/npm/v/ts-fsrs.svg)](https://www.npmjs.com/package/ts-fsrs)
[![codecov](https://codecov.io/gh/open-spaced-repetition/ts-fsrs/graph/badge.svg?token=E3KLLDL8QH)](https://codecov.io/gh/open-spaced-repetition/ts-fsrs)
[![Build and Publish](https://github.com/open-spaced-repetition/ts-fsrs/actions/workflows/npm-publish.yml/badge.svg)](https://github.com/open-spaced-repetition/ts-fsrs/actions/workflows/npm-publish.yml)
[![Deploy](https://github.com/open-spaced-repetition/ts-fsrs/actions/workflows/deploy.yml/badge.svg)](https://github.com/open-spaced-repetition/ts-fsrs/actions/workflows/deploy.yml)

ts-fsrs是一个基于TypeScript的多功能包，支持[ES模块](https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c)、[CommonJS](https://en.wikipedia.org/wiki/CommonJS)和UMD。它实现了[自由间隔重复调度器（FSRS）算法](https://github.com/open-spaced-repetition/free-spaced-repetition-scheduler/blob/main/README_CN.md)，使开发人员能够将FSRS集成到他们的闪卡应用程序中，从而增强用户的学习体验。

> 你可以通过[ts-fsrs-workflow.drawio](./ts-fsrs-workflow.drawio)来获取ts-fsrs的工作流信息。

# 使用ts-fsrs

`ts-fsrs@3.x`需要运行在 Node.js (>=16.0.0)上，`ts-fsrs@4.x`需要运行在 Node.js (>=18.0.0)上。
从`ts-fsrs@3.5.6`开始，ts-fsrs支持CommonJS、ESM和UMD模块系统

```
npm install ts-fsrs
yarn install ts-fsrs
pnpm install ts-fsrs
bun install ts-fsrs
```

# 例子

```typescript
import {createEmptyCard, formatDate, fsrs, generatorParameters, Rating, Grades} from 'ts-fsrs';

const params = generatorParameters({ enable_fuzz: true, enable_short_term: false });
const f = fsrs(params);
const card = createEmptyCard(new Date('2022-2-1 10:00:00'));// createEmptyCard();
const now = new Date('2022-2-2 10:00:00');// new Date();
const scheduling_cards = f.repeat(card, now);

// console.log(scheduling_cards);
for (const item of scheduling_cards) {
    // grades = [Rating.Again, Rating.Hard, Rating.Good, Rating.Easy]
    const grade = item.log.rating
    const { log, card } = item;
    console.group(`${Rating[grade]}`);
    console.table({
        [`card_${Rating[grade]}`]: {
            ...card,
            due: formatDate(card.due),
            last_review: formatDate(card.last_review as Date),
        },
    });
    console.table({
        [`log_${Rating[grade]}`]: {
            ...log,
            review: formatDate(log.review),
        },
    });
    console.groupEnd();
    console.log('----------------------------------------------------------------');
}
```

更多的参考:

- [参考文档- Github Pages](https://open-spaced-repetition.github.io/ts-fsrs/)
- [参考调度 - Github Pages](https://open-spaced-repetition.github.io/ts-fsrs/example)
- [浏览器使用](https://github.com/open-spaced-repetition/ts-fsrs/blob/master/example/example.html) (使用CDN来访问ts-fsrs ESM包)
- [案例应用 - 基于Next.js+Prisma](https://github.com/ishiko732/ts-fsrs-demo)
- [现代化抽成卡 - Next.js+Drizzle+tRPC](https://github.com/zsh-eng/spaced)

# 基本使用方法

## 1. **初始化**:

首先，创建一个空的卡片实例并设置当前日期（默认为当前系统时间）：

```typescript
import {Card, createEmptyCard} from "ts-fsrs";

let card: Card = createEmptyCard();
// createEmptyCard(new Date('2022-2-1 10:00:00'));
// createEmptyCard(new Date(Date.UTC(2023, 9, 18, 14, 32, 3, 370)));
// createEmptyCard(new Date('2023-09-18T14:32:03.370Z'));
```

## 2. **FSRS参数配置**:

该ts-fsrs库允许自定义SRS参数。使用`generatorParameters`来生成SRS算法的最终参数集。以下是设置最大间隔的示例：

```typescript
import {Card, createEmptyCard, generatorParameters, FSRSParameters} from "ts-fsrs";

let card: Card = createEmptyCard();
const params: FSRSParameters = generatorParameters({maximum_interval: 1000});
```

## 3. **使用FSRS进行调度**:

核心功能位于`fsrs`函数中。当调用`repeat`该函数时，它会根据不同的用户评级返回一个卡片集合的调度结果：

```typescript
import {
    Card,
    createEmptyCard,
    generatorParameters,
    FSRSParameters,
    FSRS,
    RecordLog,
} from "ts-fsrs";

let card: Card = createEmptyCard();
const f: FSRS = new FSRS(); // or const f: FSRS = fsrs(params);
let scheduling_cards: RecordLog = f.repeat(card, new Date());
// 如果你想要指定一个特定的评级，你可以这样做：（ts-fsrs版本必须 >= 4.0.0）
// let scheduling_cards: RecordLog = f.next(card, new Date(), Rating.Good);
```

## 4. **检查调度卡片信息**:

一旦你有了`scheduling_cards`对象，你可以根据用户评级来获取卡片。例如，要访问一个被安排在“`Good`”评级下的卡片：

```typescript
const good: RecordLogItem = scheduling_cards[Rating.Good];
const newCard: Card = good.card;
```

当然，你可以获取每个评级下卡片的新状态和对应的历史记录：

```typescript
scheduling_cards[Rating.Again].card
scheduling_cards[Rating.Again].log

scheduling_cards[Rating.Hard].card
scheduling_cards[Rating.Hard].log

scheduling_cards[Rating.Good].card
scheduling_cards[Rating.Good].log

scheduling_cards[Rating.Easy].card
scheduling_cards[Rating.Easy].log
```

## 5. **理解卡片属性**:

每个`Card`对象都包含各种属性，这些属性决定了它的状态、调度和其他指标(DS)：

```typescript
type Card = {
    due: Date;             // 卡片下次复习的日期
    stability: number;     // 记忆稳定性
    difficulty: number;    // 卡片难度
    elapsed_days: number;  // 自上次复习以来的天数
    scheduled_days: number; // 下次复习的间隔天数
    reps: number;          // 卡片被复习的总次数
    lapses: number;        // 卡片被遗忘或错误记忆的次数
    state: State;          // 卡片的当前状态（新卡片、学习中、复习中、重新学习中）
    last_review?: Date;    // 最近的复习日期（如果适用）
};
```

## 6. **理解复习记录属性**:

每个`ReviewLog`
对象都包含各种属性，这些属性决定了与之关联的卡片的复习记录信息，用于分析，回退本次复习，[优化(编写中)](https://github.com/open-spaced-repetition/fsrs-optimizer)：

```typescript
type ReviewLog = {
    rating: Rating; // 复习的评级（手动变更，重来，困难，良好，容易）
    state: State; // 复习的状态（新卡片、学习中、复习中、重新学习中）
    due: Date;  // 上次的调度日期
    stability: number; // 复习前的记忆稳定性
    difficulty: number; // 复习前的卡片难度
    elapsed_days: number; // 自上次复习以来的天数
    last_elapsed_days: number; // 上次复习的间隔天数
    scheduled_days: number; // 下次复习的间隔天数
    review: Date; // 复习的日期
}
```

================================================
File: README_JA.md
================================================
[Introduction](./README.md) | [简体中文](./README_CN.md) ｜[はじめに](./README_JA.md)

---

# について

[![ts-fsrs npm version](https://img.shields.io/npm/v/ts-fsrs.svg)](https://www.npmjs.com/package/ts-fsrs)
[![codecov](https://codecov.io/gh/open-spaced-repetition/ts-fsrs/graph/badge.svg?token=E3KLLDL8QH)](https://codecov.io/gh/open-spaced-repetition/ts-fsrs)
[![Build and Publish](https://github.com/open-spaced-repetition/ts-fsrs/actions/workflows/npm-publish.yml/badge.svg)](https://github.com/open-spaced-repetition/ts-fsrs/actions/workflows/npm-publish.yml)
[![Deploy](https://github.com/open-spaced-repetition/ts-fsrs/actions/workflows/deploy.yml/badge.svg)](https://github.com/open-spaced-repetition/ts-fsrs/actions/workflows/deploy.yml)

ts-fsrsはTypeScriptに基づいた多機能なパッケージで、[ESモジュール]((https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c))、[CommonJS](https://en.wikipedia.org/wiki/CommonJS)、UMDに対応しています。[自由間隔重複スケジューラ（FSRS）アルゴリズム](https://github.com/open-spaced-repetition/free-spaced-repetition-scheduler) を実装しており、開発者がFSRSをフラッシュカードアプリケーションに統合することで、ユーザーの学習体験を向上させることができます。

ts-fsrsのワークフローについては、以下のリソースを参照してください。
> - google driver: [ts-fsrs-workflow.drawio](https://drive.google.com/file/d/1FLKjpt4T3Iis02vjoA10q7vxKCWwClfR/view?usp=sharing) (コメントを提供できます)
> - github: [ts-fsrs-workflow.drawio](./ts-fsrs-workflow.drawio)


# ts-fsrsの使用方法

`ts-fsrs@3.x`はNode.js（>=16.0.0）で動作する必要があります。`ts-fsrs@4.x`からは、最小必要なNode.jsバージョンは18.0.0です。
`ts-fsrs@3.5.6`以降、ts-fsrsはCommonJS、ESM、UMDモジュールシステムをサポートしています。

```
npm install ts-fsrs
yarn install ts-fsrs
pnpm install ts-fsrs
bun install ts-fsrs
```

# 例

```typescript
import {createEmptyCard, formatDate, fsrs, generatorParameters, Rating, Grades} from 'ts-fsrs';

const params = generatorParameters({ enable_fuzz: true, enable_short_term: false });
const f = fsrs(params);
const card = createEmptyCard(new Date('2022-2-1 10:00:00'));// createEmptyCard();
const now = new Date('2022-2-2 10:00:00');// new Date();
const scheduling_cards = f.repeat(card, now);

// console.log(scheduling_cards);
for (const item of scheduling_cards) {
    // grades = [Rating.Again, Rating.Hard, Rating.Good, Rating.Easy]
    const grade = item.log.rating
    const { log, card } = item;
    console.group(`${Rating[grade]}`);
    console.table({
        [`card_${Rating[grade]}`]: {
            ...card,
            due: formatDate(card.due),
            last_review: formatDate(card.last_review as Date),
        },
    });
    console.table({
        [`log_${Rating[grade]}`]: {
            ...log,
            review: formatDate(log.review),
        },
    });
    console.groupEnd();
    console.log('----------------------------------------------------------------');
}
```

もっと:

- [参考資料- Github Pages](https://open-spaced-repetition.github.io/ts-fsrs/)
- [参考スケジューラ - Github Pages](https://open-spaced-repetition.github.io/ts-fsrs/example)
- [ブラウザで使い方](https://github.com/open-spaced-repetition/ts-fsrs/blob/master/example/example.html) (CDNを使用して ts-fsrs ESM
  パッケージにアクセスする)
- [実際のケース - Next.js+Prismaを利用する](https://github.com/ishiko732/ts-fsrs-demo)
- [モダンなフラッシュカード - Next.jsやtRPCなど技術を利用している](https://github.com/zsh-eng/spaced)

# 基本的な使い方

## 1. **初期化**:

まずは、空ぽっいカードインスタンスを作成して、現在の日付を設定します（デフォルトはシステムの現在時刻）：

```typescript
import {Card, createEmptyCard} from "ts-fsrs";

let card: Card = createEmptyCard();
// createEmptyCard(new Date('2022-2-1 10:00:00'));
// createEmptyCard(new Date(Date.UTC(2023, 9, 18, 14, 32, 3, 370)));
// createEmptyCard(new Date('2023-09-18T14:32:03.370Z'));
```

## 2. **FSRSのパラメータ設定**:

このts-fsrsライブラリは、カスタムSRSパラメータを許可します。`generatorParameters`
を使用して、SRSアルゴリズムの最終パラメータセットを生成します。以下は、最大間隔を設定する例です：

```typescript
import {Card, createEmptyCard, generatorParameters, FSRSParameters} from "ts-fsrs";

let card: Card = createEmptyCard();
const params: FSRSParameters = generatorParameters({maximum_interval: 1000});
```

## 3. **FSRSを使いしてスケジューリングする**:

核心機能は「`fsrs`」関数にあります。この`repeat`関数を呼び出すと、異なるユーザー評価に基づいて、カードセットのスケジュール結果が返されます。

```typescript
import {
    Card,
    createEmptyCard,
    generatorParameters,
    FSRSParameters,
    FSRS,
    RecordLog,
} from "ts-fsrs";

let card: Card = createEmptyCard();
const f: FSRS = new FSRS(); // or const f: FSRS = fsrs(params);
let scheduling_cards: RecordLog = f.repeat(card, new Date());
// もしくは、開発者が評価を指定する場合：（ＴＳ－ＦＳＲＳのバージョンは4.0.0以降である必要があります）
// let scheduling_cards: RecordLog = f.repeat(card, new Date(), Rating.Good);
```

## 4. **スケジュールされたカードの取得**:

scheduling_cardsオブジェクトがあると、ユーザーの評価に基づいてカードを取得できます。例えば、`Good`評価でスケジュールされたカードにアクセスするには：

```typescript
const good: RecordLogItem = scheduling_cards[Rating.Good];
const newCard: Card = good.card;
```

もちろん、各評価に対応するカードの新しい状態と履歴を取得できます：

```typescript
scheduling_cards[Rating.Again].card
scheduling_cards[Rating.Again].log

scheduling_cards[Rating.Hard].card
scheduling_cards[Rating.Hard].log

scheduling_cards[Rating.Good].card
scheduling_cards[Rating.Good].log

scheduling_cards[Rating.Easy].card
scheduling_cards[Rating.Easy].log
```

## 5. **カード属性の理解**:

それぞれの`Card`オブジェクトは、その状態、スケジュール、その他の指標を決定するさまざまな属性を含んでいます：

```typescript
type Card = {
    due: Date;             // カードの次のレビュー日
    stability: number;     //　記憶の安定性
    difficulty: number;    // カードの難易度
    elapsed_days: number;  // 前回のレビューからの日数
    scheduled_days: number; // 次のレビューの間隔日数
    reps: number;          // カードのレビュー回数
    lapses: number;        // カードが忘れられたか、間違って覚えられた回数
    state: State;          // カードの現在の状態（新しいカード、学習中、レビュー中、再学習中）
    last_review?: Date;    // 最近のレビュー日（適用される場合）
};
```

## 6. **レビュー履歴属性の理解**:

それぞれの`ReviewLog`
オブジェクトは、そのカードに関連するレビュー記録情報を決定するさまざまな属性を含んでいます。分析、今回のレビューをやり直す、[最適化(作成中)](https://github.com/open-spaced-repetition/fsrs-optimizer)：

```typescript
type ReviewLog = {
    rating: Rating; // レビューの評価（手動変更、やり直し、難しい、良い、簡単）
    state: State; // レビューの状態（新しいカード、学習中、レビュー中、再学習中）
    due: Date;  // レビューの次の日付
    stability: number; // レビュー前の記憶の安定性
    difficulty: number; // レビュー前のカードの難易度
    elapsed_days: number; // 前回のレビューからの日数
    last_elapsed_days: number; // 前回のレビューの間隔日数
    scheduled_days: number; // 次のレビューの間隔日数
    review: Date; // レビュー日
}
```

================================================
File: eslint.config.mjs
================================================
import typescriptEslint from "@typescript-eslint/eslint-plugin";
import globals from "globals";
import tsParser from "@typescript-eslint/parser";
import path from "node:path";
import { fileURLToPath } from "node:url";
import js from "@eslint/js";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const compat = new FlatCompat({
    baseDirectory: __dirname,
    recommendedConfig: js.configs.recommended,
    allConfig: js.configs.all
});

export default [
    ...compat.extends("eslint:recommended", "plugin:@typescript-eslint/recommended", "prettier"),
    {
        plugins: {
            "@typescript-eslint": typescriptEslint,
        },

        languageOptions: {
            globals: {
                ...globals.browser,
                ...globals.node,
                ...globals.amd,
            },

            parser: tsParser,
            ecmaVersion: "latest",
            sourceType: "module",
        },

        rules: {
            "@typescript-eslint/ban-ts-comment": "off",
            "@typescript-eslint/no-unused-vars": "off",
            "@typescript-eslint/no-namespace": "warn",
        },
    },
];

================================================
File: jest.config.js
================================================
/** @type {import('ts-jest').JestConfigWithTsJest} */
module.exports = {
  preset: 'ts-jest',
  testEnvironment: 'node',
  testMatch: [
    '**/__tests__/*.ts?(x)',
    '**/__tests__/**/*.ts?(x)',
  ],
  collectCoverage: true,
  coverageReporters: ['text', 'cobertura'],
  coverageThreshold: {
    global: {
      lines: 80,
    },
  },
  transformIgnorePatterns: ['/node_modules/(?!(module-to-transform)/)'],
}


================================================
File: nodemon.json
================================================
{
    "watch": ["./src/..","./debug/.."],
    "ext": "ts",
    "ignore": ["src/**/*.spec.ts"],
    "exec": "npx ts-node --project ./tsconfig.json ./debug/index.ts"
  }

================================================
File: package.json
================================================
{
  "name": "ts-fsrs",
  "version": "4.6.0",
  "description": "ts-fsrs is a versatile package based on TypeScript that supports ES modules, CommonJS, and UMD. It implements the Free Spaced Repetition Scheduler (FSRS) algorithm, enabling developers to integrate FSRS into their flashcard applications to enhance the user learning experience.",
  "main": "dist/index.cjs",
  "umd": "dist/index.umd.js",
  "module": "dist/index.mjs",
  "types": "dist/index.d.ts",
  "scripts": {
    "lint": "eslint src/",
    "lint::fix": "eslint --fix src/ && prettier --write src/",
    "dev": "rollup -c rollup.config.ts --configPlugin esbuild -w",
    "test": "jest --config=jest.config.js --passWithNoTests",
    "test::coverage": "jest --config=jest.config.js --coverage",
    "test::publish": "yalc publish",
    "prebuild": "rimraf ./dist",
    "build": "rollup -c rollup.config.ts --configPlugin esbuild",
    "build:types": "tsc --project ./tsconfig.json --declaration true",
    "major": "npm version major",
    "minor": "npm version minor",
    "patch": "npm version patch",
    "predocs": "rimraf ./docs",
    "docs": "typedoc",
    "clean": "rimraf ./dist ./docs"
  },
  "devDependencies": {
    "@rollup/plugin-commonjs": "^26.0.1",
    "@rollup/plugin-node-resolve": "^15.2.3",
    "@types/jest": "^29.5.12",
    "@types/node": "^20.14.10",
    "@types/seedrandom": "^3.0.8",
    "@typescript-eslint/eslint-plugin": "^8.0.0",
    "@typescript-eslint/parser": "^8.0.0",
    "decimal.js": "^10.4.3",
    "eslint": "^9.6.0",
    "eslint-config-prettier": "^9.1.0",
    "globals": "^15.8.0",
    "jest": "^29.7.0",
    "prettier": "^3.3.2",
    "rimraf": "^6.0.0",
    "rollup": "^4.22.4",
    "rollup-plugin-dts": "^6.1.1",
    "rollup-plugin-esbuild": "^6.1.1",
    "ts-jest": "^29.2.1",
    "tslib": "^2.6.3",
    "typedoc": "^0.26.4",
    "typedoc-plugin-extras": "^3.1.0",
    "typedoc-plugin-katex": "^0.1.2",
    "typescript": "^5.5.3"
  },
  "author": "ishiko",
  "license": "MIT",
  "keywords": [
    "SuperMemo",
    "Anki",
    "FSRS"
  ],
  "files": [
    "dist",
    "README.md",
    "LICENSE"
  ],
  "repository": {
    "type": "git",
    "url": "git+https://github.com/open-spaced-repetition/ts-fsrs.git"
  },
  "bugs": {
    "url": "https://github.com/open-spaced-repetition/ts-fsrs/issues"
  },
  "homepage": "https://github.com/open-spaced-repetition/ts-fsrs#readme",
  "engines": {
    "node": ">=18.0.0"
  },
  "pnpm": {
    "overrides": {
      "is-core-module": "npm:@nolyfill/is-core-module@^1"
    }
  }
}


================================================
File: pnpm-lock.yaml
================================================
lockfileVersion: '9.0'

settings:
  autoInstallPeers: true
  excludeLinksFromLockfile: false

overrides:
  is-core-module: npm:@nolyfill/is-core-module@^1

importers:

  .:
    devDependencies:
      '@rollup/plugin-commonjs':
        specifier: ^26.0.1
        version: 26.0.1(rollup@4.22.4)
      '@rollup/plugin-node-resolve':
        specifier: ^15.2.3
        version: 15.2.3(rollup@4.22.4)
      '@types/jest':
        specifier: ^29.5.12
        version: 29.5.12
      '@types/node':
        specifier: ^20.14.10
        version: 20.14.10
      '@types/seedrandom':
        specifier: ^3.0.8
        version: 3.0.8
      '@typescript-eslint/eslint-plugin':
        specifier: ^8.0.0
        version: 8.0.0(@typescript-eslint/parser@8.0.0(eslint@9.6.0)(typescript@5.5.3))(eslint@9.6.0)(typescript@5.5.3)
      '@typescript-eslint/parser':
        specifier: ^8.0.0
        version: 8.0.0(eslint@9.6.0)(typescript@5.5.3)
      decimal.js:
        specifier: ^10.4.3
        version: 10.4.3
      eslint:
        specifier: ^9.6.0
        version: 9.6.0
      eslint-config-prettier:
        specifier: ^9.1.0
        version: 9.1.0(eslint@9.6.0)
      globals:
        specifier: ^15.8.0
        version: 15.8.0
      jest:
        specifier: ^29.7.0
        version: 29.7.0(@types/node@20.14.10)
      prettier:
        specifier: ^3.3.2
        version: 3.3.2
      rimraf:
        specifier: ^6.0.0
        version: 6.0.0
      rollup:
        specifier: ^4.22.4
        version: 4.22.4
      rollup-plugin-dts:
        specifier: ^6.1.1
        version: 6.1.1(rollup@4.22.4)(typescript@5.5.3)
      rollup-plugin-esbuild:
        specifier: ^6.1.1
        version: 6.1.1(esbuild@0.19.10)(rollup@4.22.4)
      ts-jest:
        specifier: ^29.2.1
        version: 29.2.1(@babel/core@7.23.6)(@jest/transform@29.7.0)(@jest/types@29.6.3)(babel-jest@29.7.0(@babel/core@7.23.6))(esbuild@0.19.10)(jest@29.7.0(@types/node@20.14.10))(typescript@5.5.3)
      tslib:
        specifier: ^2.6.3
        version: 2.6.3
      typedoc:
        specifier: ^0.26.4
        version: 0.26.4(typescript@5.5.3)
      typedoc-plugin-extras:
        specifier: ^3.1.0
        version: 3.1.0(typedoc@0.26.4(typescript@5.5.3))
      typedoc-plugin-katex:
        specifier: ^0.1.2
        version: 0.1.2
      typescript:
        specifier: ^5.5.3
        version: 5.5.3

packages:

  '@aashutoshrathi/word-wrap@1.2.6':
    resolution: {integrity: sha512-1Yjs2SvM8TflER/OD3cOjhWWOZb58A2t7wpE2S9XfBYTiIl+XFhQG2bjy4Pu1I+EAlCNUzRDYDdFwFYUKvXcIA==}
    engines: {node: '>=0.10.0'}

  '@ampproject/remapping@2.2.1':
    resolution: {integrity: sha512-lFMjJTrFL3j7L9yBxwYfCq2k6qqwHyzuUl/XBnif78PWTJYyL/dfowQHWE3sp6U6ZzqWiiIZnpTMO96zhkjwtg==}
    engines: {node: '>=6.0.0'}

  '@babel/code-frame@7.23.5':
    resolution: {integrity: sha512-CgH3s1a96LipHCmSUmYFPwY7MNx8C3avkq7i4Wl3cfa662ldtUe4VM1TPXX70pfmrlWTb6jLqTYrZyT2ZTJBgA==}
    engines: {node: '>=6.9.0'}

  '@babel/code-frame@7.24.7':
    resolution: {integrity: sha512-BcYH1CVJBO9tvyIZ2jVeXgSIMvGZ2FDRvDdOIVQyuklNKSsx+eppDEBq/g47Ayw+RqNFE+URvOShmf+f/qwAlA==}
    engines: {node: '>=6.9.0'}

  '@babel/compat-data@7.23.5':
    resolution: {integrity: sha512-uU27kfDRlhfKl+w1U6vp16IuvSLtjAxdArVXPa9BvLkrr7CYIsxH5adpHObeAGY/41+syctUWOZ140a2Rvkgjw==}
    engines: {node: '>=6.9.0'}

  '@babel/core@7.23.6':
    resolution: {integrity: sha512-FxpRyGjrMJXh7X3wGLGhNDCRiwpWEF74sKjTLDJSG5Kyvow3QZaG0Adbqzi9ZrVjTWpsX+2cxWXD71NMg93kdw==}
    engines: {node: '>=6.9.0'}

  '@babel/generator@7.23.6':
    resolution: {integrity: sha512-qrSfCYxYQB5owCmGLbl8XRpX1ytXlpueOb0N0UmQwA073KZxejgQTzAmJezxvpwQD9uGtK2shHdi55QT+MbjIw==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-compilation-targets@7.23.6':
    resolution: {integrity: sha512-9JB548GZoQVmzrFgp8o7KxdgkTGm6xs9DW0o/Pim72UDjzr5ObUQ6ZzYPqA+g9OTS2bBQoctLJrky0RDCAWRgQ==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-environment-visitor@7.22.20':
    resolution: {integrity: sha512-zfedSIzFhat/gFhWfHtgWvlec0nqB9YEIVrpuwjruLlXfUSnA8cJB0miHKwqDnQ7d32aKo2xt88/xZptwxbfhA==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-function-name@7.23.0':
    resolution: {integrity: sha512-OErEqsrxjZTJciZ4Oo+eoZqeW9UIiOcuYKRJA4ZAgV9myA+pOXhhmpfNCKjEH/auVfEYVFJ6y1Tc4r0eIApqiw==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-hoist-variables@7.22.5':
    resolution: {integrity: sha512-wGjk9QZVzvknA6yKIUURb8zY3grXCcOZt+/7Wcy8O2uctxhplmUPkOdlgoNhmdVee2c92JXbf1xpMtVNbfoxRw==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-module-imports@7.22.15':
    resolution: {integrity: sha512-0pYVBnDKZO2fnSPCrgM/6WMc7eS20Fbok+0r88fp+YtWVLZrp4CkafFGIp+W0VKw4a22sgebPT99y+FDNMdP4w==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-module-transforms@7.23.3':
    resolution: {integrity: sha512-7bBs4ED9OmswdfDzpz4MpWgSrV7FXlc3zIagvLFjS5H+Mk7Snr21vQ6QwrsoCGMfNC4e4LQPdoULEt4ykz0SRQ==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0

  '@babel/helper-plugin-utils@7.22.5':
    resolution: {integrity: sha512-uLls06UVKgFG9QD4OeFYLEGteMIAa5kpTPcFL28yuCIIzsf6ZyKZMllKVOCZFhiZ5ptnwX4mtKdWCBE/uT4amg==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-simple-access@7.22.5':
    resolution: {integrity: sha512-n0H99E/K+Bika3++WNL17POvo4rKWZ7lZEp1Q+fStVbUi8nxPQEBOlTmCOxW/0JsS56SKKQ+ojAe2pHKJHN35w==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-split-export-declaration@7.22.6':
    resolution: {integrity: sha512-AsUnxuLhRYsisFiaJwvp1QF+I3KjD5FOxut14q/GzovUe6orHLesW2C7d754kRm53h5gqrz6sFl6sxc4BVtE/g==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-string-parser@7.23.4':
    resolution: {integrity: sha512-803gmbQdqwdf4olxrX4AJyFBV/RTr3rSmOj0rKwesmzlfhYNDEs+/iOcznzpNWlJlIlTJC2QfPFcHB6DlzdVLQ==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-validator-identifier@7.22.20':
    resolution: {integrity: sha512-Y4OZ+ytlatR8AI+8KZfKuL5urKp7qey08ha31L8b3BwewJAoJamTzyvxPR/5D+KkdJCGPq/+8TukHBlY10FX9A==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-validator-identifier@7.24.7':
    resolution: {integrity: sha512-rR+PBcQ1SMQDDyF6X0wxtG8QyLCgUB0eRAGguqRLfkCA87l7yAP7ehq8SNj96OOGTO8OBV70KhuFYcIkHXOg0w==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-validator-option@7.23.5':
    resolution: {integrity: sha512-85ttAOMLsr53VgXkTbkx8oA6YTfT4q7/HzXSLEYmjcSTJPMPQtvq1BD79Byep5xMUYbGRzEpDsjUf3dyp54IKw==}
    engines: {node: '>=6.9.0'}

  '@babel/helpers@7.23.6':
    resolution: {integrity: sha512-wCfsbN4nBidDRhpDhvcKlzHWCTlgJYUUdSJfzXb2NuBssDSIjc3xcb+znA7l+zYsFljAcGM0aFkN40cR3lXiGA==}
    engines: {node: '>=6.9.0'}

  '@babel/highlight@7.23.4':
    resolution: {integrity: sha512-acGdbYSfp2WheJoJm/EBBBLh/ID8KDc64ISZ9DYtBmC8/Q204PZJLHyzeB5qMzJ5trcOkybd78M4x2KWsUq++A==}
    engines: {node: '>=6.9.0'}

  '@babel/highlight@7.24.7':
    resolution: {integrity: sha512-EStJpq4OuY8xYfhGVXngigBJRWxftKX9ksiGDnmlY3o7B/V7KIAc9X4oiK87uPJSc/vs5L869bem5fhZa8caZw==}
    engines: {node: '>=6.9.0'}

  '@babel/parser@7.23.6':
    resolution: {integrity: sha512-Z2uID7YJ7oNvAI20O9X0bblw7Qqs8Q2hFy0R9tAfnfLkp5MW0UH9eUvnDSnFwKZ0AvgS1ucqR4KzvVHgnke1VQ==}
    engines: {node: '>=6.0.0'}
    hasBin: true

  '@babel/plugin-syntax-async-generators@7.8.4':
    resolution: {integrity: sha512-tycmZxkGfZaxhMRbXlPXuVFpdWlXpir2W4AMhSJgRKzk/eDlIXOhb2LHWoLpDF7TEHylV5zNhykX6KAgHJmTNw==}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-bigint@7.8.3':
    resolution: {integrity: sha512-wnTnFlG+YxQm3vDxpGE57Pj0srRU4sHE/mDkt1qv2YJJSeUAec2ma4WLUnUPeKjyrfntVwe/N6dCXpU+zL3Npg==}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-class-properties@7.12.13':
    resolution: {integrity: sha512-fm4idjKla0YahUNgFNLCB0qySdsoPiZP3iQE3rky0mBUtMZ23yDJ9SJdg6dXTSDnulOVqiF3Hgr9nbXvXTQZYA==}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-import-meta@7.10.4':
    resolution: {integrity: sha512-Yqfm+XDx0+Prh3VSeEQCPU81yC+JWZ2pDPFSS4ZdpfZhp4MkFMaDC1UqseovEKwSUpnIL7+vK+Clp7bfh0iD7g==}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-json-strings@7.8.3':
    resolution: {integrity: sha512-lY6kdGpWHvjoe2vk4WrAapEuBR69EMxZl+RoGRhrFGNYVK8mOPAW8VfbT/ZgrFbXlDNiiaxQnAtgVCZ6jv30EA==}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-jsx@7.23.3':
    resolution: {integrity: sha512-EB2MELswq55OHUoRZLGg/zC7QWUKfNLpE57m/S2yr1uEneIgsTgrSzXP3NXEsMkVn76OlaVVnzN+ugObuYGwhg==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-logical-assignment-operators@7.10.4':
    resolution: {integrity: sha512-d8waShlpFDinQ5MtvGU9xDAOzKH47+FFoney2baFIoMr952hKOLp1HR7VszoZvOsV/4+RRszNY7D17ba0te0ig==}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-nullish-coalescing-operator@7.8.3':
    resolution: {integrity: sha512-aSff4zPII1u2QD7y+F8oDsz19ew4IGEJg9SVW+bqwpwtfFleiQDMdzA/R+UlWDzfnHFCxxleFT0PMIrR36XLNQ==}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-numeric-separator@7.10.4':
    resolution: {integrity: sha512-9H6YdfkcK/uOnY/K7/aA2xpzaAgkQn37yzWUMRK7OaPOqOpGS1+n0H5hxT9AUw9EsSjPW8SVyMJwYRtWs3X3ug==}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-object-rest-spread@7.8.3':
    resolution: {integrity: sha512-XoqMijGZb9y3y2XskN+P1wUGiVwWZ5JmoDRwx5+3GmEplNyVM2s2Dg8ILFQm8rWM48orGy5YpI5Bl8U1y7ydlA==}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-optional-catch-binding@7.8.3':
    resolution: {integrity: sha512-6VPD0Pc1lpTqw0aKoeRTMiB+kWhAoT24PA+ksWSBrFtl5SIRVpZlwN3NNPQjehA2E/91FV3RjLWoVTglWcSV3Q==}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-optional-chaining@7.8.3':
    resolution: {integrity: sha512-KoK9ErH1MBlCPxV0VANkXW2/dw4vlbGDrFgz8bmUsBGYkFRcbRwMh6cIJubdPrkxRwuGdtCk0v/wPTKbQgBjkg==}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-top-level-await@7.14.5':
    resolution: {integrity: sha512-hx++upLv5U1rgYfwe1xBQUhRmU41NEvpUvrp8jkrSCdvGSnM5/qdRMtylJ6PG5OFkBaHkbTAKTnd3/YyESRHFw==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/plugin-syntax-typescript@7.23.3':
    resolution: {integrity: sha512-9EiNjVJOMwCO+43TqoTrgQ8jMwcAd0sWyXi9RPfIsLTj4R2MADDDQXELhffaUx/uJv2AYcxBgPwH6j4TIA4ytQ==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0

  '@babel/template@7.22.15':
    resolution: {integrity: sha512-QPErUVm4uyJa60rkI73qneDacvdvzxshT3kksGqlGWYdOTIUOwJ7RDUL8sGqslY1uXWSL6xMFKEXDS3ox2uF0w==}
    engines: {node: '>=6.9.0'}

  '@babel/traverse@7.23.6':
    resolution: {integrity: sha512-czastdK1e8YByZqezMPFiZ8ahwVMh/ESl9vPgvgdB9AmFMGP5jfpFax74AQgl5zj4XHzqeYAg2l8PuUeRS1MgQ==}
    engines: {node: '>=6.9.0'}

  '@babel/types@7.23.6':
    resolution: {integrity: sha512-+uarb83brBzPKN38NX1MkB6vb6+mwvR6amUulqAE7ccQw1pEl+bCia9TbdG1lsnFP7lZySvUn37CHyXQdfTwzg==}
    engines: {node: '>=6.9.0'}

  '@bcoe/v8-coverage@0.2.3':
    resolution: {integrity: sha512-0hYQ8SB4Db5zvZB4axdMHGwEaQjkZzFjQiN9LVYvIFB2nSUHW9tYpxWriPrWDASIxiaXax83REcLxuSdnGPZtw==}

  '@esbuild/aix-ppc64@0.19.10':
    resolution: {integrity: sha512-Q+mk96KJ+FZ30h9fsJl+67IjNJm3x2eX+GBWGmocAKgzp27cowCOOqSdscX80s0SpdFXZnIv/+1xD1EctFx96Q==}
    engines: {node: '>=12'}
    cpu: [ppc64]
    os: [aix]

  '@esbuild/android-arm64@0.19.10':
    resolution: {integrity: sha512-1X4CClKhDgC3by7k8aOWZeBXQX8dHT5QAMCAQDArCLaYfkppoARvh0fit3X2Qs+MXDngKcHv6XXyQCpY0hkK1Q==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [android]

  '@esbuild/android-arm@0.19.10':
    resolution: {integrity: sha512-7W0bK7qfkw1fc2viBfrtAEkDKHatYfHzr/jKAHNr9BvkYDXPcC6bodtm8AyLJNNuqClLNaeTLuwURt4PRT9d7w==}
    engines: {node: '>=12'}
    cpu: [arm]
    os: [android]

  '@esbuild/android-x64@0.19.10':
    resolution: {integrity: sha512-O/nO/g+/7NlitUxETkUv/IvADKuZXyH4BHf/g/7laqKC4i/7whLpB0gvpPc2zpF0q9Q6FXS3TS75QHac9MvVWw==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [android]

  '@esbuild/darwin-arm64@0.19.10':
    resolution: {integrity: sha512-YSRRs2zOpwypck+6GL3wGXx2gNP7DXzetmo5pHXLrY/VIMsS59yKfjPizQ4lLt5vEI80M41gjm2BxrGZ5U+VMA==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [darwin]

  '@esbuild/darwin-x64@0.19.10':
    resolution: {integrity: sha512-alfGtT+IEICKtNE54hbvPg13xGBe4GkVxyGWtzr+yHO7HIiRJppPDhOKq3zstTcVf8msXb/t4eavW3jCDpMSmA==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [darwin]

  '@esbuild/freebsd-arm64@0.19.10':
    resolution: {integrity: sha512-dMtk1wc7FSH8CCkE854GyGuNKCewlh+7heYP/sclpOG6Cectzk14qdUIY5CrKDbkA/OczXq9WesqnPl09mj5dg==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [freebsd]

  '@esbuild/freebsd-x64@0.19.10':
    resolution: {integrity: sha512-G5UPPspryHu1T3uX8WiOEUa6q6OlQh6gNl4CO4Iw5PS+Kg5bVggVFehzXBJY6X6RSOMS8iXDv2330VzaObm4Ag==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [freebsd]

  '@esbuild/linux-arm64@0.19.10':
    resolution: {integrity: sha512-QxaouHWZ+2KWEj7cGJmvTIHVALfhpGxo3WLmlYfJ+dA5fJB6lDEIg+oe/0//FuyVHuS3l79/wyBxbHr0NgtxJQ==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [linux]

  '@esbuild/linux-arm@0.19.10':
    resolution: {integrity: sha512-j6gUW5aAaPgD416Hk9FHxn27On28H4eVI9rJ4az7oCGTFW48+LcgNDBN+9f8rKZz7EEowo889CPKyeaD0iw9Kg==}
    engines: {node: '>=12'}
    cpu: [arm]
    os: [linux]

  '@esbuild/linux-ia32@0.19.10':
    resolution: {integrity: sha512-4ub1YwXxYjj9h1UIZs2hYbnTZBtenPw5NfXCRgEkGb0b6OJ2gpkMvDqRDYIDRjRdWSe/TBiZltm3Y3Q8SN1xNg==}
    engines: {node: '>=12'}
    cpu: [ia32]
    os: [linux]

  '@esbuild/linux-loong64@0.19.10':
    resolution: {integrity: sha512-lo3I9k+mbEKoxtoIbM0yC/MZ1i2wM0cIeOejlVdZ3D86LAcFXFRdeuZmh91QJvUTW51bOK5W2BznGNIl4+mDaA==}
    engines: {node: '>=12'}
    cpu: [loong64]
    os: [linux]

  '@esbuild/linux-mips64el@0.19.10':
    resolution: {integrity: sha512-J4gH3zhHNbdZN0Bcr1QUGVNkHTdpijgx5VMxeetSk6ntdt+vR1DqGmHxQYHRmNb77tP6GVvD+K0NyO4xjd7y4A==}
    engines: {node: '>=12'}
    cpu: [mips64el]
    os: [linux]

  '@esbuild/linux-ppc64@0.19.10':
    resolution: {integrity: sha512-tgT/7u+QhV6ge8wFMzaklOY7KqiyitgT1AUHMApau32ZlvTB/+efeCtMk4eXS+uEymYK249JsoiklZN64xt6oQ==}
    engines: {node: '>=12'}
    cpu: [ppc64]
    os: [linux]

  '@esbuild/linux-riscv64@0.19.10':
    resolution: {integrity: sha512-0f/spw0PfBMZBNqtKe5FLzBDGo0SKZKvMl5PHYQr3+eiSscfJ96XEknCe+JoOayybWUFQbcJTrk946i3j9uYZA==}
    engines: {node: '>=12'}
    cpu: [riscv64]
    os: [linux]

  '@esbuild/linux-s390x@0.19.10':
    resolution: {integrity: sha512-pZFe0OeskMHzHa9U38g+z8Yx5FNCLFtUnJtQMpwhS+r4S566aK2ci3t4NCP4tjt6d5j5uo4h7tExZMjeKoehAA==}
    engines: {node: '>=12'}
    cpu: [s390x]
    os: [linux]

  '@esbuild/linux-x64@0.19.10':
    resolution: {integrity: sha512-SpYNEqg/6pZYoc+1zLCjVOYvxfZVZj6w0KROZ3Fje/QrM3nfvT2llI+wmKSrWuX6wmZeTapbarvuNNK/qepSgA==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [linux]

  '@esbuild/netbsd-x64@0.19.10':
    resolution: {integrity: sha512-ACbZ0vXy9zksNArWlk2c38NdKg25+L9pr/mVaj9SUq6lHZu/35nx2xnQVRGLrC1KKQqJKRIB0q8GspiHI3J80Q==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [netbsd]

  '@esbuild/openbsd-x64@0.19.10':
    resolution: {integrity: sha512-PxcgvjdSjtgPMiPQrM3pwSaG4kGphP+bLSb+cihuP0LYdZv1epbAIecHVl5sD3npkfYBZ0ZnOjR878I7MdJDFg==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [openbsd]

  '@esbuild/sunos-x64@0.19.10':
    resolution: {integrity: sha512-ZkIOtrRL8SEJjr+VHjmW0znkPs+oJXhlJbNwfI37rvgeMtk3sxOQevXPXjmAPZPigVTncvFqLMd+uV0IBSEzqA==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [sunos]

  '@esbuild/win32-arm64@0.19.10':
    resolution: {integrity: sha512-+Sa4oTDbpBfGpl3Hn3XiUe4f8TU2JF7aX8cOfqFYMMjXp6ma6NJDztl5FDG8Ezx0OjwGikIHw+iA54YLDNNVfw==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [win32]

  '@esbuild/win32-ia32@0.19.10':
    resolution: {integrity: sha512-EOGVLK1oWMBXgfttJdPHDTiivYSjX6jDNaATeNOaCOFEVcfMjtbx7WVQwPSE1eIfCp/CaSF2nSrDtzc4I9f8TQ==}
    engines: {node: '>=12'}
    cpu: [ia32]
    os: [win32]

  '@esbuild/win32-x64@0.19.10':
    resolution: {integrity: sha512-whqLG6Sc70AbU73fFYvuYzaE4MNMBIlR1Y/IrUeOXFrWHxBEjjbZaQ3IXIQS8wJdAzue2GwYZCjOrgrU1oUHoA==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [win32]

  '@eslint-community/eslint-utils@4.4.0':
    resolution: {integrity: sha512-1/sA4dwrzBAyeUoQ6oxahHKmrZvsnLCg4RfxW3ZFGGmQkSNQPFNLV9CUEFQP1x9EYXHTo5p6xdhZM1Ne9p/AfA==}
    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}
    peerDependencies:
      eslint: ^6.0.0 || ^7.0.0 || >=8.0.0

  '@eslint-community/regexpp@4.10.0':
    resolution: {integrity: sha512-Cu96Sd2By9mCNTx2iyKOmq10v22jUVQv0lQnlGNy16oE9589yE+QADPbrMGCkA51cKZSg3Pu/aTJVTGfL/qjUA==}
    engines: {node: ^12.0.0 || ^14.0.0 || >=16.0.0}

  '@eslint/config-array@0.17.0':
    resolution: {integrity: sha512-A68TBu6/1mHHuc5YJL0U0VVeGNiklLAL6rRmhTCP2B5XjWLMnrX+HkO+IAXyHvks5cyyY1jjK5ITPQ1HGS2EVA==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@eslint/eslintrc@3.1.0':
    resolution: {integrity: sha512-4Bfj15dVJdoy3RfZmmo86RK1Fwzn6SstsvK9JS+BaVKqC6QQQQyXekNaC+g+LKNgkQ+2VhGAzm6hO40AhMR3zQ==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@eslint/js@9.6.0':
    resolution: {integrity: sha512-D9B0/3vNg44ZeWbYMpBoXqNP4j6eQD5vNwIlGAuFRRzK/WtT/jvDQW3Bi9kkf3PMDMlM7Yi+73VLUsn5bJcl8A==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@eslint/object-schema@2.1.4':
    resolution: {integrity: sha512-BsWiH1yFGjXXS2yvrf5LyuoSIIbPrGUWob917o+BTKuZ7qJdxX8aJLRxs1fS9n6r7vESrq1OUqb68dANcFXuQQ==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@humanwhocodes/module-importer@1.0.1':
    resolution: {integrity: sha512-bxveV4V8v5Yb4ncFTT3rPSgZBOpCkjfK0y4oVVVJwIuDVBRMDXrPyXRL988i5ap9m9bnyEEjWfm5WkBmtffLfA==}
    engines: {node: '>=12.22'}

  '@humanwhocodes/retry@0.3.0':
    resolution: {integrity: sha512-d2CGZR2o7fS6sWB7DG/3a95bGKQyHMACZ5aW8qGkkqQpUoZV6C0X7Pc7l4ZNMZkfNBf4VWNe9E1jRsf0G146Ew==}
    engines: {node: '>=18.18'}

  '@isaacs/cliui@8.0.2':
    resolution: {integrity: sha512-O8jcjabXaleOG9DQ0+ARXWZBTfnP4WNAqzuiJK7ll44AmxGKv/J2M4TPjxjY3znBCfvBXFzucm1twdyFybFqEA==}
    engines: {node: '>=12'}

  '@istanbuljs/load-nyc-config@1.1.0':
    resolution: {integrity: sha512-VjeHSlIzpv/NyD3N0YuHfXOPDIixcA1q2ZV98wsMqcYlPmv2n3Yb2lYP9XMElnaFVXg5A7YLTeLu6V84uQDjmQ==}
    engines: {node: '>=8'}

  '@istanbuljs/schema@0.1.3':
    resolution: {integrity: sha512-ZXRY4jNvVgSVQ8DL3LTcakaAtXwTVUxE81hslsyD2AtoXW/wVob10HkOJ1X/pAlcI7D+2YoZKg5do8G/w6RYgA==}
    engines: {node: '>=8'}

  '@jest/console@29.7.0':
    resolution: {integrity: sha512-5Ni4CU7XHQi32IJ398EEP4RrB8eV09sXP2ROqD4bksHrnTree52PsxvX8tpL8LvTZ3pFzXyPbNQReSN41CAhOg==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  '@jest/core@29.7.0':
    resolution: {integrity: sha512-n7aeXWKMnGtDA48y8TLWJPJmLmmZ642Ceo78cYWEpiD7FzDgmNDV/GCVRorPABdXLJZ/9wzzgZAlHjXjxDHGsg==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}
    peerDependencies:
      node-notifier: ^8.0.1 || ^9.0.0 || ^10.0.0
    peerDependenciesMeta:
      node-notifier:
        optional: true

  '@jest/environment@29.7.0':
    resolution: {integrity: sha512-aQIfHDq33ExsN4jP1NWGXhxgQ/wixs60gDiKO+XVMd8Mn0NWPWgc34ZQDTb2jKaUWQ7MuwoitXAsN2XVXNMpAw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  '@jest/expect-utils@29.7.0':
    resolution: {integrity: sha512-GlsNBWiFQFCVi9QVSx7f5AgMeLxe9YCCs5PuP2O2LdjDAA8Jh9eX7lA1Jq/xdXw3Wb3hyvlFNfZIfcRetSzYcA==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  '@jest/expect@29.7.0':
    resolution: {integrity: sha512-8uMeAMycttpva3P1lBHB8VciS9V0XAr3GymPpipdyQXbBcuhkLQOSe8E/p92RyAdToS6ZD1tFkX+CkhoECE0dQ==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  '@jest/fake-timers@29.7.0':
    resolution: {integrity: sha512-q4DH1Ha4TTFPdxLsqDXK1d3+ioSL7yL5oCMJZgDYm6i+6CygW5E5xVr/D1HdsGxjt1ZWSfUAs9OxSB/BNelWrQ==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  '@jest/globals@29.7.0':
    resolution: {integrity: sha512-mpiz3dutLbkW2MNFubUGUEVLkTGiqW6yLVTA+JbP6fI6J5iL9Y0Nlg8k95pcF8ctKwCS7WVxteBs29hhfAotzQ==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  '@jest/reporters@29.7.0':
    resolution: {integrity: sha512-DApq0KJbJOEzAFYjHADNNxAE3KbhxQB1y5Kplb5Waqw6zVbuWatSnMjE5gs8FUgEPmNsnZA3NCWl9NG0ia04Pg==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}
    peerDependencies:
      node-notifier: ^8.0.1 || ^9.0.0 || ^10.0.0
    peerDependenciesMeta:
      node-notifier:
        optional: true

  '@jest/schemas@29.6.3':
    resolution: {integrity: sha512-mo5j5X+jIZmJQveBKeS/clAueipV7KgiX1vMgCxam1RNYiqE1w62n0/tJJnHtjW8ZHcQco5gY85jA3mi0L+nSA==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  '@jest/source-map@29.6.3':
    resolution: {integrity: sha512-MHjT95QuipcPrpLM+8JMSzFx6eHp5Bm+4XeFDJlwsvVBjmKNiIAvasGK2fxz2WbGRlnvqehFbh07MMa7n3YJnw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  '@jest/test-result@29.7.0':
    resolution: {integrity: sha512-Fdx+tv6x1zlkJPcWXmMDAG2HBnaR9XPSd5aDWQVsfrZmLVT3lU1cwyxLgRmXR9yrq4NBoEm9BMsfgFzTQAbJYA==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  '@jest/test-sequencer@29.7.0':
    resolution: {integrity: sha512-GQwJ5WZVrKnOJuiYiAF52UNUJXgTZx1NHjFSEB0qEMmSZKAkdMoIzw/Cj6x6NF4AvV23AUqDpFzQkN/eYCYTxw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  '@jest/transform@29.7.0':
    resolution: {integrity: sha512-ok/BTPFzFKVMwO5eOHRrvnBVHdRy9IrsrW1GpMaQ9MCnilNLXQKmAX8s1YXDFaai9xJpac2ySzV0YeRRECr2Vw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  '@jest/types@29.6.3':
    resolution: {integrity: sha512-u3UPsIilWKOM3F9CXtrG8LEJmNxwoCQC/XVj4IKYXvvpx7QIi/Kg1LI5uDmDpKlac62NUtX7eLjRh+jVZcLOzw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  '@jridgewell/gen-mapping@0.3.3':
    resolution: {integrity: sha512-HLhSWOLRi875zjjMG/r+Nv0oCW8umGb0BgEhyX3dDX3egwZtB8PqLnjz3yedt8R5StBrzcg4aBpnh8UA9D1BoQ==}
    engines: {node: '>=6.0.0'}

  '@jridgewell/resolve-uri@3.1.1':
    resolution: {integrity: sha512-dSYZh7HhCDtCKm4QakX0xFpsRDqjjtZf/kjI/v3T3Nwt5r8/qz/M19F9ySyOqU94SXBmeG9ttTul+YnR4LOxFA==}
    engines: {node: '>=6.0.0'}

  '@jridgewell/set-array@1.1.2':
    resolution: {integrity: sha512-xnkseuNADM0gt2bs+BvhO0p78Mk762YnZdsuzFV018NoG1Sj1SCQvpSqa7XUaTam5vAGasABV9qXASMKnFMwMw==}
    engines: {node: '>=6.0.0'}

  '@jridgewell/sourcemap-codec@1.4.15':
    resolution: {integrity: sha512-eF2rxCRulEKXHTRiDrDy6erMYWqNw4LPdQ8UQA4huuxaQsVeRPFl2oM8oDGxMFhJUWZf9McpLtJasDDZb/Bpeg==}

  '@jridgewell/trace-mapping@0.3.20':
    resolution: {integrity: sha512-R8LcPeWZol2zR8mmH3JeKQ6QRCFb7XgUhV9ZlGhHLGyg4wpPiPZNQOOWhFZhxKw8u//yTbNGI42Bx/3paXEQ+Q==}

  '@nodelib/fs.scandir@2.1.5':
    resolution: {integrity: sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==}
    engines: {node: '>= 8'}

  '@nodelib/fs.stat@2.0.5':
    resolution: {integrity: sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==}
    engines: {node: '>= 8'}

  '@nodelib/fs.walk@1.2.8':
    resolution: {integrity: sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==}
    engines: {node: '>= 8'}

  '@nolyfill/is-core-module@1.0.39':
    resolution: {integrity: sha512-nn5ozdjYQpUCZlWGuxcJY/KpxkWQs4DcbMCmKojjyrYDEAGy4Ce19NN4v5MduafTwJlbKc99UA8YhSVqq9yPZA==}
    engines: {node: '>=12.4.0'}

  '@pkgjs/parseargs@0.11.0':
    resolution: {integrity: sha512-+1VkjdD0QBLPodGrJUeqarH8VAIvQODIbwh9XpP5Syisf7YoQgsJKPNFoqqLQlu+VQ/tVSshMR6loPMn8U+dPg==}
    engines: {node: '>=14'}

  '@rollup/plugin-commonjs@26.0.1':
    resolution: {integrity: sha512-UnsKoZK6/aGIH6AdkptXhNvhaqftcjq3zZdT+LY5Ftms6JR06nADcDsYp5hTU9E2lbJUEOhdlY5J4DNTneM+jQ==}
    engines: {node: '>=16.0.0 || 14 >= 14.17'}
    peerDependencies:
      rollup: ^2.68.0||^3.0.0||^4.0.0
    peerDependenciesMeta:
      rollup:
        optional: true

  '@rollup/plugin-node-resolve@15.2.3':
    resolution: {integrity: sha512-j/lym8nf5E21LwBT4Df1VD6hRO2L2iwUeUmP7litikRsVp1H6NWx20NEp0Y7su+7XGc476GnXXc4kFeZNGmaSQ==}
    engines: {node: '>=14.0.0'}
    peerDependencies:
      rollup: ^2.78.0||^3.0.0||^4.0.0
    peerDependenciesMeta:
      rollup:
        optional: true

  '@rollup/pluginutils@5.1.0':
    resolution: {integrity: sha512-XTIWOPPcpvyKI6L1NHo0lFlCyznUEyPmPY1mc3KpPVDYulHSTvyeLNVW00QTLIAFNhR3kYnJTQHeGqU4M3n09g==}
    engines: {node: '>=14.0.0'}
    peerDependencies:
      rollup: ^1.20.0||^2.0.0||^3.0.0||^4.0.0
    peerDependenciesMeta:
      rollup:
        optional: true

  '@rollup/rollup-android-arm-eabi@4.22.4':
    resolution: {integrity: sha512-Fxamp4aEZnfPOcGA8KSNEohV8hX7zVHOemC8jVBoBUHu5zpJK/Eu3uJwt6BMgy9fkvzxDaurgj96F/NiLukF2w==}
    cpu: [arm]
    os: [android]

  '@rollup/rollup-android-arm64@4.22.4':
    resolution: {integrity: sha512-VXoK5UMrgECLYaMuGuVTOx5kcuap1Jm8g/M83RnCHBKOqvPPmROFJGQaZhGccnsFtfXQ3XYa4/jMCJvZnbJBdA==}
    cpu: [arm64]
    os: [android]

  '@rollup/rollup-darwin-arm64@4.22.4':
    resolution: {integrity: sha512-xMM9ORBqu81jyMKCDP+SZDhnX2QEVQzTcC6G18KlTQEzWK8r/oNZtKuZaCcHhnsa6fEeOBionoyl5JsAbE/36Q==}
    cpu: [arm64]
    os: [darwin]

  '@rollup/rollup-darwin-x64@4.22.4':
    resolution: {integrity: sha512-aJJyYKQwbHuhTUrjWjxEvGnNNBCnmpHDvrb8JFDbeSH3m2XdHcxDd3jthAzvmoI8w/kSjd2y0udT+4okADsZIw==}
    cpu: [x64]
    os: [darwin]

  '@rollup/rollup-linux-arm-gnueabihf@4.22.4':
    resolution: {integrity: sha512-j63YtCIRAzbO+gC2L9dWXRh5BFetsv0j0va0Wi9epXDgU/XUi5dJKo4USTttVyK7fGw2nPWK0PbAvyliz50SCQ==}
    cpu: [arm]
    os: [linux]

  '@rollup/rollup-linux-arm-musleabihf@4.22.4':
    resolution: {integrity: sha512-dJnWUgwWBX1YBRsuKKMOlXCzh2Wu1mlHzv20TpqEsfdZLb3WoJW2kIEsGwLkroYf24IrPAvOT/ZQ2OYMV6vlrg==}
    cpu: [arm]
    os: [linux]

  '@rollup/rollup-linux-arm64-gnu@4.22.4':
    resolution: {integrity: sha512-AdPRoNi3NKVLolCN/Sp4F4N1d98c4SBnHMKoLuiG6RXgoZ4sllseuGioszumnPGmPM2O7qaAX/IJdeDU8f26Aw==}
    cpu: [arm64]
    os: [linux]

  '@rollup/rollup-linux-arm64-musl@4.22.4':
    resolution: {integrity: sha512-Gl0AxBtDg8uoAn5CCqQDMqAx22Wx22pjDOjBdmG0VIWX3qUBHzYmOKh8KXHL4UpogfJ14G4wk16EQogF+v8hmA==}
    cpu: [arm64]
    os: [linux]

  '@rollup/rollup-linux-powerpc64le-gnu@4.22.4':
    resolution: {integrity: sha512-3aVCK9xfWW1oGQpTsYJJPF6bfpWfhbRnhdlyhak2ZiyFLDaayz0EP5j9V1RVLAAxlmWKTDfS9wyRyY3hvhPoOg==}
    cpu: [ppc64]
    os: [linux]

  '@rollup/rollup-linux-riscv64-gnu@4.22.4':
    resolution: {integrity: sha512-ePYIir6VYnhgv2C5Xe9u+ico4t8sZWXschR6fMgoPUK31yQu7hTEJb7bCqivHECwIClJfKgE7zYsh1qTP3WHUA==}
    cpu: [riscv64]
    os: [linux]

  '@rollup/rollup-linux-s390x-gnu@4.22.4':
    resolution: {integrity: sha512-GqFJ9wLlbB9daxhVlrTe61vJtEY99/xB3C8e4ULVsVfflcpmR6c8UZXjtkMA6FhNONhj2eA5Tk9uAVw5orEs4Q==}
    cpu: [s390x]
    os: [linux]

  '@rollup/rollup-linux-x64-gnu@4.22.4':
    resolution: {integrity: sha512-87v0ol2sH9GE3cLQLNEy0K/R0pz1nvg76o8M5nhMR0+Q+BBGLnb35P0fVz4CQxHYXaAOhE8HhlkaZfsdUOlHwg==}
    cpu: [x64]
    os: [linux]

  '@rollup/rollup-linux-x64-musl@4.22.4':
    resolution: {integrity: sha512-UV6FZMUgePDZrFjrNGIWzDo/vABebuXBhJEqrHxrGiU6HikPy0Z3LfdtciIttEUQfuDdCn8fqh7wiFJjCNwO+g==}
    cpu: [x64]
    os: [linux]

  '@rollup/rollup-win32-arm64-msvc@4.22.4':
    resolution: {integrity: sha512-BjI+NVVEGAXjGWYHz/vv0pBqfGoUH0IGZ0cICTn7kB9PyjrATSkX+8WkguNjWoj2qSr1im/+tTGRaY+4/PdcQw==}
    cpu: [arm64]
    os: [win32]

  '@rollup/rollup-win32-ia32-msvc@4.22.4':
    resolution: {integrity: sha512-SiWG/1TuUdPvYmzmYnmd3IEifzR61Tragkbx9D3+R8mzQqDBz8v+BvZNDlkiTtI9T15KYZhP0ehn3Dld4n9J5g==}
    cpu: [ia32]
    os: [win32]

  '@rollup/rollup-win32-x64-msvc@4.22.4':
    resolution: {integrity: sha512-j8pPKp53/lq9lMXN57S8cFz0MynJk8OWNuUnXct/9KCpKU7DgU3bYMJhwWmcqC0UU29p8Lr0/7KEVcaM6bf47Q==}
    cpu: [x64]
    os: [win32]

  '@shikijs/core@1.10.3':
    resolution: {integrity: sha512-D45PMaBaeDHxww+EkcDQtDAtzv00Gcsp72ukBtaLSmqRvh0WgGMq3Al0rl1QQBZfuneO75NXMIzEZGFitThWbg==}

  '@sinclair/typebox@0.27.8':
    resolution: {integrity: sha512-+Fj43pSMwJs4KRrH/938Uf+uAELIgVBmQzg/q1YG10djyfA3TnrU8N8XzqCh/okZdszqBQTZf96idMfE5lnwTA==}

  '@sinonjs/commons@3.0.0':
    resolution: {integrity: sha512-jXBtWAF4vmdNmZgD5FoKsVLv3rPgDnLgPbU84LIJ3otV44vJlDRokVng5v8NFJdCf/da9legHcKaRuZs4L7faA==}

  '@sinonjs/fake-timers@10.3.0':
    resolution: {integrity: sha512-V4BG07kuYSUkTCSBHG8G8TNhM+F19jXFWnQtzj+we8DrkpSBCee9Z3Ms8yiGer/dlmhe35/Xdgyo3/0rQKg7YA==}

  '@types/babel__core@7.20.5':
    resolution: {integrity: sha512-qoQprZvz5wQFJwMDqeseRXWv3rqMvhgpbXFfVyWhbx9X47POIA6i/+dXefEmZKoAgOaTdaIgNSMqMIU61yRyzA==}

  '@types/babel__generator@7.6.8':
    resolution: {integrity: sha512-ASsj+tpEDsEiFr1arWrlN6V3mdfjRMZt6LtK/Vp/kreFLnr5QH5+DhvD5nINYZXzwJvXeGq+05iUXcAzVrqWtw==}

  '@types/babel__template@7.4.4':
    resolution: {integrity: sha512-h/NUaSyG5EyxBIp8YRxo4RMe2/qQgvyowRwVMzhYhBCONbW8PUsg4lkFMrhgZhUe5z3L3MiLDuvyJ/CaPa2A8A==}

  '@types/babel__traverse@7.20.4':
    resolution: {integrity: sha512-mSM/iKUk5fDDrEV/e83qY+Cr3I1+Q3qqTuEn++HAWYjEa1+NxZr6CNrcJGf2ZTnq4HoFGC3zaTPZTobCzCFukA==}

  '@types/estree@1.0.5':
    resolution: {integrity: sha512-/kYRxGDLWzHOB7q+wtSUQlFrtcdUccpfy+X+9iMBpHK8QLLhx2wIPYuS5DYtR9Wa/YlZAbIovy7qVdB1Aq6Lyw==}

  '@types/graceful-fs@4.1.9':
    resolution: {integrity: sha512-olP3sd1qOEe5dXTSaFvQG+02VdRXcdytWLAZsAq1PecU8uqQAhkrnbli7DagjtXKW/Bl7YJbUsa8MPcuc8LHEQ==}

  '@types/hast@3.0.4':
    resolution: {integrity: sha512-WPs+bbQw5aCj+x6laNGWLH3wviHtoCv/P3+otBhbOhJgG8qtpdAMlTCxLtsTWA7LH1Oh/bFCHsBn0TPS5m30EQ==}

  '@types/istanbul-lib-coverage@2.0.6':
    resolution: {integrity: sha512-2QF/t/auWm0lsy8XtKVPG19v3sSOQlJe/YHZgfjb/KBBHOGSV+J2q/S671rcq9uTBrLAXmZpqJiaQbMT+zNU1w==}

  '@types/istanbul-lib-report@3.0.3':
    resolution: {integrity: sha512-NQn7AHQnk/RSLOxrBbGyJM/aVQ+pjj5HCgasFxc0K/KhoATfQ/47AyUl15I2yBUpihjmas+a+VJBOqecrFH+uA==}

  '@types/istanbul-reports@3.0.4':
    resolution: {integrity: sha512-pk2B1NWalF9toCRu6gjBzR69syFjP4Od8WRAX+0mmf9lAjCRicLOWc+ZrxZHx/0XRjotgkF9t6iaMJ+aXcOdZQ==}

  '@types/jest@29.5.12':
    resolution: {integrity: sha512-eDC8bTvT/QhYdxJAulQikueigY5AsdBRH2yDKW3yveW7svY3+DzN84/2NUgkw10RTiJbWqZrTtoGVdYlvFJdLw==}

  '@types/node@20.14.10':
    resolution: {integrity: sha512-MdiXf+nDuMvY0gJKxyfZ7/6UFsETO7mGKF54MVD/ekJS6HdFtpZFBgrh6Pseu64XTb2MLyFPlbW6hj8HYRQNOQ==}

  '@types/resolve@1.20.2':
    resolution: {integrity: sha512-60BCwRFOZCQhDncwQdxxeOEEkbc5dIMccYLwbxsS4TUNeVECQ/pBJ0j09mrHOl/JJvpRPGwO9SvE4nR2Nb/a4Q==}

  '@types/seedrandom@3.0.8':
    resolution: {integrity: sha512-TY1eezMU2zH2ozQoAFAQFOPpvP15g+ZgSfTZt31AUUH/Rxtnz3H+A/Sv1Snw2/amp//omibc+AEkTaA8KUeOLQ==}

  '@types/stack-utils@2.0.3':
    resolution: {integrity: sha512-9aEbYZ3TbYMznPdcdr3SmIrLXwC/AKZXQeCf9Pgao5CKb8CyHuEX5jzWPTkvregvhRJHcpRO6BFoGW9ycaOkYw==}

  '@types/unist@3.0.2':
    resolution: {integrity: sha512-dqId9J8K/vGi5Zr7oo212BGii5m3q5Hxlkwy3WpYuKPklmBEvsbMYYyLxAQpSffdLl/gdW0XUpKWFvYmyoWCoQ==}

  '@types/yargs-parser@21.0.3':
    resolution: {integrity: sha512-I4q9QU9MQv4oEOz4tAHJtNz1cwuLxn2F3xcc2iV5WdqLPpUnj30aUuxt1mAxYTG+oe8CZMV/+6rU4S4gRDzqtQ==}

  '@types/yargs@17.0.32':
    resolution: {integrity: sha512-xQ67Yc/laOG5uMfX/093MRlGGCIBzZMarVa+gfNKJxWAIgykYpVGkBdbqEzGDDfCrVUj6Hiff4mTZ5BA6TmAog==}

  '@typescript-eslint/eslint-plugin@8.0.0':
    resolution: {integrity: sha512-STIZdwEQRXAHvNUS6ILDf5z3u95Gc8jzywunxSNqX00OooIemaaNIA0vEgynJlycL5AjabYLLrIyHd4iazyvtg==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    peerDependencies:
      '@typescript-eslint/parser': ^8.0.0 || ^8.0.0-alpha.0
      eslint: ^8.57.0 || ^9.0.0
      typescript: '*'
    peerDependenciesMeta:
      typescript:
        optional: true

  '@typescript-eslint/parser@8.0.0':
    resolution: {integrity: sha512-pS1hdZ+vnrpDIxuFXYQpLTILglTjSYJ9MbetZctrUawogUsPdz31DIIRZ9+rab0LhYNTsk88w4fIzVheiTbWOQ==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    peerDependencies:
      eslint: ^8.57.0 || ^9.0.0
      typescript: '*'
    peerDependenciesMeta:
      typescript:
        optional: true

  '@typescript-eslint/scope-manager@8.0.0':
    resolution: {integrity: sha512-V0aa9Csx/ZWWv2IPgTfY7T4agYwJyILESu/PVqFtTFz9RIS823mAze+NbnBI8xiwdX3iqeQbcTYlvB04G9wyQw==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@typescript-eslint/type-utils@8.0.0':
    resolution: {integrity: sha512-mJAFP2mZLTBwAn5WI4PMakpywfWFH5nQZezUQdSKV23Pqo6o9iShQg1hP2+0hJJXP2LnZkWPphdIq4juYYwCeg==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    peerDependencies:
      typescript: '*'
    peerDependenciesMeta:
      typescript:
        optional: true

  '@typescript-eslint/types@8.0.0':
    resolution: {integrity: sha512-wgdSGs9BTMWQ7ooeHtu5quddKKs5Z5dS+fHLbrQI+ID0XWJLODGMHRfhwImiHoeO2S5Wir2yXuadJN6/l4JRxw==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  '@typescript-eslint/typescript-estree@8.0.0':
    resolution: {integrity: sha512-5b97WpKMX+Y43YKi4zVcCVLtK5F98dFls3Oxui8LbnmRsseKenbbDinmvxrWegKDMmlkIq/XHuyy0UGLtpCDKg==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    peerDependencies:
      typescript: '*'
    peerDependenciesMeta:
      typescript:
        optional: true

  '@typescript-eslint/utils@8.0.0':
    resolution: {integrity: sha512-k/oS/A/3QeGLRvOWCg6/9rATJL5rec7/5s1YmdS0ZU6LHveJyGFwBvLhSRBv6i9xaj7etmosp+l+ViN1I9Aj/Q==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    peerDependencies:
      eslint: ^8.57.0 || ^9.0.0

  '@typescript-eslint/visitor-keys@8.0.0':
    resolution: {integrity: sha512-oN0K4nkHuOyF3PVMyETbpP5zp6wfyOvm7tWhTMfoqxSSsPmJIh6JNASuZDlODE8eE+0EB9uar+6+vxr9DBTYOA==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  acorn-jsx@5.3.2:
    resolution: {integrity: sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==}
    peerDependencies:
      acorn: ^6.0.0 || ^7.0.0 || ^8.0.0

  acorn@8.12.1:
    resolution: {integrity: sha512-tcpGyI9zbizT9JbV6oYE477V6mTlXvvi0T0G3SNIYE2apm/G5huBa1+K89VGeovbg+jycCrfhl3ADxErOuO6Jg==}
    engines: {node: '>=0.4.0'}
    hasBin: true

  ajv@6.12.6:
    resolution: {integrity: sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==}

  ansi-escapes@4.3.2:
    resolution: {integrity: sha512-gKXj5ALrKWQLsYG9jlTRmR/xKluxHV+Z9QEwNIgCfM1/uwPMCuzVVnh5mwTd+OuBZcwSIMbqssNWRm1lE51QaQ==}
    engines: {node: '>=8'}

  ansi-regex@5.0.1:
    resolution: {integrity: sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==}
    engines: {node: '>=8'}

  ansi-regex@6.0.1:
    resolution: {integrity: sha512-n5M855fKb2SsfMIiFFoVrABHJC8QtHwVx+mHWP3QcEqBHYienj5dHSgjbxtC0WEZXYt4wcD6zrQElDPhFuZgfA==}
    engines: {node: '>=12'}

  ansi-styles@3.2.1:
    resolution: {integrity: sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA==}
    engines: {node: '>=4'}

  ansi-styles@4.3.0:
    resolution: {integrity: sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==}
    engines: {node: '>=8'}

  ansi-styles@5.2.0:
    resolution: {integrity: sha512-Cxwpt2SfTzTtXcfOlzGEee8O+c+MmUgGrNiBcXnuWxuFJHe6a5Hz7qwhwe5OgaSYI0IJvkLqWX1ASG+cJOkEiA==}
    engines: {node: '>=10'}

  ansi-styles@6.2.1:
    resolution: {integrity: sha512-bN798gFfQX+viw3R7yrGWRqnrN2oRkEkUjjl4JNn4E8GxxbjtG3FbrEIIY3l8/hrwUwIeCZvi4QuOTP4MErVug==}
    engines: {node: '>=12'}

  anymatch@3.1.3:
    resolution: {integrity: sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==}
    engines: {node: '>= 8'}

  argparse@1.0.10:
    resolution: {integrity: sha512-o5Roy6tNG4SL/FOkCAN6RzjiakZS25RLYFrcMttJqbdd8BWrnA+fGz57iN5Pb06pvBGvl5gQ0B48dJlslXvoTg==}

  argparse@2.0.1:
    resolution: {integrity: sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==}

  array-union@2.1.0:
    resolution: {integrity: sha512-HGyxoOTYUyCM6stUe6EJgnd4EoewAI7zMdfqO+kGjnlZmBDz/cR5pf8r/cR4Wq60sL/p0IkcjUEEPwS3GFrIyw==}
    engines: {node: '>=8'}

  async@3.2.5:
    resolution: {integrity: sha512-baNZyqaaLhyLVKm/DlvdW051MSgO6b8eVfIezl9E5PqWxFgzLm/wQntEW4zOytVburDEr0JlALEpdOFwvErLsg==}

  babel-jest@29.7.0:
    resolution: {integrity: sha512-BrvGY3xZSwEcCzKvKsCi2GgHqDqsYkOP4/by5xCgIwGXQxIEh+8ew3gmrE1y7XRR6LHZIj6yLYnUi/mm2KXKBg==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}
    peerDependencies:
      '@babel/core': ^7.8.0

  babel-plugin-istanbul@6.1.1:
    resolution: {integrity: sha512-Y1IQok9821cC9onCx5otgFfRm7Lm+I+wwxOx738M/WLPZ9Q42m4IG5W0FNX8WLL2gYMZo3JkuXIH2DOpWM+qwA==}
    engines: {node: '>=8'}

  babel-plugin-jest-hoist@29.6.3:
    resolution: {integrity: sha512-ESAc/RJvGTFEzRwOTT4+lNDk/GNHMkKbNzsvT0qKRfDyyYTskxB5rnU2njIDYVxXCBHHEI1c0YwHob3WaYujOg==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  babel-preset-current-node-syntax@1.0.1:
    resolution: {integrity: sha512-M7LQ0bxarkxQoN+vz5aJPsLBn77n8QgTFmo8WK0/44auK2xlCXrYcUxHFxgU7qW5Yzw/CjmLRK2uJzaCd7LvqQ==}
    peerDependencies:
      '@babel/core': ^7.0.0

  babel-preset-jest@29.6.3:
    resolution: {integrity: sha512-0B3bhxR6snWXJZtR/RliHTDPRgn1sNHOR0yVtq/IiQFyuOVjFS+wuio/R4gSNkyYmKmJB4wGZv2NZanmKmTnNA==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}
    peerDependencies:
      '@babel/core': ^7.0.0

  balanced-match@1.0.2:
    resolution: {integrity: sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==}

  brace-expansion@1.1.11:
    resolution: {integrity: sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==}

  brace-expansion@2.0.1:
    resolution: {integrity: sha512-XnAIvQ8eM+kC6aULx6wuQiwVsnzsi9d3WxzV3FpWTGA19F621kwdbsAcFKXgKUHZWsy+mY6iL1sHTxWEFCytDA==}

  braces@3.0.3:
    resolution: {integrity: sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==}
    engines: {node: '>=8'}

  browserslist@4.22.2:
    resolution: {integrity: sha512-0UgcrvQmBDvZHFGdYUehrCNIazki7/lUP3kkoi/r3YB2amZbFM9J43ZRkJTXBUZK4gmx56+Sqk9+Vs9mwZx9+A==}
    engines: {node: ^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7}
    hasBin: true

  bs-logger@0.2.6:
    resolution: {integrity: sha512-pd8DCoxmbgc7hyPKOvxtqNcjYoOsABPQdcCUjGp3d42VR2CX1ORhk2A87oqqu5R1kk+76nsxZupkmyd+MVtCog==}
    engines: {node: '>= 6'}

  bser@2.1.1:
    resolution: {integrity: sha512-gQxTNE/GAfIIrmHLUE3oJyp5FO6HRBfhjnw4/wMmA63ZGDJnWBmgY/lyQBpnDUkGmAhbSe39tx2d/iTOAfglwQ==}

  buffer-from@1.1.2:
    resolution: {integrity: sha512-E+XQCRwSbaaiChtv6k6Dwgc+bx+Bs6vuKJHHl5kox/BaKbhiXzqQOwK4cO22yElGp2OCmjwVhT3HmxgyPGnJfQ==}

  builtin-modules@3.3.0:
    resolution: {integrity: sha512-zhaCDicdLuWN5UbN5IMnFqNMhNfo919sH85y2/ea+5Yg9TsTkeZxpL+JLbp6cgYFS4sRLp3YV4S6yDuqVWHYOw==}
    engines: {node: '>=6'}

  callsites@3.1.0:
    resolution: {integrity: sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==}
    engines: {node: '>=6'}

  camelcase@5.3.1:
    resolution: {integrity: sha512-L28STB170nwWS63UjtlEOE3dldQApaJXZkOI1uMFfzf3rRuPegHaHesyee+YxQ+W6SvRDQV6UrdOdRiR153wJg==}
    engines: {node: '>=6'}

  camelcase@6.3.0:
    resolution: {integrity: sha512-Gmy6FhYlCY7uOElZUSbxo2UCDH8owEk996gkbrpsgGtrJLM3J7jGxl9Ic7Qwwj4ivOE5AWZWRMecDdF7hqGjFA==}
    engines: {node: '>=10'}

  caniuse-lite@1.0.30001570:
    resolution: {integrity: sha512-+3e0ASu4sw1SWaoCtvPeyXp+5PsjigkSt8OXZbF9StH5pQWbxEjLAZE3n8Aup5udop1uRiKA7a4utUk/uoSpUw==}

  chalk@2.4.2:
    resolution: {integrity: sha512-Mti+f9lpJNcwF4tWV8/OrTTtF1gZi+f8FqlyAdouralcFWFQWF2+NgCHShjkCb+IFBLq9buZwE1xckQU4peSuQ==}
    engines: {node: '>=4'}

  chalk@4.1.2:
    resolution: {integrity: sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==}
    engines: {node: '>=10'}

  char-regex@1.0.2:
    resolution: {integrity: sha512-kWWXztvZ5SBQV+eRgKFeh8q5sLuZY2+8WUIzlxWVTg+oGwY14qylx1KbKzHd8P6ZYkAg0xyIDU9JMHhyJMZ1jw==}
    engines: {node: '>=10'}

  ci-info@3.9.0:
    resolution: {integrity: sha512-NIxF55hv4nSqQswkAeiOi1r83xy8JldOFDTWiug55KBu9Jnblncd2U6ViHmYgHf01TPZS77NJBhBMKdWj9HQMQ==}
    engines: {node: '>=8'}

  cjs-module-lexer@1.2.3:
    resolution: {integrity: sha512-0TNiGstbQmCFwt4akjjBg5pLRTSyj/PkWQ1ZoO2zntmg9yLqSRxwEa4iCfQLGjqhiqBfOJa7W/E8wfGrTDmlZQ==}

  cliui@8.0.1:
    resolution: {integrity: sha512-BSeNnyus75C4//NQ9gQt1/csTXyo/8Sb+afLAkzAptFuMsod9HFokGNudZpi/oQV73hnVK+sR+5PVRMd+Dr7YQ==}
    engines: {node: '>=12'}

  co@4.6.0:
    resolution: {integrity: sha512-QVb0dM5HvG+uaxitm8wONl7jltx8dqhfU33DcqtOZcLSVIKSDDLDi7+0LbAKiyI8hD9u42m2YxXSkMGWThaecQ==}
    engines: {iojs: '>= 1.0.0', node: '>= 0.12.0'}

  collect-v8-coverage@1.0.2:
    resolution: {integrity: sha512-lHl4d5/ONEbLlJvaJNtsF/Lz+WvB07u2ycqTYbdrq7UypDXailES4valYb2eWiJFxZlVmpGekfqoxQhzyFdT4Q==}

  color-convert@1.9.3:
    resolution: {integrity: sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==}

  color-convert@2.0.1:
    resolution: {integrity: sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==}
    engines: {node: '>=7.0.0'}

  color-name@1.1.3:
    resolution: {integrity: sha512-72fSenhMw2HZMTVHeCA9KCmpEIbzWiQsjN+BHcBbS9vr1mtt+vJjPdksIBNUmKAW8TFUDPJK5SUU3QhE9NEXDw==}

  color-name@1.1.4:
    resolution: {integrity: sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==}

  commondir@1.0.1:
    resolution: {integrity: sha512-W9pAhw0ja1Edb5GVdIF1mjZw/ASI0AlShXM83UUGe2DVr5TdAPEA1OA8m/g8zWp9x6On7gqufY+FatDbC3MDQg==}

  concat-map@0.0.1:
    resolution: {integrity: sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==}

  convert-source-map@2.0.0:
    resolution: {integrity: sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg==}

  create-jest@29.7.0:
    resolution: {integrity: sha512-Adz2bdH0Vq3F53KEMJOoftQFutWCukm6J24wbPWRO4k1kMY7gS7ds/uoJkNuV8wDCtWWnuwGcJwpWcih+zEW1Q==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}
    hasBin: true

  cross-spawn@7.0.6:
    resolution: {integrity: sha512-uV2QOWP2nWzsy2aMp8aRibhi9dlzF5Hgh5SHaB9OiTGEyDTiJJyx0uy51QXdyWbtAHNua4XJzUKca3OzKUd3vA==}
    engines: {node: '>= 8'}

  debug@4.3.4:
    resolution: {integrity: sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==}
    engines: {node: '>=6.0'}
    peerDependencies:
      supports-color: '*'
    peerDependenciesMeta:
      supports-color:
        optional: true

  decimal.js@10.4.3:
    resolution: {integrity: sha512-VBBaLc1MgL5XpzgIP7ny5Z6Nx3UrRkIViUkPUdtl9aya5amy3De1gsUUSB1g3+3sExYNjCAsAznmukyxCb1GRA==}

  dedent@1.5.1:
    resolution: {integrity: sha512-+LxW+KLWxu3HW3M2w2ympwtqPrqYRzU8fqi6Fhd18fBALe15blJPI/I4+UHveMVG6lJqB4JNd4UG0S5cnVHwIg==}
    peerDependencies:
      babel-plugin-macros: ^3.1.0
    peerDependenciesMeta:
      babel-plugin-macros:
        optional: true

  deep-is@0.1.4:
    resolution: {integrity: sha512-oIPzksmTg4/MriiaYGO+okXDT7ztn/w3Eptv/+gSIdMdKsJo0u4CfYNFJPy+4SKMuCqGw2wxnA+URMg3t8a/bQ==}

  deepmerge@4.3.1:
    resolution: {integrity: sha512-3sUqbMEc77XqpdNO7FRyRog+eW3ph+GYCbj+rK+uYyRMuwsVy0rMiVtPn+QJlKFvWP/1PYpapqYn0Me2knFn+A==}
    engines: {node: '>=0.10.0'}

  detect-newline@3.1.0:
    resolution: {integrity: sha512-TLz+x/vEXm/Y7P7wn1EJFNLxYpUD4TgMosxY6fAVJUnJMbupHBOncxyWUG9OpTaH9EBD7uFI5LfEgmMOc54DsA==}
    engines: {node: '>=8'}

  diff-sequences@29.6.3:
    resolution: {integrity: sha512-EjePK1srD3P08o2j4f0ExnylqRs5B9tJjcp9t1krH2qRi8CCdsYfwe9JgSLurFBWwq4uOlipzfk5fHNvwFKr8Q==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  dir-glob@3.0.1:
    resolution: {integrity: sha512-WkrWp9GR4KXfKGYzOLmTuGVi1UWFfws377n9cc55/tb6DuqyF6pcQ5AbiHEshaDpY9v6oaSr2XCDidGmMwdzIA==}
    engines: {node: '>=8'}

  eastasianwidth@0.2.0:
    resolution: {integrity: sha512-I88TYZWc9XiYHRQ4/3c5rjjfgkjhLyW2luGIheGERbNQ6OY7yTybanSpDXZa8y7VUP9YmDcYa+eyq4ca7iLqWA==}

  ejs@3.1.10:
    resolution: {integrity: sha512-UeJmFfOrAQS8OJWPZ4qtgHyWExa088/MtK5UEyoJGFH67cDEXkZSviOiKRCZ4Xij0zxI3JECgYs3oKx+AizQBA==}
    engines: {node: '>=0.10.0'}
    hasBin: true

  electron-to-chromium@1.4.615:
    resolution: {integrity: sha512-/bKPPcgZVUziECqDc+0HkT87+0zhaWSZHNXqF8FLd2lQcptpmUFwoCSWjCdOng9Gdq+afKArPdEg/0ZW461Eng==}

  emittery@0.13.1:
    resolution: {integrity: sha512-DeWwawk6r5yR9jFgnDKYt4sLS0LmHJJi3ZOnb5/JdbYwj3nW+FxQnHIjhBKz8YLC7oRNPVM9NQ47I3CVx34eqQ==}
    engines: {node: '>=12'}

  emoji-regex@8.0.0:
    resolution: {integrity: sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==}

  emoji-regex@9.2.2:
    resolution: {integrity: sha512-L18DaJsXSUk2+42pv8mLs5jJT2hqFkFE4j21wOmgbUqsZ2hL72NsUU785g9RXgo3s0ZNgVl42TiHp3ZtOv/Vyg==}

  entities@4.5.0:
    resolution: {integrity: sha512-V0hjH4dGPh9Ao5p0MoRY6BVqtwCjhz6vI5LT8AJ55H+4g9/4vbHx1I54fS0XuclLhDHArPQCiMjDxjaL8fPxhw==}
    engines: {node: '>=0.12'}

  error-ex@1.3.2:
    resolution: {integrity: sha512-7dFHNmqeFSEt2ZBsCriorKnn3Z2pj+fd9kmI6QoWw4//DL+icEBfc0U7qJCisqrTsKTjw4fNFy2pW9OqStD84g==}

  es-module-lexer@1.4.1:
    resolution: {integrity: sha512-cXLGjP0c4T3flZJKQSuziYoq7MlT+rnvfZjfp7h+I7K9BNX54kP9nyWvdbwjQ4u1iWbOL4u96fgeZLToQlZC7w==}

  esbuild@0.19.10:
    resolution: {integrity: sha512-S1Y27QGt/snkNYrRcswgRFqZjaTG5a5xM3EQo97uNBnH505pdzSNe/HLBq1v0RO7iK/ngdbhJB6mDAp0OK+iUA==}
    engines: {node: '>=12'}
    hasBin: true

  escalade@3.1.1:
    resolution: {integrity: sha512-k0er2gUkLf8O0zKJiAhmkTnJlTvINGv7ygDNPbeIsX/TJjGJZHuh9B2UxbsaEkmlEo9MfhrSzmhIlhRlI2GXnw==}
    engines: {node: '>=6'}

  escape-string-regexp@1.0.5:
    resolution: {integrity: sha512-vbRorB5FUQWvla16U8R/qgaFIya2qGzwDrNmCZuYKrbdSUMG6I1ZCGQRefkRVhuOkIGVne7BQ35DSfo1qvJqFg==}
    engines: {node: '>=0.8.0'}

  escape-string-regexp@2.0.0:
    resolution: {integrity: sha512-UpzcLCXolUWcNu5HtVMHYdXJjArjsF9C0aNnquZYY4uW/Vu0miy5YoWvbV345HauVvcAUnpRuhMMcqTcGOY2+w==}
    engines: {node: '>=8'}

  escape-string-regexp@4.0.0:
    resolution: {integrity: sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==}
    engines: {node: '>=10'}

  eslint-config-prettier@9.1.0:
    resolution: {integrity: sha512-NSWl5BFQWEPi1j4TjVNItzYV7dZXZ+wP6I6ZhrBGpChQhZRUaElihE9uRRkcbRnNb76UMKDF3r+WTmNcGPKsqw==}
    hasBin: true
    peerDependencies:
      eslint: '>=7.0.0'

  eslint-scope@8.0.1:
    resolution: {integrity: sha512-pL8XjgP4ZOmmwfFE8mEhSxA7ZY4C+LWyqjQ3o4yWkkmD0qcMT9kkW3zWHOczhWcjTSgqycYAgwSlXvZltv65og==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  eslint-visitor-keys@3.4.3:
    resolution: {integrity: sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==}
    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}

  eslint-visitor-keys@4.0.0:
    resolution: {integrity: sha512-OtIRv/2GyiF6o/d8K7MYKKbXrOUBIK6SfkIRM4Z0dY3w+LiQ0vy3F57m0Z71bjbyeiWFiHJ8brqnmE6H6/jEuw==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  eslint@9.6.0:
    resolution: {integrity: sha512-ElQkdLMEEqQNM9Njff+2Y4q2afHk7JpkPvrd7Xh7xefwgQynqPxwf55J7di9+MEibWUGdNjFF9ITG9Pck5M84w==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
    hasBin: true

  espree@10.1.0:
    resolution: {integrity: sha512-M1M6CpiE6ffoigIOWYO9UDP8TMUw9kqb21tf+08IgDYjCsOvCuDt4jQcZmoYxx+w7zlKw9/N0KXfto+I8/FrXA==}
    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}

  esprima@4.0.1:
    resolution: {integrity: sha512-eGuFFw7Upda+g4p+QHvnW0RyTX/SVeJBDM/gCtMARO0cLuT2HcEKnTPvhjV6aGeqrCB/sbNop0Kszm0jsaWU4A==}
    engines: {node: '>=4'}
    hasBin: true

  esquery@1.5.0:
    resolution: {integrity: sha512-YQLXUplAwJgCydQ78IMJywZCceoqk1oH01OERdSAJc/7U2AylwjhSCLDEtqwg811idIS/9fIU5GjG73IgjKMVg==}
    engines: {node: '>=0.10'}

  esrecurse@4.3.0:
    resolution: {integrity: sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==}
    engines: {node: '>=4.0'}

  estraverse@5.3.0:
    resolution: {integrity: sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==}
    engines: {node: '>=4.0'}

  estree-walker@2.0.2:
    resolution: {integrity: sha512-Rfkk/Mp/DL7JVje3u18FxFujQlTNR2q6QfMSMB7AvCBx91NGj/ba3kCfza0f6dVDbw7YlRf/nDrn7pQrCCyQ/w==}

  esutils@2.0.3:
    resolution: {integrity: sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==}
    engines: {node: '>=0.10.0'}

  execa@5.1.1:
    resolution: {integrity: sha512-8uSpZZocAZRBAPIEINJj3Lo9HyGitllczc27Eh5YYojjMFMn8yHMDMaUHE2Jqfq05D/wucwI4JGURyXt1vchyg==}
    engines: {node: '>=10'}

  exit@0.1.2:
    resolution: {integrity: sha512-Zk/eNKV2zbjpKzrsQ+n1G6poVbErQxJ0LBOJXaKZ1EViLzH+hrLu9cdXI4zw9dBQJslwBEpbQ2P1oS7nDxs6jQ==}
    engines: {node: '>= 0.8.0'}

  expect@29.7.0:
    resolution: {integrity: sha512-2Zks0hf1VLFYI1kbh0I5jP3KHHyCHpkfyHBzsSXRFgl/Bg9mWYfMW8oD+PdMPlEwy5HNsR9JutYy6pMeOh61nw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  fast-deep-equal@3.1.3:
    resolution: {integrity: sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==}

  fast-glob@3.3.2:
    resolution: {integrity: sha512-oX2ruAFQwf/Orj8m737Y5adxDQO0LAB7/S5MnxCdTNDd4p6BsyIVsv9JQsATbTSq8KHRpLwIHbVlUNatxd+1Ow==}
    engines: {node: '>=8.6.0'}

  fast-json-stable-stringify@2.1.0:
    resolution: {integrity: sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==}

  fast-levenshtein@2.0.6:
    resolution: {integrity: sha512-DCXu6Ifhqcks7TZKY3Hxp3y6qphY5SJZmrWMDrKcERSOXWQdMhU9Ig/PYrzyw/ul9jOIyh0N4M0tbC5hodg8dw==}

  fastq@1.16.0:
    resolution: {integrity: sha512-ifCoaXsDrsdkWTtiNJX5uzHDsrck5TzfKKDcuFFTIrrc/BS076qgEIfoIy1VeZqViznfKiysPYTh/QeHtnIsYA==}

  fb-watchman@2.0.2:
    resolution: {integrity: sha512-p5161BqbuCaSnB8jIbzQHOlpgsPmK5rJVDfDKO91Axs5NC1uu3HRQm6wt9cd9/+GtQQIO53JdGXXoyDpTAsgYA==}

  file-entry-cache@8.0.0:
    resolution: {integrity: sha512-XXTUwCvisa5oacNGRP9SfNtYBNAMi+RPwBFmblZEF7N7swHYQS6/Zfk7SRwx4D5j3CH211YNRco1DEMNVfZCnQ==}
    engines: {node: '>=16.0.0'}

  filelist@1.0.4:
    resolution: {integrity: sha512-w1cEuf3S+DrLCQL7ET6kz+gmlJdbq9J7yXCSjK/OZCPA+qEN1WyF4ZAf0YYJa4/shHJra2t/d/r8SV4Ji+x+8Q==}

  fill-range@7.1.1:
    resolution: {integrity: sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==}
    engines: {node: '>=8'}

  find-up@4.1.0:
    resolution: {integrity: sha512-PpOwAdQ/YlXQ2vj8a3h8IipDuYRi3wceVQQGYWxNINccq40Anw7BlsEXCMbt1Zt+OLA6Fq9suIpIWD0OsnISlw==}
    engines: {node: '>=8'}

  find-up@5.0.0:
    resolution: {integrity: sha512-78/PXT1wlLLDgTzDs7sjq9hzz0vXD+zn+7wypEe4fXQxCmdmqfGsEPQxmiCSQI3ajFV91bVSsvNtrJRiW6nGng==}
    engines: {node: '>=10'}

  flat-cache@4.0.1:
    resolution: {integrity: sha512-f7ccFPK3SXFHpx15UIGyRJ/FJQctuKZ0zVuN3frBo4HnK3cay9VEW0R6yPYFHC0AgqhukPzKjq22t5DmAyqGyw==}
    engines: {node: '>=16'}

  flatted@3.2.9:
    resolution: {integrity: sha512-36yxDn5H7OFZQla0/jFJmbIKTdZAQHngCedGxiMmpNfEZM0sdEeT+WczLQrjK6D7o2aiyLYDnkw0R3JK0Qv1RQ==}

  foreground-child@3.1.1:
    resolution: {integrity: sha512-TMKDUnIte6bfb5nWv7V/caI169OHgvwjb7V4WkeUvbQQdjr5rWKqHFiKWb/fcOwB+CzBT+qbWjvj+DVwRskpIg==}
    engines: {node: '>=14'}

  fs.realpath@1.0.0:
    resolution: {integrity: sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw==}

  fsevents@2.3.3:
    resolution: {integrity: sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==}
    engines: {node: ^8.16.0 || ^10.6.0 || >=11.0.0}
    os: [darwin]

  gensync@1.0.0-beta.2:
    resolution: {integrity: sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==}
    engines: {node: '>=6.9.0'}

  get-caller-file@2.0.5:
    resolution: {integrity: sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==}
    engines: {node: 6.* || 8.* || >= 10.*}

  get-package-type@0.1.0:
    resolution: {integrity: sha512-pjzuKtY64GYfWizNAJ0fr9VqttZkNiK2iS430LtIHzjBEr6bX8Am2zm4sW4Ro5wjWW5cAlRL1qAMTcXbjNAO2Q==}
    engines: {node: '>=8.0.0'}

  get-stream@6.0.1:
    resolution: {integrity: sha512-ts6Wi+2j3jQjqi70w5AlN8DFnkSwC+MqmxEzdEALB2qXZYV3X/b1CTfgPLGJNMeAWxdPfU8FO1ms3NUfaHCPYg==}
    engines: {node: '>=10'}

  get-tsconfig@4.7.2:
    resolution: {integrity: sha512-wuMsz4leaj5hbGgg4IvDU0bqJagpftG5l5cXIAvo8uZrqn0NJqwtfupTN00VnkQJPcIRrxYrm1Ue24btpCha2A==}

  glob-parent@5.1.2:
    resolution: {integrity: sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==}
    engines: {node: '>= 6'}

  glob-parent@6.0.2:
    resolution: {integrity: sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==}
    engines: {node: '>=10.13.0'}

  glob@10.4.5:
    resolution: {integrity: sha512-7Bv8RF0k6xjo7d4A/PxYLbUCfb6c+Vpd2/mB2yRDlew7Jb5hEXiCD9ibfO7wpk8i4sevK6DFny9h7EYbM3/sHg==}
    hasBin: true

  glob@11.0.0:
    resolution: {integrity: sha512-9UiX/Bl6J2yaBbxKoEBRm4Cipxgok8kQYcOPEhScPwebu2I0HoQOuYdIO6S3hLuWoZgpDpwQZMzTFxgpkyT76g==}
    engines: {node: 20 || >=22}
    hasBin: true

  glob@7.2.3:
    resolution: {integrity: sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==}
    deprecated: Glob versions prior to v9 are no longer supported

  globals@11.12.0:
    resolution: {integrity: sha512-WOBp/EEGUiIsJSp7wcv/y6MO+lV9UoncWqxuFfm8eBwzWNgyfBd6Gz+IeKQ9jCmyhoH99g15M3T+QaVHFjizVA==}
    engines: {node: '>=4'}

  globals@14.0.0:
    resolution: {integrity: sha512-oahGvuMGQlPw/ivIYBjVSrWAfWLBeku5tpPE2fOPLi+WHffIWbuh2tCjhyQhTBPMf5E9jDEH4FOmTYgYwbKwtQ==}
    engines: {node: '>=18'}

  globals@15.8.0:
    resolution: {integrity: sha512-VZAJ4cewHTExBWDHR6yptdIBlx9YSSZuwojj9Nt5mBRXQzrKakDsVKQ1J63sklLvzAJm0X5+RpO4i3Y2hcOnFw==}
    engines: {node: '>=18'}

  globby@11.1.0:
    resolution: {integrity: sha512-jhIXaOzy1sb8IyocaruWSn1TjmnBVs8Ayhcy83rmxNJ8q2uWKCAj3CnJY+KpGSXCueAPc0i05kVvVKtP1t9S3g==}
    engines: {node: '>=10'}

  graceful-fs@4.2.11:
    resolution: {integrity: sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ==}

  graphemer@1.4.0:
    resolution: {integrity: sha512-EtKwoO6kxCL9WO5xipiHTZlSzBm7WLT627TqC/uVRd0HKmq8NXyebnNYxDoBi7wt8eTWrUrKXCOVaFq9x1kgag==}

  has-flag@3.0.0:
    resolution: {integrity: sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw==}
    engines: {node: '>=4'}

  has-flag@4.0.0:
    resolution: {integrity: sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==}
    engines: {node: '>=8'}

  html-escaper@2.0.2:
    resolution: {integrity: sha512-H2iMtd0I4Mt5eYiapRdIDjp+XzelXQ0tFE4JS7YFwFevXXMmOp9myNrUvCg0D6ws8iqkRPBfKHgbwig1SmlLfg==}

  human-signals@2.1.0:
    resolution: {integrity: sha512-B4FFZ6q/T2jhhksgkbEW3HBvWIfDW85snkQgawt07S7J5QXTk6BkNV+0yAeZrM5QpMAdYlocGoljn0sJ/WQkFw==}
    engines: {node: '>=10.17.0'}

  ignore@5.3.0:
    resolution: {integrity: sha512-g7dmpshy+gD7mh88OC9NwSGTKoc3kyLAZQRU1mt53Aw/vnvfXnbC+F/7F7QoYVKbV+KNvJx8wArewKy1vXMtlg==}
    engines: {node: '>= 4'}

  ignore@5.3.1:
    resolution: {integrity: sha512-5Fytz/IraMjqpwfd34ke28PTVMjZjJG2MPn5t7OE4eUCUNf8BAa7b5WUS9/Qvr6mwOQS7Mk6vdsMno5he+T8Xw==}
    engines: {node: '>= 4'}

  import-fresh@3.3.0:
    resolution: {integrity: sha512-veYYhQa+D1QBKznvhUHxb8faxlrwUnxseDAbAp457E0wLNio2bOSKnjYDhMj+YiAq61xrMGhQk9iXVk5FzgQMw==}
    engines: {node: '>=6'}

  import-local@3.1.0:
    resolution: {integrity: sha512-ASB07uLtnDs1o6EHjKpX34BKYDSqnFerfTOJL2HvMqF70LnxpjkzDB8J44oT9pu4AMPkQwf8jl6szgvNd2tRIg==}
    engines: {node: '>=8'}
    hasBin: true

  imurmurhash@0.1.4:
    resolution: {integrity: sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==}
    engines: {node: '>=0.8.19'}

  inflight@1.0.6:
    resolution: {integrity: sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==}
    deprecated: This module is not supported, and leaks memory. Do not use it. Check out lru-cache if you want a good and tested way to coalesce async requests by a key value, which is much more comprehensive and powerful.

  inherits@2.0.4:
    resolution: {integrity: sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==}

  is-arrayish@0.2.1:
    resolution: {integrity: sha512-zz06S8t0ozoDXMG+ube26zeCTNXcKIPJZJi8hBrF4idCLms4CG9QtK7qBl1boi5ODzFpjswb5JPmHCbMpjaYzg==}

  is-builtin-module@3.2.1:
    resolution: {integrity: sha512-BSLE3HnV2syZ0FK0iMA/yUGplUeMmNz4AW5fnTunbCIqZi4vG3WjJT9FHMy5D69xmAYBHXQhJdALdpwVxV501A==}
    engines: {node: '>=6'}

  is-extglob@2.1.1:
    resolution: {integrity: sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==}
    engines: {node: '>=0.10.0'}

  is-fullwidth-code-point@3.0.0:
    resolution: {integrity: sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==}
    engines: {node: '>=8'}

  is-generator-fn@2.1.0:
    resolution: {integrity: sha512-cTIB4yPYL/Grw0EaSzASzg6bBy9gqCofvWN8okThAYIxKJZC+udlRAmGbM0XLeniEJSs8uEgHPGuHSe1XsOLSQ==}
    engines: {node: '>=6'}

  is-glob@4.0.3:
    resolution: {integrity: sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==}
    engines: {node: '>=0.10.0'}

  is-module@1.0.0:
    resolution: {integrity: sha512-51ypPSPCoTEIN9dy5Oy+h4pShgJmPCygKfyRCISBI+JoWT/2oJvK8QPxmwv7b/p239jXrm9M1mlQbyKJ5A152g==}

  is-number@7.0.0:
    resolution: {integrity: sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==}
    engines: {node: '>=0.12.0'}

  is-path-inside@3.0.3:
    resolution: {integrity: sha512-Fd4gABb+ycGAmKou8eMftCupSir5lRxqf4aD/vd0cD2qc4HL07OjCeuHMr8Ro4CoMaeCKDB0/ECBOVWjTwUvPQ==}
    engines: {node: '>=8'}

  is-reference@1.2.1:
    resolution: {integrity: sha512-U82MsXXiFIrjCK4otLT+o2NA2Cd2g5MLoOVXUZjIOhLurrRxpEXzI8O0KZHr3IjLvlAH1kTPYSuqer5T9ZVBKQ==}

  is-stream@2.0.1:
    resolution: {integrity: sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg==}
    engines: {node: '>=8'}

  isexe@2.0.0:
    resolution: {integrity: sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==}

  istanbul-lib-coverage@3.2.2:
    resolution: {integrity: sha512-O8dpsF+r0WV/8MNRKfnmrtCWhuKjxrq2w+jpzBL5UZKTi2LeVWnWOmWRxFlesJONmc+wLAGvKQZEOanko0LFTg==}
    engines: {node: '>=8'}

  istanbul-lib-instrument@5.2.1:
    resolution: {integrity: sha512-pzqtp31nLv/XFOzXGuvhCb8qhjmTVo5vjVk19XE4CRlSWz0KoeJ3bw9XsA7nOp9YBf4qHjwBxkDzKcME/J29Yg==}
    engines: {node: '>=8'}

  istanbul-lib-instrument@6.0.1:
    resolution: {integrity: sha512-EAMEJBsYuyyztxMxW3g7ugGPkrZsV57v0Hmv3mm1uQsmB+QnZuepg731CRaIgeUVSdmsTngOkSnauNF8p7FIhA==}
    engines: {node: '>=10'}

  istanbul-lib-report@3.0.1:
    resolution: {integrity: sha512-GCfE1mtsHGOELCU8e/Z7YWzpmybrx/+dSTfLrvY8qRmaY6zXTKWn6WQIjaAFw069icm6GVMNkgu0NzI4iPZUNw==}
    engines: {node: '>=10'}

  istanbul-lib-source-maps@4.0.1:
    resolution: {integrity: sha512-n3s8EwkdFIJCG3BPKBYvskgXGoy88ARzvegkitk60NxRdwltLOTaH7CUiMRXvwYorl0Q712iEjcWB+fK/MrWVw==}
    engines: {node: '>=10'}

  istanbul-reports@3.1.6:
    resolution: {integrity: sha512-TLgnMkKg3iTDsQ9PbPTdpfAK2DzjF9mqUG7RMgcQl8oFjad8ob4laGxv5XV5U9MAfx8D6tSJiUyuAwzLicaxlg==}
    engines: {node: '>=8'}

  jackspeak@3.4.2:
    resolution: {integrity: sha512-qH3nOSj8q/8+Eg8LUPOq3C+6HWkpUioIjDsq1+D4zY91oZvpPttw8GwtF1nReRYKXl+1AORyFqtm2f5Q1SB6/Q==}
    engines: {node: 14 >=14.21 || 16 >=16.20 || >=18}

  jackspeak@4.0.1:
    resolution: {integrity: sha512-cub8rahkh0Q/bw1+GxP7aeSe29hHHn2V4m29nnDlvCdlgU+3UGxkZp7Z53jLUdpX3jdTO0nJZUDl3xvbWc2Xog==}
    engines: {node: 20 || >=22}

  jake@10.9.1:
    resolution: {integrity: sha512-61btcOHNnLnsOdtLgA5efqQWjnSi/vow5HbI7HMdKKWqvrKR1bLK3BPlJn9gcSaP2ewuamUSMB5XEy76KUIS2w==}
    engines: {node: '>=10'}
    hasBin: true

  jest-changed-files@29.7.0:
    resolution: {integrity: sha512-fEArFiwf1BpQ+4bXSprcDc3/x4HSzL4al2tozwVpDFpsxALjLYdyiIK4e5Vz66GQJIbXJ82+35PtysofptNX2w==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-circus@29.7.0:
    resolution: {integrity: sha512-3E1nCMgipcTkCocFwM90XXQab9bS+GMsjdpmPrlelaxwD93Ad8iVEjX/vvHPdLPnFf+L40u+5+iutRdA1N9myw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-cli@29.7.0:
    resolution: {integrity: sha512-OVVobw2IubN/GSYsxETi+gOe7Ka59EFMR/twOU3Jb2GnKKeMGJB5SGUUrEz3SFVmJASUdZUzy83sLNNQ2gZslg==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}
    hasBin: true
    peerDependencies:
      node-notifier: ^8.0.1 || ^9.0.0 || ^10.0.0
    peerDependenciesMeta:
      node-notifier:
        optional: true

  jest-config@29.7.0:
    resolution: {integrity: sha512-uXbpfeQ7R6TZBqI3/TxCU4q4ttk3u0PJeC+E0zbfSoSjq6bJ7buBPxzQPL0ifrkY4DNu4JUdk0ImlBUYi840eQ==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}
    peerDependencies:
      '@types/node': '*'
      ts-node: '>=9.0.0'
    peerDependenciesMeta:
      '@types/node':
        optional: true
      ts-node:
        optional: true

  jest-diff@29.7.0:
    resolution: {integrity: sha512-LMIgiIrhigmPrs03JHpxUh2yISK3vLFPkAodPeo0+BuF7wA2FoQbkEg1u8gBYBThncu7e1oEDUfIXVuTqLRUjw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-docblock@29.7.0:
    resolution: {integrity: sha512-q617Auw3A612guyaFgsbFeYpNP5t2aoUNLwBUbc/0kD1R4t9ixDbyFTHd1nok4epoVFpr7PmeWHrhvuV3XaJ4g==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-each@29.7.0:
    resolution: {integrity: sha512-gns+Er14+ZrEoC5fhOfYCY1LOHHr0TI+rQUHZS8Ttw2l7gl+80eHc/gFf2Ktkw0+SIACDTeWvpFcv3B04VembQ==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-environment-node@29.7.0:
    resolution: {integrity: sha512-DOSwCRqXirTOyheM+4d5YZOrWcdu0LNZ87ewUoywbcb2XR4wKgqiG8vNeYwhjFMbEkfju7wx2GYH0P2gevGvFw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-get-type@29.6.3:
    resolution: {integrity: sha512-zrteXnqYxfQh7l5FHyL38jL39di8H8rHoecLH3JNxH3BwOrBsNeabdap5e0I23lD4HHI8W5VFBZqG4Eaq5LNcw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-haste-map@29.7.0:
    resolution: {integrity: sha512-fP8u2pyfqx0K1rGn1R9pyE0/KTn+G7PxktWidOBTqFPLYX0b9ksaMFkhK5vrS3DVun09pckLdlx90QthlW7AmA==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-leak-detector@29.7.0:
    resolution: {integrity: sha512-kYA8IJcSYtST2BY9I+SMC32nDpBT3J2NvWJx8+JCuCdl/CR1I4EKUJROiP8XtCcxqgTTBGJNdbB1A8XRKbTetw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-matcher-utils@29.7.0:
    resolution: {integrity: sha512-sBkD+Xi9DtcChsI3L3u0+N0opgPYnCRPtGcQYrgXmR+hmt/fYfWAL0xRXYU8eWOdfuLgBe0YCW3AFtnRLagq/g==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-message-util@29.7.0:
    resolution: {integrity: sha512-GBEV4GRADeP+qtB2+6u61stea8mGcOT4mCtrYISZwfu9/ISHFJ/5zOMXYbpBE9RsS5+Gb63DW4FgmnKJ79Kf6w==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-mock@29.7.0:
    resolution: {integrity: sha512-ITOMZn+UkYS4ZFh83xYAOzWStloNzJFO2s8DWrE4lhtGD+AorgnbkiKERe4wQVBydIGPx059g6riW5Btp6Llnw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-pnp-resolver@1.2.3:
    resolution: {integrity: sha512-+3NpwQEnRoIBtx4fyhblQDPgJI0H1IEIkX7ShLUjPGA7TtUTvI1oiKi3SR4oBR0hQhQR80l4WAe5RrXBwWMA8w==}
    engines: {node: '>=6'}
    peerDependencies:
      jest-resolve: '*'
    peerDependenciesMeta:
      jest-resolve:
        optional: true

  jest-regex-util@29.6.3:
    resolution: {integrity: sha512-KJJBsRCyyLNWCNBOvZyRDnAIfUiRJ8v+hOBQYGn8gDyF3UegwiP4gwRR3/SDa42g1YbVycTidUF3rKjyLFDWbg==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-resolve-dependencies@29.7.0:
    resolution: {integrity: sha512-un0zD/6qxJ+S0et7WxeI3H5XSe9lTBBR7bOHCHXkKR6luG5mwDDlIzVQ0V5cZCuoTgEdcdwzTghYkTWfubi+nA==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-resolve@29.7.0:
    resolution: {integrity: sha512-IOVhZSrg+UvVAshDSDtHyFCCBUl/Q3AAJv8iZ6ZjnZ74xzvwuzLXid9IIIPgTnY62SJjfuupMKZsZQRsCvxEgA==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-runner@29.7.0:
    resolution: {integrity: sha512-fsc4N6cPCAahybGBfTRcq5wFR6fpLznMg47sY5aDpsoejOcVYFb07AHuSnR0liMcPTgBsA3ZJL6kFOjPdoNipQ==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-runtime@29.7.0:
    resolution: {integrity: sha512-gUnLjgwdGqW7B4LvOIkbKs9WGbn+QLqRQQ9juC6HndeDiezIwhDP+mhMwHWCEcfQ5RUXa6OPnFF8BJh5xegwwQ==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-snapshot@29.7.0:
    resolution: {integrity: sha512-Rm0BMWtxBcioHr1/OX5YCP8Uov4riHvKPknOGs804Zg9JGZgmIBkbtlxJC/7Z4msKYVbIJtfU+tKb8xlYNfdkw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-util@29.7.0:
    resolution: {integrity: sha512-z6EbKajIpqGKU56y5KBUgy1dt1ihhQJgWzUlZHArA/+X2ad7Cb5iF+AK1EWVL/Bo7Rz9uurpqw6SiBCefUbCGA==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-validate@29.7.0:
    resolution: {integrity: sha512-ZB7wHqaRGVw/9hST/OuFUReG7M8vKeq0/J2egIGLdvjHCmYqGARhzXmtgi+gVeZ5uXFF219aOc3Ls2yLg27tkw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-watcher@29.7.0:
    resolution: {integrity: sha512-49Fg7WXkU3Vl2h6LbLtMQ/HyB6rXSIX7SqvBLQmssRBGN9I0PNvPmAmCWSOY6SOvrjhI/F7/bGAv9RtnsPA03g==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest-worker@29.7.0:
    resolution: {integrity: sha512-eIz2msL/EzL9UFTFFx7jBTkeZfku0yUAyZZZmJ93H2TYEiroIx2PQjEXcwYtYl8zXCxb+PAmA2hLIt/6ZEkPHw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  jest@29.7.0:
    resolution: {integrity: sha512-NIy3oAFp9shda19hy4HK0HRTWKtPJmGdnvywu01nOqNC2vZg+Z+fvJDxpMQA88eb2I9EcafcdjYgsDthnYTvGw==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}
    hasBin: true
    peerDependencies:
      node-notifier: ^8.0.1 || ^9.0.0 || ^10.0.0
    peerDependenciesMeta:
      node-notifier:
        optional: true

  js-tokens@4.0.0:
    resolution: {integrity: sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==}

  js-yaml@3.14.1:
    resolution: {integrity: sha512-okMH7OXXJ7YrN9Ok3/SXrnu4iX9yOk+25nqX4imS2npuvTYDmo/QEZoqwZkYaIDk3jVvBOTOIEgEhaLOynBS9g==}
    hasBin: true

  js-yaml@4.1.0:
    resolution: {integrity: sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==}
    hasBin: true

  jsesc@2.5.2:
    resolution: {integrity: sha512-OYu7XEzjkCQ3C5Ps3QIZsQfNpqoJyZZA99wd9aWd05NCtC5pWOkShK2mkL6HXQR6/Cy2lbNdPlZBpuQHXE63gA==}
    engines: {node: '>=4'}
    hasBin: true

  json-buffer@3.0.1:
    resolution: {integrity: sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==}

  json-parse-even-better-errors@2.3.1:
    resolution: {integrity: sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w==}

  json-schema-traverse@0.4.1:
    resolution: {integrity: sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==}

  json-stable-stringify-without-jsonify@1.0.1:
    resolution: {integrity: sha512-Bdboy+l7tA3OGW6FjyFHWkP5LuByj1Tk33Ljyq0axyzdk9//JSi2u3fP1QSmd1KNwq6VOKYGlAu87CisVir6Pw==}

  json5@2.2.3:
    resolution: {integrity: sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==}
    engines: {node: '>=6'}
    hasBin: true

  keyv@4.5.4:
    resolution: {integrity: sha512-oxVHkHR/EJf2CNXnWxRLW6mg7JyCCUcG0DtEGmL2ctUo1PNTin1PUil+r/+4r5MpVgC/fn1kjsx7mjSujKqIpw==}

  kleur@3.0.3:
    resolution: {integrity: sha512-eTIzlVOSUR+JxdDFepEYcBMtZ9Qqdef+rnzWdRZuMbOywu5tO2w2N7rqjoANZ5k9vywhL6Br1VRjUIgTQx4E8w==}
    engines: {node: '>=6'}

  leven@3.1.0:
    resolution: {integrity: sha512-qsda+H8jTaUaN/x5vzW2rzc+8Rw4TAQ/4KjB46IwK5VH+IlVeeeje/EoZRpiXvIqjFgK84QffqPztGI3VBLG1A==}
    engines: {node: '>=6'}

  levn@0.4.1:
    resolution: {integrity: sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==}
    engines: {node: '>= 0.8.0'}

  lines-and-columns@1.2.4:
    resolution: {integrity: sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==}

  linkify-it@5.0.0:
    resolution: {integrity: sha512-5aHCbzQRADcdP+ATqnDuhhJ/MRIqDkZX5pyjFHRRysS8vZ5AbqGEoFIb6pYHPZ+L/OC2Lc+xT8uHVVR5CAK/wQ==}

  locate-path@5.0.0:
    resolution: {integrity: sha512-t7hw9pI+WvuwNJXwk5zVHpyhIqzg2qTlklJOf0mVxGSbe3Fp2VieZcduNYjaLDoy6p9uGpQEGWG87WpMKlNq8g==}
    engines: {node: '>=8'}

  locate-path@6.0.0:
    resolution: {integrity: sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==}
    engines: {node: '>=10'}

  lodash.memoize@4.1.2:
    resolution: {integrity: sha512-t7j+NzmgnQzTAYXcsHYLgimltOV1MXHtlOWf6GjL9Kj8GK5FInw5JotxvbOs+IvV1/Dzo04/fCGfLVs7aXb4Ag==}

  lodash.merge@4.6.2:
    resolution: {integrity: sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==}

  lru-cache@10.4.3:
    resolution: {integrity: sha512-JNAzZcXrCt42VGLuYz0zfAzDfAvJWW6AfYlDBQyDV5DClI2m5sAmK+OIO7s59XfsRsWHp02jAJrRadPRGTt6SQ==}

  lru-cache@11.0.0:
    resolution: {integrity: sha512-Qv32eSV1RSCfhY3fpPE2GNZ8jgM9X7rdAfemLWqTUxwiyIC4jJ6Sy0fZ8H+oLWevO6i4/bizg7c8d8i6bxrzbA==}
    engines: {node: 20 || >=22}

  lru-cache@5.1.1:
    resolution: {integrity: sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==}

  lru-cache@6.0.0:
    resolution: {integrity: sha512-Jo6dJ04CmSjuznwJSS3pUeWmd/H0ffTlkXXgwZi+eq1UCmqQwCh+eLsYOYCwY991i2Fah4h1BEMCx4qThGbsiA==}
    engines: {node: '>=10'}

  lunr@2.3.9:
    resolution: {integrity: sha512-zTU3DaZaF3Rt9rhN3uBMGQD3dD2/vFQqnvZCDv4dl5iOzq2IZQqTxu90r4E5J+nP70J3ilqVCrbho2eWaeW8Ow==}

  magic-string@0.30.10:
    resolution: {integrity: sha512-iIRwTIf0QKV3UAnYK4PU8uiEc4SRh5jX0mwpIwETPpHdhVM4f53RSwS/vXvN1JhGX+Cs7B8qIq3d6AH49O5fAQ==}

  magic-string@0.30.5:
    resolution: {integrity: sha512-7xlpfBaQaP/T6Vh8MO/EqXSW5En6INHEvEXQiuff7Gku0PWjU3uf6w/j9o7O+SpB5fOAkrI5HeoNgwjEO0pFsA==}
    engines: {node: '>=12'}

  make-dir@4.0.0:
    resolution: {integrity: sha512-hXdUTZYIVOt1Ex//jAQi+wTZZpUpwBj/0QsOzqegb3rGMMeJiSEu5xLHnYfBrRV4RH2+OCSOO95Is/7x1WJ4bw==}
    engines: {node: '>=10'}

  make-error@1.3.6:
    resolution: {integrity: sha512-s8UhlNe7vPKomQhC1qFelMokr/Sc3AgNbso3n74mVPA5LTZwkB9NlXf4XPamLxJE8h0gh73rM94xvwRT2CVInw==}

  makeerror@1.0.12:
    resolution: {integrity: sha512-JmqCvUhmt43madlpFzG4BQzG2Z3m6tvQDNKdClZnO3VbIudJYmxsT0FNJMeiB2+JTSlTQTSbU8QdesVmwJcmLg==}

  markdown-it@14.1.0:
    resolution: {integrity: sha512-a54IwgWPaeBCAAsv13YgmALOF1elABB08FxO9i+r4VFk5Vl4pKokRPeX8u5TCgSsPi6ec1otfLjdOpVcgbpshg==}
    hasBin: true

  mdurl@2.0.0:
    resolution: {integrity: sha512-Lf+9+2r+Tdp5wXDXC4PcIBjTDtq4UKjCPMQhKIuzpJNW0b96kVqSwW0bT7FhRSfmAiFYgP+SCRvdrDozfh0U5w==}

  merge-stream@2.0.0:
    resolution: {integrity: sha512-abv/qOcuPfk3URPfDzmZU1LKmuw8kT+0nIHvKrKgFrwifol/doWcdA4ZqsWQ8ENrFKkd67Mfpo/LovbIUsbt3w==}

  merge2@1.4.1:
    resolution: {integrity: sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==}
    engines: {node: '>= 8'}

  micromatch@4.0.8:
    resolution: {integrity: sha512-PXwfBhYu0hBCPw8Dn0E+WDYb7af3dSLVWKi3HGv84IdF4TyFoC0ysxFd0Goxw7nSv4T/PzEJQxsYsEiFCKo2BA==}
    engines: {node: '>=8.6'}

  mimic-fn@2.1.0:
    resolution: {integrity: sha512-OqbOk5oEQeAZ8WXWydlu9HJjz9WVdEIvamMCcXmuqUYjTknH/sqsWvhQ3vgwKFRR1HpjvNBKQ37nbJgYzGqGcg==}
    engines: {node: '>=6'}

  minimatch@10.0.1:
    resolution: {integrity: sha512-ethXTt3SGGR+95gudmqJ1eNhRO7eGEGIgYA9vnPatK4/etz2MEVDno5GMCibdMTuBMyElzIlgxMna3K94XDIDQ==}
    engines: {node: 20 || >=22}

  minimatch@3.1.2:
    resolution: {integrity: sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==}

  minimatch@5.1.6:
    resolution: {integrity: sha512-lKwV/1brpG6mBUFHtb7NUmtABCb2WZZmm2wNiOA5hAb8VdCS4B3dtMWyvcoViccwAW/COERjXLt0zP1zXUN26g==}
    engines: {node: '>=10'}

  minimatch@9.0.5:
    resolution: {integrity: sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow==}
    engines: {node: '>=16 || 14 >=14.17'}

  minipass@7.1.2:
    resolution: {integrity: sha512-qOOzS1cBTWYF4BH8fVePDBOO9iptMnGUEZwNc/cMWnTV2nVLZ7VoNWEPHkYczZA0pdoA7dl6e7FL659nX9S2aw==}
    engines: {node: '>=16 || 14 >=14.17'}

  ms@2.1.2:
    resolution: {integrity: sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==}

  natural-compare@1.4.0:
    resolution: {integrity: sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==}

  node-int64@0.4.0:
    resolution: {integrity: sha512-O5lz91xSOeoXP6DulyHfllpq+Eg00MWitZIbtPfoSEvqIHdl5gfcY6hYzDWnj0qD5tz52PI08u9qUvSVeUBeHw==}

  node-releases@2.0.14:
    resolution: {integrity: sha512-y10wOWt8yZpqXmOgRo77WaHEmhYQYGNA6y421PKsKYWEK8aW+cqAphborZDhqfyKrbZEN92CN1X2KbafY2s7Yw==}

  normalize-path@3.0.0:
    resolution: {integrity: sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==}
    engines: {node: '>=0.10.0'}

  npm-run-path@4.0.1:
    resolution: {integrity: sha512-S48WzZW777zhNIrn7gxOlISNAqi9ZC/uQFnRdbeIHhZhCA6UqpkOT8T1G7BvfdgP4Er8gF4sUbaS0i7QvIfCWw==}
    engines: {node: '>=8'}

  once@1.4.0:
    resolution: {integrity: sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==}

  onetime@5.1.2:
    resolution: {integrity: sha512-kbpaSSGJTWdAY5KPVeMOKXSrPtr8C8C7wodJbcsd51jRnmD+GZu8Y0VoU6Dm5Z4vWr0Ig/1NKuWRKf7j5aaYSg==}
    engines: {node: '>=6'}

  optionator@0.9.3:
    resolution: {integrity: sha512-JjCoypp+jKn1ttEFExxhetCKeJt9zhAgAve5FXHixTvFDW/5aEktX9bufBKLRRMdU7bNtpLfcGu94B3cdEJgjg==}
    engines: {node: '>= 0.8.0'}

  p-limit@2.3.0:
    resolution: {integrity: sha512-//88mFWSJx8lxCzwdAABTJL2MyWB12+eIY7MDL2SqLmAkeKU9qxRvWuSyTjm3FUmpBEMuFfckAIqEaVGUDxb6w==}
    engines: {node: '>=6'}

  p-limit@3.1.0:
    resolution: {integrity: sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==}
    engines: {node: '>=10'}

  p-locate@4.1.0:
    resolution: {integrity: sha512-R79ZZ/0wAxKGu3oYMlz8jy/kbhsNrS7SKZ7PxEHBgJ5+F2mtFW2fK2cOtBh1cHYkQsbzFV7I+EoRKe6Yt0oK7A==}
    engines: {node: '>=8'}

  p-locate@5.0.0:
    resolution: {integrity: sha512-LaNjtRWUBY++zB5nE/NwcaoMylSPk+S+ZHNB1TzdbMJMny6dynpAGt7X/tl/QYq3TIeE6nxHppbo2LGymrG5Pw==}
    engines: {node: '>=10'}

  p-try@2.2.0:
    resolution: {integrity: sha512-R4nPAVTAU0B9D35/Gk3uJf/7XYbQcyohSKdvAxIRSNghFl4e71hVoGnBNQz9cWaXxO2I10KTC+3jMdvvoKw6dQ==}
    engines: {node: '>=6'}

  package-json-from-dist@1.0.0:
    resolution: {integrity: sha512-dATvCeZN/8wQsGywez1mzHtTlP22H8OEfPrVMLNr4/eGa+ijtLn/6M5f0dY8UKNrC2O9UCU6SSoG3qRKnt7STw==}

  parent-module@1.0.1:
    resolution: {integrity: sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==}
    engines: {node: '>=6'}

  parse-json@5.2.0:
    resolution: {integrity: sha512-ayCKvm/phCGxOkYRSCM82iDwct8/EonSEgCSxWxD7ve6jHggsFl4fZVQBPRNgQoKiuV/odhFrGzQXZwbifC8Rg==}
    engines: {node: '>=8'}

  path-exists@4.0.0:
    resolution: {integrity: sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==}
    engines: {node: '>=8'}

  path-is-absolute@1.0.1:
    resolution: {integrity: sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg==}
    engines: {node: '>=0.10.0'}

  path-key@3.1.1:
    resolution: {integrity: sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==}
    engines: {node: '>=8'}

  path-parse@1.0.7:
    resolution: {integrity: sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==}

  path-scurry@1.11.1:
    resolution: {integrity: sha512-Xa4Nw17FS9ApQFJ9umLiJS4orGjm7ZzwUrwamcGQuHSzDyth9boKDaycYdDcZDuqYATXw4HFXgaqWTctW/v1HA==}
    engines: {node: '>=16 || 14 >=14.18'}

  path-scurry@2.0.0:
    resolution: {integrity: sha512-ypGJsmGtdXUOeM5u93TyeIEfEhM6s+ljAhrk5vAvSx8uyY/02OvrZnA0YNGUrPXfpJMgI1ODd3nwz8Npx4O4cg==}
    engines: {node: 20 || >=22}

  path-type@4.0.0:
    resolution: {integrity: sha512-gDKb8aZMDeD/tZWs9P6+q0J9Mwkdl6xMV8TjnGP3qJVJ06bdMgkbBlLU8IdfOsIsFz2BW1rNVT3XuNEl8zPAvw==}
    engines: {node: '>=8'}

  picocolors@1.0.0:
    resolution: {integrity: sha512-1fygroTLlHu66zi26VoTDv8yRgm0Fccecssto+MhsZ0D/DGW2sm8E8AjW7NU5VVTRt5GxbeZ5qBuJr+HyLYkjQ==}

  picomatch@2.3.1:
    resolution: {integrity: sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==}
    engines: {node: '>=8.6'}

  pirates@4.0.6:
    resolution: {integrity: sha512-saLsH7WeYYPiD25LDuLRRY/i+6HaPYr6G1OUlN39otzkSTxKnubR9RTxS3/Kk50s1g2JTgFwWQDQyplC5/SHZg==}
    engines: {node: '>= 6'}

  pkg-dir@4.2.0:
    resolution: {integrity: sha512-HRDzbaKjC+AOWVXxAU/x54COGeIv9eb+6CkDSQoNTt4XyWoIJvuPsXizxu/Fr23EiekbtZwmh1IcIG/l/a10GQ==}
    engines: {node: '>=8'}

  prelude-ls@1.2.1:
    resolution: {integrity: sha512-vkcDPrRZo1QZLbn5RLGPpg/WmIQ65qoWWhcGKf/b5eplkkarX0m9z8ppCat4mlOqUsWpyNuYgO3VRyrYHSzX5g==}
    engines: {node: '>= 0.8.0'}

  prettier@3.3.2:
    resolution: {integrity: sha512-rAVeHYMcv8ATV5d508CFdn+8/pHPpXeIid1DdrPwXnaAdH7cqjVbpJaT5eq4yRAFU/lsbwYwSF/n5iNrdJHPQA==}
    engines: {node: '>=14'}
    hasBin: true

  pretty-format@29.7.0:
    resolution: {integrity: sha512-Pdlw/oPxN+aXdmM9R00JVC9WVFoCLTKJvDVLgmJ+qAffBMxsV85l/Lu7sNx4zSzPyoL2euImuEwHhOXdEgNFZQ==}
    engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}

  prompts@2.4.2:
    resolution: {integrity: sha512-NxNv/kLguCA7p3jE8oL2aEBsrJWgAakBpgmgK6lpPWV+WuOmY6r2/zbAVnP+T8bQlA0nzHXSJSJW0Hq7ylaD2Q==}
    engines: {node: '>= 6'}

  punycode.js@2.3.1:
    resolution: {integrity: sha512-uxFIHU0YlHYhDQtV4R9J6a52SLx28BCjT+4ieh7IGbgwVJWO+km431c4yRlREUAsAmt/uMjQUyQHNEPf0M39CA==}
    engines: {node: '>=6'}

  punycode@2.3.1:
    resolution: {integrity: sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==}
    engines: {node: '>=6'}

  pure-rand@6.0.4:
    resolution: {integrity: sha512-LA0Y9kxMYv47GIPJy6MI84fqTd2HmYZI83W/kM/SkKfDlajnZYfmXFTxkbY+xSBPkLJxltMa9hIkmdc29eguMA==}

  queue-microtask@1.2.3:
    resolution: {integrity: sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==}

  react-is@18.2.0:
    resolution: {integrity: sha512-xWGDIW6x921xtzPkhiULtthJHoJvBbF3q26fzloPCK0hsvxtPVelvftw3zjbHWSkR2km9Z+4uxbDDK/6Zw9B8w==}

  require-directory@2.1.1:
    resolution: {integrity: sha512-fGxEI7+wsG9xrvdjsrlmL22OMTTiHRwAMroiEeMgq8gzoLC/PQr7RsRDSTLUg/bZAZtF+TVIkHc6/4RIKrui+Q==}
    engines: {node: '>=0.10.0'}

  resolve-cwd@3.0.0:
    resolution: {integrity: sha512-OrZaX2Mb+rJCpH/6CpSqt9xFVpN++x01XnN2ie9g6P5/3xelLAkXWVADpdz1IHD/KFfEXyE6V0U01OQ3UO2rEg==}
    engines: {node: '>=8'}

  resolve-from@4.0.0:
    resolution: {integrity: sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==}
    engines: {node: '>=4'}

  resolve-from@5.0.0:
    resolution: {integrity: sha512-qYg9KP24dD5qka9J47d0aVky0N+b4fTU89LN9iDnjB5waksiC49rvMB0PrUJQGoTmH50XPiqOvAjDfaijGxYZw==}
    engines: {node: '>=8'}

  resolve-pkg-maps@1.0.0:
    resolution: {integrity: sha512-seS2Tj26TBVOC2NIc2rOe2y2ZO7efxITtLZcGSOnHHNOQ7CkiUBfw0Iw2ck6xkIhPwLhKNLS8BO+hEpngQlqzw==}

  resolve.exports@2.0.2:
    resolution: {integrity: sha512-X2UW6Nw3n/aMgDVy+0rSqgHlv39WZAlZrXCdnbyEiKm17DSqHX4MmQMaST3FbeWR5FTuRcUwYAziZajji0Y7mg==}
    engines: {node: '>=10'}

  resolve@1.22.8:
    resolution: {integrity: sha512-oKWePCxqpd6FlLvGV1VU0x7bkPmmCNolxzjMf4NczoDnQcIWrAF+cPtZn5i6n+RfD2d9i0tzpKnG6Yk168yIyw==}
    hasBin: true

  reusify@1.0.4:
    resolution: {integrity: sha512-U9nH88a3fc/ekCF1l0/UP1IosiuIjyTh7hBvXVMHYgVcfGvt897Xguj2UOLDeI5BG2m7/uwyaLVT6fbtCwTyzw==}
    engines: {iojs: '>=1.0.0', node: '>=0.10.0'}

  rimraf@6.0.0:
    resolution: {integrity: sha512-u+yqhM92LW+89cxUQK0SRyvXYQmyuKHx0jkx4W7KfwLGLqJnQM5031Uv1trE4gB9XEXBM/s6MxKlfW95IidqaA==}
    engines: {node: 20 || >=22}
    hasBin: true

  rollup-plugin-dts@6.1.1:
    resolution: {integrity: sha512-aSHRcJ6KG2IHIioYlvAOcEq6U99sVtqDDKVhnwt70rW6tsz3tv5OSjEiWcgzfsHdLyGXZ/3b/7b/+Za3Y6r1XA==}
    engines: {node: '>=16'}
    peerDependencies:
      rollup: ^3.29.4 || ^4
      typescript: ^4.5 || ^5.0

  rollup-plugin-esbuild@6.1.1:
    resolution: {integrity: sha512-CehMY9FAqJD5OUaE/Mi1r5z0kNeYxItmRO2zG4Qnv2qWKF09J2lTy5GUzjJR354ZPrLkCj4fiBN41lo8PzBUhw==}
    engines: {node: '>=14.18.0'}
    peerDependencies:
      esbuild: '>=0.18.0'
      rollup: ^1.20.0 || ^2.0.0 || ^3.0.0 || ^4.0.0

  rollup@4.22.4:
    resolution: {integrity: sha512-vD8HJ5raRcWOyymsR6Z3o6+RzfEPCnVLMFJ6vRslO1jt4LO6dUo5Qnpg7y4RkZFM2DMe3WUirkI5c16onjrc6A==}
    engines: {node: '>=18.0.0', npm: '>=8.0.0'}
    hasBin: true

  run-parallel@1.2.0:
    resolution: {integrity: sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==}

  semver@6.3.1:
    resolution: {integrity: sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==}
    hasBin: true

  semver@7.5.4:
    resolution: {integrity: sha512-1bCSESV6Pv+i21Hvpxp3Dx+pSD8lIPt8uVjRrxAUt/nbswYc+tK6Y2btiULjd4+fnq15PX+nqQDC7Oft7WkwcA==}
    engines: {node: '>=10'}
    hasBin: true

  semver@7.6.2:
    resolution: {integrity: sha512-FNAIBWCx9qcRhoHcgcJ0gvU7SN1lYU2ZXuSfl04bSC5OpvDHFyJCjdNHomPXxjQlCBU67YW64PzY7/VIEH7F2w==}
    engines: {node: '>=10'}
    hasBin: true

  shebang-command@2.0.0:
    resolution: {integrity: sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==}
    engines: {node: '>=8'}

  shebang-regex@3.0.0:
    resolution: {integrity: sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==}
    engines: {node: '>=8'}

  shiki@1.10.3:
    resolution: {integrity: sha512-eneCLncGuvPdTutJuLyUGS8QNPAVFO5Trvld2wgEq1e002mwctAhJKeMGWtWVXOIEzmlcLRqcgPSorR6AVzOmQ==}

  signal-exit@3.0.7:
    resolution: {integrity: sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ==}

  signal-exit@4.1.0:
    resolution: {integrity: sha512-bzyZ1e88w9O1iNJbKnOlvYTrWPDl46O1bG0D3XInv+9tkPrxrN8jUUTiFlDkkmKWgn1M6CfIA13SuGqOa9Korw==}
    engines: {node: '>=14'}

  sisteransi@1.0.5:
    resolution: {integrity: sha512-bLGGlR1QxBcynn2d5YmDX4MGjlZvy2MRBDRNHLJ8VI6l6+9FUiyTFNJ0IveOSP0bcXgVDPRcfGqA0pjaqUpfVg==}

  slash@3.0.0:
    resolution: {integrity: sha512-g9Q1haeby36OSStwb4ntCGGGaKsaVSjQ68fBxoQcutl5fS1vuY18H3wSt3jFyFtrkx+Kz0V1G85A4MyAdDMi2Q==}
    engines: {node: '>=8'}

  source-map-support@0.5.13:
    resolution: {integrity: sha512-SHSKFHadjVA5oR4PPqhtAVdcBWwRYVd6g6cAXnIbRiIwc2EhPrTuKUBdSLvlEKyIP3GCf89fltvcZiP9MMFA1w==}

  source-map@0.6.1:
    resolution: {integrity: sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==}
    engines: {node: '>=0.10.0'}

  sprintf-js@1.0.3:
    resolution: {integrity: sha512-D9cPgkvLlV3t3IzL0D0YLvGA9Ahk4PcvVwUbN0dSGr1aP0Nrt4AEnTUbuGvquEC0mA64Gqt1fzirlRs5ibXx8g==}

  stack-utils@2.0.6:
    resolution: {integrity: sha512-XlkWvfIm6RmsWtNJx+uqtKLS8eqFbxUg0ZzLXqY0caEy9l7hruX8IpiDnjsLavoBgqCCR71TqWO8MaXYheJ3RQ==}
    engines: {node: '>=10'}

  string-length@4.0.2:
    resolution: {integrity: sha512-+l6rNN5fYHNhZZy41RXsYptCjA2Igmq4EG7kZAYFQI1E1VTXarr6ZPXBg6eq7Y6eK4FEhY6AJlyuFIb/v/S0VQ==}
    engines: {node: '>=10'}

  string-width@4.2.3:
    resolution: {integrity: sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==}
    engines: {node: '>=8'}

  string-width@5.1.2:
    resolution: {integrity: sha512-HnLOCR3vjcY8beoNLtcjZ5/nxn2afmME6lhrDrebokqMap+XbeW8n9TXpPDOqdGK5qcI3oT0GKTW6wC7EMiVqA==}
    engines: {node: '>=12'}

  strip-ansi@6.0.1:
    resolution: {integrity: sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==}
    engines: {node: '>=8'}

  strip-ansi@7.1.0:
    resolution: {integrity: sha512-iq6eVVI64nQQTRYq2KtEg2d2uU7LElhTJwsH4YzIHZshxlgZms/wIc4VoDQTlG/IvVIrBKG06CrZnp0qv7hkcQ==}
    engines: {node: '>=12'}

  strip-bom@4.0.0:
    resolution: {integrity: sha512-3xurFv5tEgii33Zi8Jtp55wEIILR9eh34FAW00PZf+JnSsTmV/ioewSgQl97JHvgjoRGwPShsWm+IdrxB35d0w==}
    engines: {node: '>=8'}

  strip-final-newline@2.0.0:
    resolution: {integrity: sha512-BrpvfNAE3dcvq7ll3xVumzjKjZQ5tI1sEUIKr3Uoks0XUl45St3FlatVqef9prk4jRDzhW6WZg+3bk93y6pLjA==}
    engines: {node: '>=6'}

  strip-json-comments@3.1.1:
    resolution: {integrity: sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==}
    engines: {node: '>=8'}

  supports-color@5.5.0:
    resolution: {integrity: sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==}
    engines: {node: '>=4'}

  supports-color@7.2.0:
    resolution: {integrity: sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==}
    engines: {node: '>=8'}

  supports-color@8.1.1:
    resolution: {integrity: sha512-MpUEN2OodtUzxvKQl72cUF7RQ5EiHsGvSsVG0ia9c5RbWGL2CI4C7EpPS8UTBIplnlzZiNuV56w+FuNxy3ty2Q==}
    engines: {node: '>=10'}

  supports-preserve-symlinks-flag@1.0.0:
    resolution: {integrity: sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==}
    engines: {node: '>= 0.4'}

  test-exclude@6.0.0:
    resolution: {integrity: sha512-cAGWPIyOHU6zlmg88jwm7VRyXnMN7iV68OGAbYDk/Mh/xC/pzVPlQtY6ngoIH/5/tciuhGfvESU8GrHrcxD56w==}
    engines: {node: '>=8'}

  text-table@0.2.0:
    resolution: {integrity: sha512-N+8UisAXDGk8PFXP4HAzVR9nbfmVJ3zYLAWiTIoqC5v5isinhr+r5uaO8+7r3BMfuNIufIsA7RdpVgacC2cSpw==}

  tmpl@1.0.5:
    resolution: {integrity: sha512-3f0uOEAQwIqGuWW2MVzYg8fV/QNnc/IpuJNG837rLuczAaLVHslWHZQj4IGiEl5Hs3kkbhwL9Ab7Hrsmuj+Smw==}

  to-fast-properties@2.0.0:
    resolution: {integrity: sha512-/OaKK0xYrs3DmxRYqL/yDc+FxFUVYhDlXMhRmv3z915w2HF1tnN1omB354j8VUGO/hbRzyD6Y3sA7v7GS/ceog==}
    engines: {node: '>=4'}

  to-regex-range@5.0.1:
    resolution: {integrity: sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==}
    engines: {node: '>=8.0'}

  ts-api-utils@1.3.0:
    resolution: {integrity: sha512-UQMIo7pb8WRomKR1/+MFVLTroIvDVtMX3K6OUir8ynLyzB8Jeriont2bTAtmNPa1ekAgN7YPDyf6V+ygrdU+eQ==}
    engines: {node: '>=16'}
    peerDependencies:
      typescript: '>=4.2.0'

  ts-jest@29.2.1:
    resolution: {integrity: sha512-7obwtH5gw0b0XZi0wmprCSvGSvHliMBI47lPnU47vmbxWS6B+v1X94yWFo1f1vt9k/he+gttsrXjkxmgY41XNQ==}
    engines: {node: ^14.15.0 || ^16.10.0 || ^18.0.0 || >=20.0.0}
    hasBin: true
    peerDependencies:
      '@babel/core': '>=7.0.0-beta.0 <8'
      '@jest/transform': ^29.0.0
      '@jest/types': ^29.0.0
      babel-jest: ^29.0.0
      esbuild: '*'
      jest: ^29.0.0
      typescript: '>=4.3 <6'
    peerDependenciesMeta:
      '@babel/core':
        optional: true
      '@jest/transform':
        optional: true
      '@jest/types':
        optional: true
      babel-jest:
        optional: true
      esbuild:
        optional: true

  tslib@2.6.3:
    resolution: {integrity: sha512-xNvxJEOUiWPGhUuUdQgAJPKOOJfGnIyKySOc09XkKsgdUV/3E2zvwZYdejjmRgPCgcym1juLH3226yA7sEFJKQ==}

  type-check@0.4.0:
    resolution: {integrity: sha512-XleUoc9uwGXqjWwXaUTZAmzMcFZ5858QA2vvx1Ur5xIcixXIP+8LnFDgRplU30us6teqdlskFfu+ae4K79Ooew==}
    engines: {node: '>= 0.8.0'}

  type-detect@4.0.8:
    resolution: {integrity: sha512-0fr/mIH1dlO+x7TlcMy+bIDqKPsw/70tVyeHW787goQjhmqaZe10uwLujubK9q9Lg6Fiho1KUKDYz0Z7k7g5/g==}
    engines: {node: '>=4'}

  type-fest@0.21.3:
    resolution: {integrity: sha512-t0rzBq87m3fVcduHDUFhKmyyX+9eo6WQjZvf51Ea/M0Q7+T374Jp1aUiyUl0GKxp8M/OETVHSDvmkyPgvX+X2w==}
    engines: {node: '>=10'}

  typedoc-plugin-extras@3.1.0:
    resolution: {integrity: sha512-8tNeq2fgl2HCUZ6eZuAoLLKEvB/WrRS4He9MtTfo3X3Pa8Iw3TS5D0g8krDhUXUk1uHpXVAVHm8rSOMS2mdJRw==}
    peerDependencies:
      typedoc: 0.26.x

  typedoc-plugin-katex@0.1.2:
    resolution: {integrity: sha512-2TsaDyvQVYq1yEa7v7MPz4GEM1iWlu4QWeEtcx3B1FyLdHRDoAf0aEW2zo7By8aOyrI1yWA4hnAZKYg1iW/HHA==}

  typedoc@0.26.4:
    resolution: {integrity: sha512-FlW6HpvULDKgc3rK04V+nbFyXogPV88hurarDPOjuuB5HAwuAlrCMQ5NeH7Zt68a/ikOKu6Z/0hFXAeC9xPccQ==}
    engines: {node: '>= 18'}
    hasBin: true
    peerDependencies:
      typescript: 4.6.x || 4.7.x || 4.8.x || 4.9.x || 5.0.x || 5.1.x || 5.2.x || 5.3.x || 5.4.x || 5.5.x

  typescript@5.5.3:
    resolution: {integrity: sha512-/hreyEujaB0w76zKo6717l3L0o/qEUtRgdvUBvlkhoWeOVMjMuHNHk0BRBzikzuGDqNmPQbg5ifMEqsHLiIUcQ==}
    engines: {node: '>=14.17'}
    hasBin: true

  uc.micro@2.1.0:
    resolution: {integrity: sha512-ARDJmphmdvUk6Glw7y9DQ2bFkKBHwQHLi2lsaH6PPmz/Ka9sFOBsBluozhDltWmnv9u/cF6Rt87znRTPV+yp/A==}

  undici-types@5.26.5:
    resolution: {integrity: sha512-JlCMO+ehdEIKqlFxk6IfVoAUVmgz7cU7zD/h9XZ0qzeosSHmUJVOzSQvvYSYWXkFXC+IfLKSIffhv0sVZup6pA==}

  update-browserslist-db@1.0.13:
    resolution: {integrity: sha512-xebP81SNcPuNpPP3uzeW1NYXxI3rxyJzF3pD6sH4jE7o/IX+WtSpwnVU+qIsDPyk0d3hmFQ7mjqc6AtV604hbg==}
    hasBin: true
    peerDependencies:
      browserslist: '>= 4.21.0'

  uri-js@4.4.1:
    resolution: {integrity: sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==}

  v8-to-istanbul@9.2.0:
    resolution: {integrity: sha512-/EH/sDgxU2eGxajKdwLCDmQ4FWq+kpi3uCmBGpw1xJtnAxEjlD8j8PEiGWpCIMIs3ciNAgH0d3TTJiUkYzyZjA==}
    engines: {node: '>=10.12.0'}

  walker@1.0.8:
    resolution: {integrity: sha512-ts/8E8l5b7kY0vlWLewOkDXMmPdLcVV4GmOQLyxuSswIJsweeFZtAsMF7k1Nszz+TYBQrlYRmzOnr398y1JemQ==}

  which@2.0.2:
    resolution: {integrity: sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==}
    engines: {node: '>= 8'}
    hasBin: true

  wrap-ansi@7.0.0:
    resolution: {integrity: sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==}
    engines: {node: '>=10'}

  wrap-ansi@8.1.0:
    resolution: {integrity: sha512-si7QWI6zUMq56bESFvagtmzMdGOtoxfR+Sez11Mobfc7tm+VkUckk9bW2UeffTGVUbOksxmSw0AA2gs8g71NCQ==}
    engines: {node: '>=12'}

  wrappy@1.0.2:
    resolution: {integrity: sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==}

  write-file-atomic@4.0.2:
    resolution: {integrity: sha512-7KxauUdBmSdWnmpaGFg+ppNjKF8uNLry8LyzjauQDOVONfFLNKrKvQOxZ/VuTIcS/gge/YNahf5RIIQWTSarlg==}
    engines: {node: ^12.13.0 || ^14.15.0 || >=16.0.0}

  y18n@5.0.8:
    resolution: {integrity: sha512-0pfFzegeDWJHJIAmTLRP2DwHjdF5s7jo9tuztdQxAhINCdvS+3nGINqPd00AphqJR/0LhANUS6/+7SCb98YOfA==}
    engines: {node: '>=10'}

  yallist@3.1.1:
    resolution: {integrity: sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==}

  yallist@4.0.0:
    resolution: {integrity: sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A==}

  yaml@2.4.5:
    resolution: {integrity: sha512-aBx2bnqDzVOyNKfsysjA2ms5ZlnjSAW2eG3/L5G/CSujfjLJTJsEw1bGw8kCf04KodQWk1pxlGnZ56CRxiawmg==}
    engines: {node: '>= 14'}
    hasBin: true

  yargs-parser@21.1.1:
    resolution: {integrity: sha512-tVpsJW7DdjecAiFpbIB1e3qxIQsE6NoPc5/eTdrbbIC4h0LVsWhnoa3g+m2HclBIujHzsxZ4VJVA+GUuc2/LBw==}
    engines: {node: '>=12'}

  yargs@17.7.2:
    resolution: {integrity: sha512-7dSzzRQ++CKnNI/krKnYRV7JKKPUXMEh61soaHKg9mrWEhzFWhFnxPxGl+69cD1Ou63C13NUPCnmIcrvqCuM6w==}
    engines: {node: '>=12'}

  yocto-queue@0.1.0:
    resolution: {integrity: sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==}
    engines: {node: '>=10'}

snapshots:

  '@aashutoshrathi/word-wrap@1.2.6': {}

  '@ampproject/remapping@2.2.1':
    dependencies:
      '@jridgewell/gen-mapping': 0.3.3
      '@jridgewell/trace-mapping': 0.3.20

  '@babel/code-frame@7.23.5':
    dependencies:
      '@babel/highlight': 7.23.4
      chalk: 2.4.2

  '@babel/code-frame@7.24.7':
    dependencies:
      '@babel/highlight': 7.24.7
      picocolors: 1.0.0
    optional: true

  '@babel/compat-data@7.23.5': {}

  '@babel/core@7.23.6':
    dependencies:
      '@ampproject/remapping': 2.2.1
      '@babel/code-frame': 7.23.5
      '@babel/generator': 7.23.6
      '@babel/helper-compilation-targets': 7.23.6
      '@babel/helper-module-transforms': 7.23.3(@babel/core@7.23.6)
      '@babel/helpers': 7.23.6
      '@babel/parser': 7.23.6
      '@babel/template': 7.22.15
      '@babel/traverse': 7.23.6
      '@babel/types': 7.23.6
      convert-source-map: 2.0.0
      debug: 4.3.4
      gensync: 1.0.0-beta.2
      json5: 2.2.3
      semver: 6.3.1
    transitivePeerDependencies:
      - supports-color

  '@babel/generator@7.23.6':
    dependencies:
      '@babel/types': 7.23.6
      '@jridgewell/gen-mapping': 0.3.3
      '@jridgewell/trace-mapping': 0.3.20
      jsesc: 2.5.2

  '@babel/helper-compilation-targets@7.23.6':
    dependencies:
      '@babel/compat-data': 7.23.5
      '@babel/helper-validator-option': 7.23.5
      browserslist: 4.22.2
      lru-cache: 5.1.1
      semver: 6.3.1

  '@babel/helper-environment-visitor@7.22.20': {}

  '@babel/helper-function-name@7.23.0':
    dependencies:
      '@babel/template': 7.22.15
      '@babel/types': 7.23.6

  '@babel/helper-hoist-variables@7.22.5':
    dependencies:
      '@babel/types': 7.23.6

  '@babel/helper-module-imports@7.22.15':
    dependencies:
      '@babel/types': 7.23.6

  '@babel/helper-module-transforms@7.23.3(@babel/core@7.23.6)':
    dependencies:
      '@babel/core': 7.23.6
      '@babel/helper-environment-visitor': 7.22.20
      '@babel/helper-module-imports': 7.22.15
      '@babel/helper-simple-access': 7.22.5
      '@babel/helper-split-export-declaration': 7.22.6
      '@babel/helper-validator-identifier': 7.22.20

  '@babel/helper-plugin-utils@7.22.5': {}

  '@babel/helper-simple-access@7.22.5':
    dependencies:
      '@babel/types': 7.23.6

  '@babel/helper-split-export-declaration@7.22.6':
    dependencies:
      '@babel/types': 7.23.6

  '@babel/helper-string-parser@7.23.4': {}

  '@babel/helper-validator-identifier@7.22.20': {}

  '@babel/helper-validator-identifier@7.24.7':
    optional: true

  '@babel/helper-validator-option@7.23.5': {}

  '@babel/helpers@7.23.6':
    dependencies:
      '@babel/template': 7.22.15
      '@babel/traverse': 7.23.6
      '@babel/types': 7.23.6
    transitivePeerDependencies:
      - supports-color

  '@babel/highlight@7.23.4':
    dependencies:
      '@babel/helper-validator-identifier': 7.22.20
      chalk: 2.4.2
      js-tokens: 4.0.0

  '@babel/highlight@7.24.7':
    dependencies:
      '@babel/helper-validator-identifier': 7.24.7
      chalk: 2.4.2
      js-tokens: 4.0.0
      picocolors: 1.0.0
    optional: true

  '@babel/parser@7.23.6':
    dependencies:
      '@babel/types': 7.23.6

  '@babel/plugin-syntax-async-generators@7.8.4(@babel/core@7.23.6)':
    dependencies:
      '@babel/core': 7.23.6
      '@babel/helper-plugin-utils': 7.22.5

  '@babel/plugin-syntax-bigint@7.8.3(@babel/core@7.23.6)':
    dependencies:
      '@babel/core': 7.23.6
      '@babel/helper-plugin-utils': 7.22.5

  '@babel/plugin-syntax-class-properties@7.12.13(@babel/core@7.23.6)':
    dependencies:
      '@babel/core': 7.23.6
      '@babel/helper-plugin-utils': 7.22.5

  '@babel/plugin-syntax-import-meta@7.10.4(@babel/core@7.23.6)':
    dependencies:
      '@babel/core': 7.23.6
      '@babel/helper-plugin-utils': 7.22.5

  '@babel/plugin-syntax-json-strings@7.8.3(@babel/core@7.23.6)':
    dependencies:
      '@babel/core': 7.23.6
      '@babel/helper-plugin-utils': 7.22.5

  '@babel/plugin-syntax-jsx@7.23.3(@babel/core@7.23.6)':
    dependencies:
      '@babel/core': 7.23.6
      '@babel/helper-plugin-utils': 7.22.5

  '@babel/plugin-syntax-logical-assignment-operators@7.10.4(@babel/core@7.23.6)':
    dependencies:
      '@babel/core': 7.23.6
      '@babel/helper-plugin-utils': 7.22.5

  '@babel/plugin-syntax-nullish-coalescing-operator@7.8.3(@babel/core@7.23.6)':
    dependencies:
      '@babel/core': 7.23.6
      '@babel/helper-plugin-utils': 7.22.5

  '@babel/plugin-syntax-numeric-separator@7.10.4(@babel/core@7.23.6)':
    dependencies:
      '@babel/core': 7.23.6
      '@babel/helper-plugin-utils': 7.22.5

  '@babel/plugin-syntax-object-rest-spread@7.8.3(@babel/core@7.23.6)':
    dependencies:
      '@babel/core': 7.23.6
      '@babel/helper-plugin-utils': 7.22.5

  '@babel/plugin-syntax-optional-catch-binding@7.8.3(@babel/core@7.23.6)':
    dependencies:
      '@babel/core': 7.23.6
      '@babel/helper-plugin-utils': 7.22.5

  '@babel/plugin-syntax-optional-chaining@7.8.3(@babel/core@7.23.6)':
    dependencies:
      '@babel/core': 7.23.6
      '@babel/helper-plugin-utils': 7.22.5

  '@babel/plugin-syntax-top-level-await@7.14.5(@babel/core@7.23.6)':
    dependencies:
      '@babel/core': 7.23.6
      '@babel/helper-plugin-utils': 7.22.5

  '@babel/plugin-syntax-typescript@7.23.3(@babel/core@7.23.6)':
    dependencies:
      '@babel/core': 7.23.6
      '@babel/helper-plugin-utils': 7.22.5

  '@babel/template@7.22.15':
    dependencies:
      '@babel/code-frame': 7.23.5
      '@babel/parser': 7.23.6
      '@babel/types': 7.23.6

  '@babel/traverse@7.23.6':
    dependencies:
      '@babel/code-frame': 7.23.5
      '@babel/generator': 7.23.6
      '@babel/helper-environment-visitor': 7.22.20
      '@babel/helper-function-name': 7.23.0
      '@babel/helper-hoist-variables': 7.22.5
      '@babel/helper-split-export-declaration': 7.22.6
      '@babel/parser': 7.23.6
      '@babel/types': 7.23.6
      debug: 4.3.4
      globals: 11.12.0
    transitivePeerDependencies:
      - supports-color

  '@babel/types@7.23.6':
    dependencies:
      '@babel/helper-string-parser': 7.23.4
      '@babel/helper-validator-identifier': 7.22.20
      to-fast-properties: 2.0.0

  '@bcoe/v8-coverage@0.2.3': {}

  '@esbuild/aix-ppc64@0.19.10':
    optional: true

  '@esbuild/android-arm64@0.19.10':
    optional: true

  '@esbuild/android-arm@0.19.10':
    optional: true

  '@esbuild/android-x64@0.19.10':
    optional: true

  '@esbuild/darwin-arm64@0.19.10':
    optional: true

  '@esbuild/darwin-x64@0.19.10':
    optional: true

  '@esbuild/freebsd-arm64@0.19.10':
    optional: true

  '@esbuild/freebsd-x64@0.19.10':
    optional: true

  '@esbuild/linux-arm64@0.19.10':
    optional: true

  '@esbuild/linux-arm@0.19.10':
    optional: true

  '@esbuild/linux-ia32@0.19.10':
    optional: true

  '@esbuild/linux-loong64@0.19.10':
    optional: true

  '@esbuild/linux-mips64el@0.19.10':
    optional: true

  '@esbuild/linux-ppc64@0.19.10':
    optional: true

  '@esbuild/linux-riscv64@0.19.10':
    optional: true

  '@esbuild/linux-s390x@0.19.10':
    optional: true

  '@esbuild/linux-x64@0.19.10':
    optional: true

  '@esbuild/netbsd-x64@0.19.10':
    optional: true

  '@esbuild/openbsd-x64@0.19.10':
    optional: true

  '@esbuild/sunos-x64@0.19.10':
    optional: true

  '@esbuild/win32-arm64@0.19.10':
    optional: true

  '@esbuild/win32-ia32@0.19.10':
    optional: true

  '@esbuild/win32-x64@0.19.10':
    optional: true

  '@eslint-community/eslint-utils@4.4.0(eslint@9.6.0)':
    dependencies:
      eslint: 9.6.0
      eslint-visitor-keys: 3.4.3

  '@eslint-community/regexpp@4.10.0': {}

  '@eslint/config-array@0.17.0':
    dependencies:
      '@eslint/object-schema': 2.1.4
      debug: 4.3.4
      minimatch: 3.1.2
    transitivePeerDependencies:
      - supports-color

  '@eslint/eslintrc@3.1.0':
    dependencies:
      ajv: 6.12.6
      debug: 4.3.4
      espree: 10.1.0
      globals: 14.0.0
      ignore: 5.3.0
      import-fresh: 3.3.0
      js-yaml: 4.1.0
      minimatch: 3.1.2
      strip-json-comments: 3.1.1
    transitivePeerDependencies:
      - supports-color

  '@eslint/js@9.6.0': {}

  '@eslint/object-schema@2.1.4': {}

  '@humanwhocodes/module-importer@1.0.1': {}

  '@humanwhocodes/retry@0.3.0': {}

  '@isaacs/cliui@8.0.2':
    dependencies:
      string-width: 5.1.2
      string-width-cjs: string-width@4.2.3
      strip-ansi: 7.1.0
      strip-ansi-cjs: strip-ansi@6.0.1
      wrap-ansi: 8.1.0
      wrap-ansi-cjs: wrap-ansi@7.0.0

  '@istanbuljs/load-nyc-config@1.1.0':
    dependencies:
      camelcase: 5.3.1
      find-up: 4.1.0
      get-package-type: 0.1.0
      js-yaml: 3.14.1
      resolve-from: 5.0.0

  '@istanbuljs/schema@0.1.3': {}

  '@jest/console@29.7.0':
    dependencies:
      '@jest/types': 29.6.3
      '@types/node': 20.14.10
      chalk: 4.1.2
      jest-message-util: 29.7.0
      jest-util: 29.7.0
      slash: 3.0.0

  '@jest/core@29.7.0':
    dependencies:
      '@jest/console': 29.7.0
      '@jest/reporters': 29.7.0
      '@jest/test-result': 29.7.0
      '@jest/transform': 29.7.0
      '@jest/types': 29.6.3
      '@types/node': 20.14.10
      ansi-escapes: 4.3.2
      chalk: 4.1.2
      ci-info: 3.9.0
      exit: 0.1.2
      graceful-fs: 4.2.11
      jest-changed-files: 29.7.0
      jest-config: 29.7.0(@types/node@20.14.10)
      jest-haste-map: 29.7.0
      jest-message-util: 29.7.0
      jest-regex-util: 29.6.3
      jest-resolve: 29.7.0
      jest-resolve-dependencies: 29.7.0
      jest-runner: 29.7.0
      jest-runtime: 29.7.0
      jest-snapshot: 29.7.0
      jest-util: 29.7.0
      jest-validate: 29.7.0
      jest-watcher: 29.7.0
      micromatch: 4.0.8
      pretty-format: 29.7.0
      slash: 3.0.0
      strip-ansi: 6.0.1
    transitivePeerDependencies:
      - babel-plugin-macros
      - supports-color
      - ts-node

  '@jest/environment@29.7.0':
    dependencies:
      '@jest/fake-timers': 29.7.0
      '@jest/types': 29.6.3
      '@types/node': 20.14.10
      jest-mock: 29.7.0

  '@jest/expect-utils@29.7.0':
    dependencies:
      jest-get-type: 29.6.3

  '@jest/expect@29.7.0':
    dependencies:
      expect: 29.7.0
      jest-snapshot: 29.7.0
    transitivePeerDependencies:
      - supports-color

  '@jest/fake-timers@29.7.0':
    dependencies:
      '@jest/types': 29.6.3
      '@sinonjs/fake-timers': 10.3.0
      '@types/node': 20.14.10
      jest-message-util: 29.7.0
      jest-mock: 29.7.0
      jest-util: 29.7.0

  '@jest/globals@29.7.0':
    dependencies:
      '@jest/environment': 29.7.0
      '@jest/expect': 29.7.0
      '@jest/types': 29.6.3
      jest-mock: 29.7.0
    transitivePeerDependencies:
      - supports-color

  '@jest/reporters@29.7.0':
    dependencies:
      '@bcoe/v8-coverage': 0.2.3
      '@jest/console': 29.7.0
      '@jest/test-result': 29.7.0
      '@jest/transform': 29.7.0
      '@jest/types': 29.6.3
      '@jridgewell/trace-mapping': 0.3.20
      '@types/node': 20.14.10
      chalk: 4.1.2
      collect-v8-coverage: 1.0.2
      exit: 0.1.2
      glob: 7.2.3
      graceful-fs: 4.2.11
      istanbul-lib-coverage: 3.2.2
      istanbul-lib-instrument: 6.0.1
      istanbul-lib-report: 3.0.1
      istanbul-lib-source-maps: 4.0.1
      istanbul-reports: 3.1.6
      jest-message-util: 29.7.0
      jest-util: 29.7.0
      jest-worker: 29.7.0
      slash: 3.0.0
      string-length: 4.0.2
      strip-ansi: 6.0.1
      v8-to-istanbul: 9.2.0
    transitivePeerDependencies:
      - supports-color

  '@jest/schemas@29.6.3':
    dependencies:
      '@sinclair/typebox': 0.27.8

  '@jest/source-map@29.6.3':
    dependencies:
      '@jridgewell/trace-mapping': 0.3.20
      callsites: 3.1.0
      graceful-fs: 4.2.11

  '@jest/test-result@29.7.0':
    dependencies:
      '@jest/console': 29.7.0
      '@jest/types': 29.6.3
      '@types/istanbul-lib-coverage': 2.0.6
      collect-v8-coverage: 1.0.2

  '@jest/test-sequencer@29.7.0':
    dependencies:
      '@jest/test-result': 29.7.0
      graceful-fs: 4.2.11
      jest-haste-map: 29.7.0
      slash: 3.0.0

  '@jest/transform@29.7.0':
    dependencies:
      '@babel/core': 7.23.6
      '@jest/types': 29.6.3
      '@jridgewell/trace-mapping': 0.3.20
      babel-plugin-istanbul: 6.1.1
      chalk: 4.1.2
      convert-source-map: 2.0.0
      fast-json-stable-stringify: 2.1.0
      graceful-fs: 4.2.11
      jest-haste-map: 29.7.0
      jest-regex-util: 29.6.3
      jest-util: 29.7.0
      micromatch: 4.0.8
      pirates: 4.0.6
      slash: 3.0.0
      write-file-atomic: 4.0.2
    transitivePeerDependencies:
      - supports-color

  '@jest/types@29.6.3':
    dependencies:
      '@jest/schemas': 29.6.3
      '@types/istanbul-lib-coverage': 2.0.6
      '@types/istanbul-reports': 3.0.4
      '@types/node': 20.14.10
      '@types/yargs': 17.0.32
      chalk: 4.1.2

  '@jridgewell/gen-mapping@0.3.3':
    dependencies:
      '@jridgewell/set-array': 1.1.2
      '@jridgewell/sourcemap-codec': 1.4.15
      '@jridgewell/trace-mapping': 0.3.20

  '@jridgewell/resolve-uri@3.1.1': {}

  '@jridgewell/set-array@1.1.2': {}

  '@jridgewell/sourcemap-codec@1.4.15': {}

  '@jridgewell/trace-mapping@0.3.20':
    dependencies:
      '@jridgewell/resolve-uri': 3.1.1
      '@jridgewell/sourcemap-codec': 1.4.15

  '@nodelib/fs.scandir@2.1.5':
    dependencies:
      '@nodelib/fs.stat': 2.0.5
      run-parallel: 1.2.0

  '@nodelib/fs.stat@2.0.5': {}

  '@nodelib/fs.walk@1.2.8':
    dependencies:
      '@nodelib/fs.scandir': 2.1.5
      fastq: 1.16.0

  '@nolyfill/is-core-module@1.0.39': {}

  '@pkgjs/parseargs@0.11.0':
    optional: true

  '@rollup/plugin-commonjs@26.0.1(rollup@4.22.4)':
    dependencies:
      '@rollup/pluginutils': 5.1.0(rollup@4.22.4)
      commondir: 1.0.1
      estree-walker: 2.0.2
      glob: 10.4.5
      is-reference: 1.2.1
      magic-string: 0.30.5
    optionalDependencies:
      rollup: 4.22.4

  '@rollup/plugin-node-resolve@15.2.3(rollup@4.22.4)':
    dependencies:
      '@rollup/pluginutils': 5.1.0(rollup@4.22.4)
      '@types/resolve': 1.20.2
      deepmerge: 4.3.1
      is-builtin-module: 3.2.1
      is-module: 1.0.0
      resolve: 1.22.8
    optionalDependencies:
      rollup: 4.22.4

  '@rollup/pluginutils@5.1.0(rollup@4.22.4)':
    dependencies:
      '@types/estree': 1.0.5
      estree-walker: 2.0.2
      picomatch: 2.3.1
    optionalDependencies:
      rollup: 4.22.4

  '@rollup/rollup-android-arm-eabi@4.22.4':
    optional: true

  '@rollup/rollup-android-arm64@4.22.4':
    optional: true

  '@rollup/rollup-darwin-arm64@4.22.4':
    optional: true

  '@rollup/rollup-darwin-x64@4.22.4':
    optional: true

  '@rollup/rollup-linux-arm-gnueabihf@4.22.4':
    optional: true

  '@rollup/rollup-linux-arm-musleabihf@4.22.4':
    optional: true

  '@rollup/rollup-linux-arm64-gnu@4.22.4':
    optional: true

  '@rollup/rollup-linux-arm64-musl@4.22.4':
    optional: true

  '@rollup/rollup-linux-powerpc64le-gnu@4.22.4':
    optional: true

  '@rollup/rollup-linux-riscv64-gnu@4.22.4':
    optional: true

  '@rollup/rollup-linux-s390x-gnu@4.22.4':
    optional: true

  '@rollup/rollup-linux-x64-gnu@4.22.4':
    optional: true

  '@rollup/rollup-linux-x64-musl@4.22.4':
    optional: true

  '@rollup/rollup-win32-arm64-msvc@4.22.4':
    optional: true

  '@rollup/rollup-win32-ia32-msvc@4.22.4':
    optional: true

  '@rollup/rollup-win32-x64-msvc@4.22.4':
    optional: true

  '@shikijs/core@1.10.3':
    dependencies:
      '@types/hast': 3.0.4

  '@sinclair/typebox@0.27.8': {}

  '@sinonjs/commons@3.0.0':
    dependencies:
      type-detect: 4.0.8

  '@sinonjs/fake-timers@10.3.0':
    dependencies:
      '@sinonjs/commons': 3.0.0

  '@types/babel__core@7.20.5':
    dependencies:
      '@babel/parser': 7.23.6
      '@babel/types': 7.23.6
      '@types/babel__generator': 7.6.8
      '@types/babel__template': 7.4.4
      '@types/babel__traverse': 7.20.4

  '@types/babel__generator@7.6.8':
    dependencies:
      '@babel/types': 7.23.6

  '@types/babel__template@7.4.4':
    dependencies:
      '@babel/parser': 7.23.6
      '@babel/types': 7.23.6

  '@types/babel__traverse@7.20.4':
    dependencies:
      '@babel/types': 7.23.6

  '@types/estree@1.0.5': {}

  '@types/graceful-fs@4.1.9':
    dependencies:
      '@types/node': 20.14.10

  '@types/hast@3.0.4':
    dependencies:
      '@types/unist': 3.0.2

  '@types/istanbul-lib-coverage@2.0.6': {}

  '@types/istanbul-lib-report@3.0.3':
    dependencies:
      '@types/istanbul-lib-coverage': 2.0.6

  '@types/istanbul-reports@3.0.4':
    dependencies:
      '@types/istanbul-lib-report': 3.0.3

  '@types/jest@29.5.12':
    dependencies:
      expect: 29.7.0
      pretty-format: 29.7.0

  '@types/node@20.14.10':
    dependencies:
      undici-types: 5.26.5

  '@types/resolve@1.20.2': {}

  '@types/seedrandom@3.0.8': {}

  '@types/stack-utils@2.0.3': {}

  '@types/unist@3.0.2': {}

  '@types/yargs-parser@21.0.3': {}

  '@types/yargs@17.0.32':
    dependencies:
      '@types/yargs-parser': 21.0.3

  '@typescript-eslint/eslint-plugin@8.0.0(@typescript-eslint/parser@8.0.0(eslint@9.6.0)(typescript@5.5.3))(eslint@9.6.0)(typescript@5.5.3)':
    dependencies:
      '@eslint-community/regexpp': 4.10.0
      '@typescript-eslint/parser': 8.0.0(eslint@9.6.0)(typescript@5.5.3)
      '@typescript-eslint/scope-manager': 8.0.0
      '@typescript-eslint/type-utils': 8.0.0(eslint@9.6.0)(typescript@5.5.3)
      '@typescript-eslint/utils': 8.0.0(eslint@9.6.0)(typescript@5.5.3)
      '@typescript-eslint/visitor-keys': 8.0.0
      eslint: 9.6.0
      graphemer: 1.4.0
      ignore: 5.3.1
      natural-compare: 1.4.0
      ts-api-utils: 1.3.0(typescript@5.5.3)
    optionalDependencies:
      typescript: 5.5.3
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/parser@8.0.0(eslint@9.6.0)(typescript@5.5.3)':
    dependencies:
      '@typescript-eslint/scope-manager': 8.0.0
      '@typescript-eslint/types': 8.0.0
      '@typescript-eslint/typescript-estree': 8.0.0(typescript@5.5.3)
      '@typescript-eslint/visitor-keys': 8.0.0
      debug: 4.3.4
      eslint: 9.6.0
    optionalDependencies:
      typescript: 5.5.3
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/scope-manager@8.0.0':
    dependencies:
      '@typescript-eslint/types': 8.0.0
      '@typescript-eslint/visitor-keys': 8.0.0

  '@typescript-eslint/type-utils@8.0.0(eslint@9.6.0)(typescript@5.5.3)':
    dependencies:
      '@typescript-eslint/typescript-estree': 8.0.0(typescript@5.5.3)
      '@typescript-eslint/utils': 8.0.0(eslint@9.6.0)(typescript@5.5.3)
      debug: 4.3.4
      ts-api-utils: 1.3.0(typescript@5.5.3)
    optionalDependencies:
      typescript: 5.5.3
    transitivePeerDependencies:
      - eslint
      - supports-color

  '@typescript-eslint/types@8.0.0': {}

  '@typescript-eslint/typescript-estree@8.0.0(typescript@5.5.3)':
    dependencies:
      '@typescript-eslint/types': 8.0.0
      '@typescript-eslint/visitor-keys': 8.0.0
      debug: 4.3.4
      globby: 11.1.0
      is-glob: 4.0.3
      minimatch: 9.0.5
      semver: 7.6.2
      ts-api-utils: 1.3.0(typescript@5.5.3)
    optionalDependencies:
      typescript: 5.5.3
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/utils@8.0.0(eslint@9.6.0)(typescript@5.5.3)':
    dependencies:
      '@eslint-community/eslint-utils': 4.4.0(eslint@9.6.0)
      '@typescript-eslint/scope-manager': 8.0.0
      '@typescript-eslint/types': 8.0.0
      '@typescript-eslint/typescript-estree': 8.0.0(typescript@5.5.3)
      eslint: 9.6.0
    transitivePeerDependencies:
      - supports-color
      - typescript

  '@typescript-eslint/visitor-keys@8.0.0':
    dependencies:
      '@typescript-eslint/types': 8.0.0
      eslint-visitor-keys: 3.4.3

  acorn-jsx@5.3.2(acorn@8.12.1):
    dependencies:
      acorn: 8.12.1

  acorn@8.12.1: {}

  ajv@6.12.6:
    dependencies:
      fast-deep-equal: 3.1.3
      fast-json-stable-stringify: 2.1.0
      json-schema-traverse: 0.4.1
      uri-js: 4.4.1

  ansi-escapes@4.3.2:
    dependencies:
      type-fest: 0.21.3

  ansi-regex@5.0.1: {}

  ansi-regex@6.0.1: {}

  ansi-styles@3.2.1:
    dependencies:
      color-convert: 1.9.3

  ansi-styles@4.3.0:
    dependencies:
      color-convert: 2.0.1

  ansi-styles@5.2.0: {}

  ansi-styles@6.2.1: {}

  anymatch@3.1.3:
    dependencies:
      normalize-path: 3.0.0
      picomatch: 2.3.1

  argparse@1.0.10:
    dependencies:
      sprintf-js: 1.0.3

  argparse@2.0.1: {}

  array-union@2.1.0: {}

  async@3.2.5: {}

  babel-jest@29.7.0(@babel/core@7.23.6):
    dependencies:
      '@babel/core': 7.23.6
      '@jest/transform': 29.7.0
      '@types/babel__core': 7.20.5
      babel-plugin-istanbul: 6.1.1
      babel-preset-jest: 29.6.3(@babel/core@7.23.6)
      chalk: 4.1.2
      graceful-fs: 4.2.11
      slash: 3.0.0
    transitivePeerDependencies:
      - supports-color

  babel-plugin-istanbul@6.1.1:
    dependencies:
      '@babel/helper-plugin-utils': 7.22.5
      '@istanbuljs/load-nyc-config': 1.1.0
      '@istanbuljs/schema': 0.1.3
      istanbul-lib-instrument: 5.2.1
      test-exclude: 6.0.0
    transitivePeerDependencies:
      - supports-color

  babel-plugin-jest-hoist@29.6.3:
    dependencies:
      '@babel/template': 7.22.15
      '@babel/types': 7.23.6
      '@types/babel__core': 7.20.5
      '@types/babel__traverse': 7.20.4

  babel-preset-current-node-syntax@1.0.1(@babel/core@7.23.6):
    dependencies:
      '@babel/core': 7.23.6
      '@babel/plugin-syntax-async-generators': 7.8.4(@babel/core@7.23.6)
      '@babel/plugin-syntax-bigint': 7.8.3(@babel/core@7.23.6)
      '@babel/plugin-syntax-class-properties': 7.12.13(@babel/core@7.23.6)
      '@babel/plugin-syntax-import-meta': 7.10.4(@babel/core@7.23.6)
      '@babel/plugin-syntax-json-strings': 7.8.3(@babel/core@7.23.6)
      '@babel/plugin-syntax-logical-assignment-operators': 7.10.4(@babel/core@7.23.6)
      '@babel/plugin-syntax-nullish-coalescing-operator': 7.8.3(@babel/core@7.23.6)
      '@babel/plugin-syntax-numeric-separator': 7.10.4(@babel/core@7.23.6)
      '@babel/plugin-syntax-object-rest-spread': 7.8.3(@babel/core@7.23.6)
      '@babel/plugin-syntax-optional-catch-binding': 7.8.3(@babel/core@7.23.6)
      '@babel/plugin-syntax-optional-chaining': 7.8.3(@babel/core@7.23.6)
      '@babel/plugin-syntax-top-level-await': 7.14.5(@babel/core@7.23.6)

  babel-preset-jest@29.6.3(@babel/core@7.23.6):
    dependencies:
      '@babel/core': 7.23.6
      babel-plugin-jest-hoist: 29.6.3
      babel-preset-current-node-syntax: 1.0.1(@babel/core@7.23.6)

  balanced-match@1.0.2: {}

  brace-expansion@1.1.11:
    dependencies:
      balanced-match: 1.0.2
      concat-map: 0.0.1

  brace-expansion@2.0.1:
    dependencies:
      balanced-match: 1.0.2

  braces@3.0.3:
    dependencies:
      fill-range: 7.1.1

  browserslist@4.22.2:
    dependencies:
      caniuse-lite: 1.0.30001570
      electron-to-chromium: 1.4.615
      node-releases: 2.0.14
      update-browserslist-db: 1.0.13(browserslist@4.22.2)

  bs-logger@0.2.6:
    dependencies:
      fast-json-stable-stringify: 2.1.0

  bser@2.1.1:
    dependencies:
      node-int64: 0.4.0

  buffer-from@1.1.2: {}

  builtin-modules@3.3.0: {}

  callsites@3.1.0: {}

  camelcase@5.3.1: {}

  camelcase@6.3.0: {}

  caniuse-lite@1.0.30001570: {}

  chalk@2.4.2:
    dependencies:
      ansi-styles: 3.2.1
      escape-string-regexp: 1.0.5
      supports-color: 5.5.0

  chalk@4.1.2:
    dependencies:
      ansi-styles: 4.3.0
      supports-color: 7.2.0

  char-regex@1.0.2: {}

  ci-info@3.9.0: {}

  cjs-module-lexer@1.2.3: {}

  cliui@8.0.1:
    dependencies:
      string-width: 4.2.3
      strip-ansi: 6.0.1
      wrap-ansi: 7.0.0

  co@4.6.0: {}

  collect-v8-coverage@1.0.2: {}

  color-convert@1.9.3:
    dependencies:
      color-name: 1.1.3

  color-convert@2.0.1:
    dependencies:
      color-name: 1.1.4

  color-name@1.1.3: {}

  color-name@1.1.4: {}

  commondir@1.0.1: {}

  concat-map@0.0.1: {}

  convert-source-map@2.0.0: {}

  create-jest@29.7.0(@types/node@20.14.10):
    dependencies:
      '@jest/types': 29.6.3
      chalk: 4.1.2
      exit: 0.1.2
      graceful-fs: 4.2.11
      jest-config: 29.7.0(@types/node@20.14.10)
      jest-util: 29.7.0
      prompts: 2.4.2
    transitivePeerDependencies:
      - '@types/node'
      - babel-plugin-macros
      - supports-color
      - ts-node

  cross-spawn@7.0.6:
    dependencies:
      path-key: 3.1.1
      shebang-command: 2.0.0
      which: 2.0.2

  debug@4.3.4:
    dependencies:
      ms: 2.1.2

  decimal.js@10.4.3: {}

  dedent@1.5.1: {}

  deep-is@0.1.4: {}

  deepmerge@4.3.1: {}

  detect-newline@3.1.0: {}

  diff-sequences@29.6.3: {}

  dir-glob@3.0.1:
    dependencies:
      path-type: 4.0.0

  eastasianwidth@0.2.0: {}

  ejs@3.1.10:
    dependencies:
      jake: 10.9.1

  electron-to-chromium@1.4.615: {}

  emittery@0.13.1: {}

  emoji-regex@8.0.0: {}

  emoji-regex@9.2.2: {}

  entities@4.5.0: {}

  error-ex@1.3.2:
    dependencies:
      is-arrayish: 0.2.1

  es-module-lexer@1.4.1: {}

  esbuild@0.19.10:
    optionalDependencies:
      '@esbuild/aix-ppc64': 0.19.10
      '@esbuild/android-arm': 0.19.10
      '@esbuild/android-arm64': 0.19.10
      '@esbuild/android-x64': 0.19.10
      '@esbuild/darwin-arm64': 0.19.10
      '@esbuild/darwin-x64': 0.19.10
      '@esbuild/freebsd-arm64': 0.19.10
      '@esbuild/freebsd-x64': 0.19.10
      '@esbuild/linux-arm': 0.19.10
      '@esbuild/linux-arm64': 0.19.10
      '@esbuild/linux-ia32': 0.19.10
      '@esbuild/linux-loong64': 0.19.10
      '@esbuild/linux-mips64el': 0.19.10
      '@esbuild/linux-ppc64': 0.19.10
      '@esbuild/linux-riscv64': 0.19.10
      '@esbuild/linux-s390x': 0.19.10
      '@esbuild/linux-x64': 0.19.10
      '@esbuild/netbsd-x64': 0.19.10
      '@esbuild/openbsd-x64': 0.19.10
      '@esbuild/sunos-x64': 0.19.10
      '@esbuild/win32-arm64': 0.19.10
      '@esbuild/win32-ia32': 0.19.10
      '@esbuild/win32-x64': 0.19.10

  escalade@3.1.1: {}

  escape-string-regexp@1.0.5: {}

  escape-string-regexp@2.0.0: {}

  escape-string-regexp@4.0.0: {}

  eslint-config-prettier@9.1.0(eslint@9.6.0):
    dependencies:
      eslint: 9.6.0

  eslint-scope@8.0.1:
    dependencies:
      esrecurse: 4.3.0
      estraverse: 5.3.0

  eslint-visitor-keys@3.4.3: {}

  eslint-visitor-keys@4.0.0: {}

  eslint@9.6.0:
    dependencies:
      '@eslint-community/eslint-utils': 4.4.0(eslint@9.6.0)
      '@eslint-community/regexpp': 4.10.0
      '@eslint/config-array': 0.17.0
      '@eslint/eslintrc': 3.1.0
      '@eslint/js': 9.6.0
      '@humanwhocodes/module-importer': 1.0.1
      '@humanwhocodes/retry': 0.3.0
      '@nodelib/fs.walk': 1.2.8
      ajv: 6.12.6
      chalk: 4.1.2
      cross-spawn: 7.0.6
      debug: 4.3.4
      escape-string-regexp: 4.0.0
      eslint-scope: 8.0.1
      eslint-visitor-keys: 4.0.0
      espree: 10.1.0
      esquery: 1.5.0
      esutils: 2.0.3
      fast-deep-equal: 3.1.3
      file-entry-cache: 8.0.0
      find-up: 5.0.0
      glob-parent: 6.0.2
      ignore: 5.3.0
      imurmurhash: 0.1.4
      is-glob: 4.0.3
      is-path-inside: 3.0.3
      json-stable-stringify-without-jsonify: 1.0.1
      levn: 0.4.1
      lodash.merge: 4.6.2
      minimatch: 3.1.2
      natural-compare: 1.4.0
      optionator: 0.9.3
      strip-ansi: 6.0.1
      text-table: 0.2.0
    transitivePeerDependencies:
      - supports-color

  espree@10.1.0:
    dependencies:
      acorn: 8.12.1
      acorn-jsx: 5.3.2(acorn@8.12.1)
      eslint-visitor-keys: 4.0.0

  esprima@4.0.1: {}

  esquery@1.5.0:
    dependencies:
      estraverse: 5.3.0

  esrecurse@4.3.0:
    dependencies:
      estraverse: 5.3.0

  estraverse@5.3.0: {}

  estree-walker@2.0.2: {}

  esutils@2.0.3: {}

  execa@5.1.1:
    dependencies:
      cross-spawn: 7.0.6
      get-stream: 6.0.1
      human-signals: 2.1.0
      is-stream: 2.0.1
      merge-stream: 2.0.0
      npm-run-path: 4.0.1
      onetime: 5.1.2
      signal-exit: 3.0.7
      strip-final-newline: 2.0.0

  exit@0.1.2: {}

  expect@29.7.0:
    dependencies:
      '@jest/expect-utils': 29.7.0
      jest-get-type: 29.6.3
      jest-matcher-utils: 29.7.0
      jest-message-util: 29.7.0
      jest-util: 29.7.0

  fast-deep-equal@3.1.3: {}

  fast-glob@3.3.2:
    dependencies:
      '@nodelib/fs.stat': 2.0.5
      '@nodelib/fs.walk': 1.2.8
      glob-parent: 5.1.2
      merge2: 1.4.1
      micromatch: 4.0.8

  fast-json-stable-stringify@2.1.0: {}

  fast-levenshtein@2.0.6: {}

  fastq@1.16.0:
    dependencies:
      reusify: 1.0.4

  fb-watchman@2.0.2:
    dependencies:
      bser: 2.1.1

  file-entry-cache@8.0.0:
    dependencies:
      flat-cache: 4.0.1

  filelist@1.0.4:
    dependencies:
      minimatch: 5.1.6

  fill-range@7.1.1:
    dependencies:
      to-regex-range: 5.0.1

  find-up@4.1.0:
    dependencies:
      locate-path: 5.0.0
      path-exists: 4.0.0

  find-up@5.0.0:
    dependencies:
      locate-path: 6.0.0
      path-exists: 4.0.0

  flat-cache@4.0.1:
    dependencies:
      flatted: 3.2.9
      keyv: 4.5.4

  flatted@3.2.9: {}

  foreground-child@3.1.1:
    dependencies:
      cross-spawn: 7.0.6
      signal-exit: 4.1.0

  fs.realpath@1.0.0: {}

  fsevents@2.3.3:
    optional: true

  gensync@1.0.0-beta.2: {}

  get-caller-file@2.0.5: {}

  get-package-type@0.1.0: {}

  get-stream@6.0.1: {}

  get-tsconfig@4.7.2:
    dependencies:
      resolve-pkg-maps: 1.0.0

  glob-parent@5.1.2:
    dependencies:
      is-glob: 4.0.3

  glob-parent@6.0.2:
    dependencies:
      is-glob: 4.0.3

  glob@10.4.5:
    dependencies:
      foreground-child: 3.1.1
      jackspeak: 3.4.2
      minimatch: 9.0.5
      minipass: 7.1.2
      package-json-from-dist: 1.0.0
      path-scurry: 1.11.1

  glob@11.0.0:
    dependencies:
      foreground-child: 3.1.1
      jackspeak: 4.0.1
      minimatch: 10.0.1
      minipass: 7.1.2
      package-json-from-dist: 1.0.0
      path-scurry: 2.0.0

  glob@7.2.3:
    dependencies:
      fs.realpath: 1.0.0
      inflight: 1.0.6
      inherits: 2.0.4
      minimatch: 3.1.2
      once: 1.4.0
      path-is-absolute: 1.0.1

  globals@11.12.0: {}

  globals@14.0.0: {}

  globals@15.8.0: {}

  globby@11.1.0:
    dependencies:
      array-union: 2.1.0
      dir-glob: 3.0.1
      fast-glob: 3.3.2
      ignore: 5.3.1
      merge2: 1.4.1
      slash: 3.0.0

  graceful-fs@4.2.11: {}

  graphemer@1.4.0: {}

  has-flag@3.0.0: {}

  has-flag@4.0.0: {}

  html-escaper@2.0.2: {}

  human-signals@2.1.0: {}

  ignore@5.3.0: {}

  ignore@5.3.1: {}

  import-fresh@3.3.0:
    dependencies:
      parent-module: 1.0.1
      resolve-from: 4.0.0

  import-local@3.1.0:
    dependencies:
      pkg-dir: 4.2.0
      resolve-cwd: 3.0.0

  imurmurhash@0.1.4: {}

  inflight@1.0.6:
    dependencies:
      once: 1.4.0
      wrappy: 1.0.2

  inherits@2.0.4: {}

  is-arrayish@0.2.1: {}

  is-builtin-module@3.2.1:
    dependencies:
      builtin-modules: 3.3.0

  is-extglob@2.1.1: {}

  is-fullwidth-code-point@3.0.0: {}

  is-generator-fn@2.1.0: {}

  is-glob@4.0.3:
    dependencies:
      is-extglob: 2.1.1

  is-module@1.0.0: {}

  is-number@7.0.0: {}

  is-path-inside@3.0.3: {}

  is-reference@1.2.1:
    dependencies:
      '@types/estree': 1.0.5

  is-stream@2.0.1: {}

  isexe@2.0.0: {}

  istanbul-lib-coverage@3.2.2: {}

  istanbul-lib-instrument@5.2.1:
    dependencies:
      '@babel/core': 7.23.6
      '@babel/parser': 7.23.6
      '@istanbuljs/schema': 0.1.3
      istanbul-lib-coverage: 3.2.2
      semver: 6.3.1
    transitivePeerDependencies:
      - supports-color

  istanbul-lib-instrument@6.0.1:
    dependencies:
      '@babel/core': 7.23.6
      '@babel/parser': 7.23.6
      '@istanbuljs/schema': 0.1.3
      istanbul-lib-coverage: 3.2.2
      semver: 7.5.4
    transitivePeerDependencies:
      - supports-color

  istanbul-lib-report@3.0.1:
    dependencies:
      istanbul-lib-coverage: 3.2.2
      make-dir: 4.0.0
      supports-color: 7.2.0

  istanbul-lib-source-maps@4.0.1:
    dependencies:
      debug: 4.3.4
      istanbul-lib-coverage: 3.2.2
      source-map: 0.6.1
    transitivePeerDependencies:
      - supports-color

  istanbul-reports@3.1.6:
    dependencies:
      html-escaper: 2.0.2
      istanbul-lib-report: 3.0.1

  jackspeak@3.4.2:
    dependencies:
      '@isaacs/cliui': 8.0.2
    optionalDependencies:
      '@pkgjs/parseargs': 0.11.0

  jackspeak@4.0.1:
    dependencies:
      '@isaacs/cliui': 8.0.2
    optionalDependencies:
      '@pkgjs/parseargs': 0.11.0

  jake@10.9.1:
    dependencies:
      async: 3.2.5
      chalk: 4.1.2
      filelist: 1.0.4
      minimatch: 3.1.2

  jest-changed-files@29.7.0:
    dependencies:
      execa: 5.1.1
      jest-util: 29.7.0
      p-limit: 3.1.0

  jest-circus@29.7.0:
    dependencies:
      '@jest/environment': 29.7.0
      '@jest/expect': 29.7.0
      '@jest/test-result': 29.7.0
      '@jest/types': 29.6.3
      '@types/node': 20.14.10
      chalk: 4.1.2
      co: 4.6.0
      dedent: 1.5.1
      is-generator-fn: 2.1.0
      jest-each: 29.7.0
      jest-matcher-utils: 29.7.0
      jest-message-util: 29.7.0
      jest-runtime: 29.7.0
      jest-snapshot: 29.7.0
      jest-util: 29.7.0
      p-limit: 3.1.0
      pretty-format: 29.7.0
      pure-rand: 6.0.4
      slash: 3.0.0
      stack-utils: 2.0.6
    transitivePeerDependencies:
      - babel-plugin-macros
      - supports-color

  jest-cli@29.7.0(@types/node@20.14.10):
    dependencies:
      '@jest/core': 29.7.0
      '@jest/test-result': 29.7.0
      '@jest/types': 29.6.3
      chalk: 4.1.2
      create-jest: 29.7.0(@types/node@20.14.10)
      exit: 0.1.2
      import-local: 3.1.0
      jest-config: 29.7.0(@types/node@20.14.10)
      jest-util: 29.7.0
      jest-validate: 29.7.0
      yargs: 17.7.2
    transitivePeerDependencies:
      - '@types/node'
      - babel-plugin-macros
      - supports-color
      - ts-node

  jest-config@29.7.0(@types/node@20.14.10):
    dependencies:
      '@babel/core': 7.23.6
      '@jest/test-sequencer': 29.7.0
      '@jest/types': 29.6.3
      babel-jest: 29.7.0(@babel/core@7.23.6)
      chalk: 4.1.2
      ci-info: 3.9.0
      deepmerge: 4.3.1
      glob: 7.2.3
      graceful-fs: 4.2.11
      jest-circus: 29.7.0
      jest-environment-node: 29.7.0
      jest-get-type: 29.6.3
      jest-regex-util: 29.6.3
      jest-resolve: 29.7.0
      jest-runner: 29.7.0
      jest-util: 29.7.0
      jest-validate: 29.7.0
      micromatch: 4.0.8
      parse-json: 5.2.0
      pretty-format: 29.7.0
      slash: 3.0.0
      strip-json-comments: 3.1.1
    optionalDependencies:
      '@types/node': 20.14.10
    transitivePeerDependencies:
      - babel-plugin-macros
      - supports-color

  jest-diff@29.7.0:
    dependencies:
      chalk: 4.1.2
      diff-sequences: 29.6.3
      jest-get-type: 29.6.3
      pretty-format: 29.7.0

  jest-docblock@29.7.0:
    dependencies:
      detect-newline: 3.1.0

  jest-each@29.7.0:
    dependencies:
      '@jest/types': 29.6.3
      chalk: 4.1.2
      jest-get-type: 29.6.3
      jest-util: 29.7.0
      pretty-format: 29.7.0

  jest-environment-node@29.7.0:
    dependencies:
      '@jest/environment': 29.7.0
      '@jest/fake-timers': 29.7.0
      '@jest/types': 29.6.3
      '@types/node': 20.14.10
      jest-mock: 29.7.0
      jest-util: 29.7.0

  jest-get-type@29.6.3: {}

  jest-haste-map@29.7.0:
    dependencies:
      '@jest/types': 29.6.3
      '@types/graceful-fs': 4.1.9
      '@types/node': 20.14.10
      anymatch: 3.1.3
      fb-watchman: 2.0.2
      graceful-fs: 4.2.11
      jest-regex-util: 29.6.3
      jest-util: 29.7.0
      jest-worker: 29.7.0
      micromatch: 4.0.8
      walker: 1.0.8
    optionalDependencies:
      fsevents: 2.3.3

  jest-leak-detector@29.7.0:
    dependencies:
      jest-get-type: 29.6.3
      pretty-format: 29.7.0

  jest-matcher-utils@29.7.0:
    dependencies:
      chalk: 4.1.2
      jest-diff: 29.7.0
      jest-get-type: 29.6.3
      pretty-format: 29.7.0

  jest-message-util@29.7.0:
    dependencies:
      '@babel/code-frame': 7.23.5
      '@jest/types': 29.6.3
      '@types/stack-utils': 2.0.3
      chalk: 4.1.2
      graceful-fs: 4.2.11
      micromatch: 4.0.8
      pretty-format: 29.7.0
      slash: 3.0.0
      stack-utils: 2.0.6

  jest-mock@29.7.0:
    dependencies:
      '@jest/types': 29.6.3
      '@types/node': 20.14.10
      jest-util: 29.7.0

  jest-pnp-resolver@1.2.3(jest-resolve@29.7.0):
    optionalDependencies:
      jest-resolve: 29.7.0

  jest-regex-util@29.6.3: {}

  jest-resolve-dependencies@29.7.0:
    dependencies:
      jest-regex-util: 29.6.3
      jest-snapshot: 29.7.0
    transitivePeerDependencies:
      - supports-color

  jest-resolve@29.7.0:
    dependencies:
      chalk: 4.1.2
      graceful-fs: 4.2.11
      jest-haste-map: 29.7.0
      jest-pnp-resolver: 1.2.3(jest-resolve@29.7.0)
      jest-util: 29.7.0
      jest-validate: 29.7.0
      resolve: 1.22.8
      resolve.exports: 2.0.2
      slash: 3.0.0

  jest-runner@29.7.0:
    dependencies:
      '@jest/console': 29.7.0
      '@jest/environment': 29.7.0
      '@jest/test-result': 29.7.0
      '@jest/transform': 29.7.0
      '@jest/types': 29.6.3
      '@types/node': 20.14.10
      chalk: 4.1.2
      emittery: 0.13.1
      graceful-fs: 4.2.11
      jest-docblock: 29.7.0
      jest-environment-node: 29.7.0
      jest-haste-map: 29.7.0
      jest-leak-detector: 29.7.0
      jest-message-util: 29.7.0
      jest-resolve: 29.7.0
      jest-runtime: 29.7.0
      jest-util: 29.7.0
      jest-watcher: 29.7.0
      jest-worker: 29.7.0
      p-limit: 3.1.0
      source-map-support: 0.5.13
    transitivePeerDependencies:
      - supports-color

  jest-runtime@29.7.0:
    dependencies:
      '@jest/environment': 29.7.0
      '@jest/fake-timers': 29.7.0
      '@jest/globals': 29.7.0
      '@jest/source-map': 29.6.3
      '@jest/test-result': 29.7.0
      '@jest/transform': 29.7.0
      '@jest/types': 29.6.3
      '@types/node': 20.14.10
      chalk: 4.1.2
      cjs-module-lexer: 1.2.3
      collect-v8-coverage: 1.0.2
      glob: 7.2.3
      graceful-fs: 4.2.11
      jest-haste-map: 29.7.0
      jest-message-util: 29.7.0
      jest-mock: 29.7.0
      jest-regex-util: 29.6.3
      jest-resolve: 29.7.0
      jest-snapshot: 29.7.0
      jest-util: 29.7.0
      slash: 3.0.0
      strip-bom: 4.0.0
    transitivePeerDependencies:
      - supports-color

  jest-snapshot@29.7.0:
    dependencies:
      '@babel/core': 7.23.6
      '@babel/generator': 7.23.6
      '@babel/plugin-syntax-jsx': 7.23.3(@babel/core@7.23.6)
      '@babel/plugin-syntax-typescript': 7.23.3(@babel/core@7.23.6)
      '@babel/types': 7.23.6
      '@jest/expect-utils': 29.7.0
      '@jest/transform': 29.7.0
      '@jest/types': 29.6.3
      babel-preset-current-node-syntax: 1.0.1(@babel/core@7.23.6)
      chalk: 4.1.2
      expect: 29.7.0
      graceful-fs: 4.2.11
      jest-diff: 29.7.0
      jest-get-type: 29.6.3
      jest-matcher-utils: 29.7.0
      jest-message-util: 29.7.0
      jest-util: 29.7.0
      natural-compare: 1.4.0
      pretty-format: 29.7.0
      semver: 7.5.4
    transitivePeerDependencies:
      - supports-color

  jest-util@29.7.0:
    dependencies:
      '@jest/types': 29.6.3
      '@types/node': 20.14.10
      chalk: 4.1.2
      ci-info: 3.9.0
      graceful-fs: 4.2.11
      picomatch: 2.3.1

  jest-validate@29.7.0:
    dependencies:
      '@jest/types': 29.6.3
      camelcase: 6.3.0
      chalk: 4.1.2
      jest-get-type: 29.6.3
      leven: 3.1.0
      pretty-format: 29.7.0

  jest-watcher@29.7.0:
    dependencies:
      '@jest/test-result': 29.7.0
      '@jest/types': 29.6.3
      '@types/node': 20.14.10
      ansi-escapes: 4.3.2
      chalk: 4.1.2
      emittery: 0.13.1
      jest-util: 29.7.0
      string-length: 4.0.2

  jest-worker@29.7.0:
    dependencies:
      '@types/node': 20.14.10
      jest-util: 29.7.0
      merge-stream: 2.0.0
      supports-color: 8.1.1

  jest@29.7.0(@types/node@20.14.10):
    dependencies:
      '@jest/core': 29.7.0
      '@jest/types': 29.6.3
      import-local: 3.1.0
      jest-cli: 29.7.0(@types/node@20.14.10)
    transitivePeerDependencies:
      - '@types/node'
      - babel-plugin-macros
      - supports-color
      - ts-node

  js-tokens@4.0.0: {}

  js-yaml@3.14.1:
    dependencies:
      argparse: 1.0.10
      esprima: 4.0.1

  js-yaml@4.1.0:
    dependencies:
      argparse: 2.0.1

  jsesc@2.5.2: {}

  json-buffer@3.0.1: {}

  json-parse-even-better-errors@2.3.1: {}

  json-schema-traverse@0.4.1: {}

  json-stable-stringify-without-jsonify@1.0.1: {}

  json5@2.2.3: {}

  keyv@4.5.4:
    dependencies:
      json-buffer: 3.0.1

  kleur@3.0.3: {}

  leven@3.1.0: {}

  levn@0.4.1:
    dependencies:
      prelude-ls: 1.2.1
      type-check: 0.4.0

  lines-and-columns@1.2.4: {}

  linkify-it@5.0.0:
    dependencies:
      uc.micro: 2.1.0

  locate-path@5.0.0:
    dependencies:
      p-locate: 4.1.0

  locate-path@6.0.0:
    dependencies:
      p-locate: 5.0.0

  lodash.memoize@4.1.2: {}

  lodash.merge@4.6.2: {}

  lru-cache@10.4.3: {}

  lru-cache@11.0.0: {}

  lru-cache@5.1.1:
    dependencies:
      yallist: 3.1.1

  lru-cache@6.0.0:
    dependencies:
      yallist: 4.0.0

  lunr@2.3.9: {}

  magic-string@0.30.10:
    dependencies:
      '@jridgewell/sourcemap-codec': 1.4.15

  magic-string@0.30.5:
    dependencies:
      '@jridgewell/sourcemap-codec': 1.4.15

  make-dir@4.0.0:
    dependencies:
      semver: 7.5.4

  make-error@1.3.6: {}

  makeerror@1.0.12:
    dependencies:
      tmpl: 1.0.5

  markdown-it@14.1.0:
    dependencies:
      argparse: 2.0.1
      entities: 4.5.0
      linkify-it: 5.0.0
      mdurl: 2.0.0
      punycode.js: 2.3.1
      uc.micro: 2.1.0

  mdurl@2.0.0: {}

  merge-stream@2.0.0: {}

  merge2@1.4.1: {}

  micromatch@4.0.8:
    dependencies:
      braces: 3.0.3
      picomatch: 2.3.1

  mimic-fn@2.1.0: {}

  minimatch@10.0.1:
    dependencies:
      brace-expansion: 2.0.1

  minimatch@3.1.2:
    dependencies:
      brace-expansion: 1.1.11

  minimatch@5.1.6:
    dependencies:
      brace-expansion: 2.0.1

  minimatch@9.0.5:
    dependencies:
      brace-expansion: 2.0.1

  minipass@7.1.2: {}

  ms@2.1.2: {}

  natural-compare@1.4.0: {}

  node-int64@0.4.0: {}

  node-releases@2.0.14: {}

  normalize-path@3.0.0: {}

  npm-run-path@4.0.1:
    dependencies:
      path-key: 3.1.1

  once@1.4.0:
    dependencies:
      wrappy: 1.0.2

  onetime@5.1.2:
    dependencies:
      mimic-fn: 2.1.0

  optionator@0.9.3:
    dependencies:
      '@aashutoshrathi/word-wrap': 1.2.6
      deep-is: 0.1.4
      fast-levenshtein: 2.0.6
      levn: 0.4.1
      prelude-ls: 1.2.1
      type-check: 0.4.0

  p-limit@2.3.0:
    dependencies:
      p-try: 2.2.0

  p-limit@3.1.0:
    dependencies:
      yocto-queue: 0.1.0

  p-locate@4.1.0:
    dependencies:
      p-limit: 2.3.0

  p-locate@5.0.0:
    dependencies:
      p-limit: 3.1.0

  p-try@2.2.0: {}

  package-json-from-dist@1.0.0: {}

  parent-module@1.0.1:
    dependencies:
      callsites: 3.1.0

  parse-json@5.2.0:
    dependencies:
      '@babel/code-frame': 7.23.5
      error-ex: 1.3.2
      json-parse-even-better-errors: 2.3.1
      lines-and-columns: 1.2.4

  path-exists@4.0.0: {}

  path-is-absolute@1.0.1: {}

  path-key@3.1.1: {}

  path-parse@1.0.7: {}

  path-scurry@1.11.1:
    dependencies:
      lru-cache: 10.4.3
      minipass: 7.1.2

  path-scurry@2.0.0:
    dependencies:
      lru-cache: 11.0.0
      minipass: 7.1.2

  path-type@4.0.0: {}

  picocolors@1.0.0: {}

  picomatch@2.3.1: {}

  pirates@4.0.6: {}

  pkg-dir@4.2.0:
    dependencies:
      find-up: 4.1.0

  prelude-ls@1.2.1: {}

  prettier@3.3.2: {}

  pretty-format@29.7.0:
    dependencies:
      '@jest/schemas': 29.6.3
      ansi-styles: 5.2.0
      react-is: 18.2.0

  prompts@2.4.2:
    dependencies:
      kleur: 3.0.3
      sisteransi: 1.0.5

  punycode.js@2.3.1: {}

  punycode@2.3.1: {}

  pure-rand@6.0.4: {}

  queue-microtask@1.2.3: {}

  react-is@18.2.0: {}

  require-directory@2.1.1: {}

  resolve-cwd@3.0.0:
    dependencies:
      resolve-from: 5.0.0

  resolve-from@4.0.0: {}

  resolve-from@5.0.0: {}

  resolve-pkg-maps@1.0.0: {}

  resolve.exports@2.0.2: {}

  resolve@1.22.8:
    dependencies:
      is-core-module: '@nolyfill/is-core-module@1.0.39'
      path-parse: 1.0.7
      supports-preserve-symlinks-flag: 1.0.0

  reusify@1.0.4: {}

  rimraf@6.0.0:
    dependencies:
      glob: 11.0.0

  rollup-plugin-dts@6.1.1(rollup@4.22.4)(typescript@5.5.3):
    dependencies:
      magic-string: 0.30.10
      rollup: 4.22.4
      typescript: 5.5.3
    optionalDependencies:
      '@babel/code-frame': 7.24.7

  rollup-plugin-esbuild@6.1.1(esbuild@0.19.10)(rollup@4.22.4):
    dependencies:
      '@rollup/pluginutils': 5.1.0(rollup@4.22.4)
      debug: 4.3.4
      es-module-lexer: 1.4.1
      esbuild: 0.19.10
      get-tsconfig: 4.7.2
      rollup: 4.22.4
    transitivePeerDependencies:
      - supports-color

  rollup@4.22.4:
    dependencies:
      '@types/estree': 1.0.5
    optionalDependencies:
      '@rollup/rollup-android-arm-eabi': 4.22.4
      '@rollup/rollup-android-arm64': 4.22.4
      '@rollup/rollup-darwin-arm64': 4.22.4
      '@rollup/rollup-darwin-x64': 4.22.4
      '@rollup/rollup-linux-arm-gnueabihf': 4.22.4
      '@rollup/rollup-linux-arm-musleabihf': 4.22.4
      '@rollup/rollup-linux-arm64-gnu': 4.22.4
      '@rollup/rollup-linux-arm64-musl': 4.22.4
      '@rollup/rollup-linux-powerpc64le-gnu': 4.22.4
      '@rollup/rollup-linux-riscv64-gnu': 4.22.4
      '@rollup/rollup-linux-s390x-gnu': 4.22.4
      '@rollup/rollup-linux-x64-gnu': 4.22.4
      '@rollup/rollup-linux-x64-musl': 4.22.4
      '@rollup/rollup-win32-arm64-msvc': 4.22.4
      '@rollup/rollup-win32-ia32-msvc': 4.22.4
      '@rollup/rollup-win32-x64-msvc': 4.22.4
      fsevents: 2.3.3

  run-parallel@1.2.0:
    dependencies:
      queue-microtask: 1.2.3

  semver@6.3.1: {}

  semver@7.5.4:
    dependencies:
      lru-cache: 6.0.0

  semver@7.6.2: {}

  shebang-command@2.0.0:
    dependencies:
      shebang-regex: 3.0.0

  shebang-regex@3.0.0: {}

  shiki@1.10.3:
    dependencies:
      '@shikijs/core': 1.10.3
      '@types/hast': 3.0.4

  signal-exit@3.0.7: {}

  signal-exit@4.1.0: {}

  sisteransi@1.0.5: {}

  slash@3.0.0: {}

  source-map-support@0.5.13:
    dependencies:
      buffer-from: 1.1.2
      source-map: 0.6.1

  source-map@0.6.1: {}

  sprintf-js@1.0.3: {}

  stack-utils@2.0.6:
    dependencies:
      escape-string-regexp: 2.0.0

  string-length@4.0.2:
    dependencies:
      char-regex: 1.0.2
      strip-ansi: 6.0.1

  string-width@4.2.3:
    dependencies:
      emoji-regex: 8.0.0
      is-fullwidth-code-point: 3.0.0
      strip-ansi: 6.0.1

  string-width@5.1.2:
    dependencies:
      eastasianwidth: 0.2.0
      emoji-regex: 9.2.2
      strip-ansi: 7.1.0

  strip-ansi@6.0.1:
    dependencies:
      ansi-regex: 5.0.1

  strip-ansi@7.1.0:
    dependencies:
      ansi-regex: 6.0.1

  strip-bom@4.0.0: {}

  strip-final-newline@2.0.0: {}

  strip-json-comments@3.1.1: {}

  supports-color@5.5.0:
    dependencies:
      has-flag: 3.0.0

  supports-color@7.2.0:
    dependencies:
      has-flag: 4.0.0

  supports-color@8.1.1:
    dependencies:
      has-flag: 4.0.0

  supports-preserve-symlinks-flag@1.0.0: {}

  test-exclude@6.0.0:
    dependencies:
      '@istanbuljs/schema': 0.1.3
      glob: 7.2.3
      minimatch: 3.1.2

  text-table@0.2.0: {}

  tmpl@1.0.5: {}

  to-fast-properties@2.0.0: {}

  to-regex-range@5.0.1:
    dependencies:
      is-number: 7.0.0

  ts-api-utils@1.3.0(typescript@5.5.3):
    dependencies:
      typescript: 5.5.3

  ts-jest@29.2.1(@babel/core@7.23.6)(@jest/transform@29.7.0)(@jest/types@29.6.3)(babel-jest@29.7.0(@babel/core@7.23.6))(esbuild@0.19.10)(jest@29.7.0(@types/node@20.14.10))(typescript@5.5.3):
    dependencies:
      bs-logger: 0.2.6
      ejs: 3.1.10
      fast-json-stable-stringify: 2.1.0
      jest: 29.7.0(@types/node@20.14.10)
      jest-util: 29.7.0
      json5: 2.2.3
      lodash.memoize: 4.1.2
      make-error: 1.3.6
      semver: 7.5.4
      typescript: 5.5.3
      yargs-parser: 21.1.1
    optionalDependencies:
      '@babel/core': 7.23.6
      '@jest/transform': 29.7.0
      '@jest/types': 29.6.3
      babel-jest: 29.7.0(@babel/core@7.23.6)
      esbuild: 0.19.10

  tslib@2.6.3: {}

  type-check@0.4.0:
    dependencies:
      prelude-ls: 1.2.1

  type-detect@4.0.8: {}

  type-fest@0.21.3: {}

  typedoc-plugin-extras@3.1.0(typedoc@0.26.4(typescript@5.5.3)):
    dependencies:
      typedoc: 0.26.4(typescript@5.5.3)

  typedoc-plugin-katex@0.1.2: {}

  typedoc@0.26.4(typescript@5.5.3):
    dependencies:
      lunr: 2.3.9
      markdown-it: 14.1.0
      minimatch: 9.0.5
      shiki: 1.10.3
      typescript: 5.5.3
      yaml: 2.4.5

  typescript@5.5.3: {}

  uc.micro@2.1.0: {}

  undici-types@5.26.5: {}

  update-browserslist-db@1.0.13(browserslist@4.22.2):
    dependencies:
      browserslist: 4.22.2
      escalade: 3.1.1
      picocolors: 1.0.0

  uri-js@4.4.1:
    dependencies:
      punycode: 2.3.1

  v8-to-istanbul@9.2.0:
    dependencies:
      '@jridgewell/trace-mapping': 0.3.20
      '@types/istanbul-lib-coverage': 2.0.6
      convert-source-map: 2.0.0

  walker@1.0.8:
    dependencies:
      makeerror: 1.0.12

  which@2.0.2:
    dependencies:
      isexe: 2.0.0

  wrap-ansi@7.0.0:
    dependencies:
      ansi-styles: 4.3.0
      string-width: 4.2.3
      strip-ansi: 6.0.1

  wrap-ansi@8.1.0:
    dependencies:
      ansi-styles: 6.2.1
      string-width: 5.1.2
      strip-ansi: 7.1.0

  wrappy@1.0.2: {}

  write-file-atomic@4.0.2:
    dependencies:
      imurmurhash: 0.1.4
      signal-exit: 3.0.7

  y18n@5.0.8: {}

  yallist@3.1.1: {}

  yallist@4.0.0: {}

  yaml@2.4.5: {}

  yargs-parser@21.1.1: {}

  yargs@17.7.2:
    dependencies:
      cliui: 8.0.1
      escalade: 3.1.1
      get-caller-file: 2.0.5
      require-directory: 2.1.1
      string-width: 4.2.3
      y18n: 5.0.8
      yargs-parser: 21.1.1

  yocto-queue@0.1.0: {}


================================================
File: rollup.config.ts
================================================
import {defineConfig} from 'rollup';
import resolve from '@rollup/plugin-node-resolve';
import esbuild from 'rollup-plugin-esbuild';
import commonjs from '@rollup/plugin-commonjs';
import dts from 'rollup-plugin-dts';

export default defineConfig([
    {
        input: {
            index: 'src/fsrs/index.ts',
        },
        output: [
            {
                dir: 'dist',
                entryFileNames: '[name].cjs',
                format: 'cjs',
                sourcemap: true,
                exports: 'named',
                footer: ({exports}) =>
                    exports.length > 0
                        ? 'module.exports = Object.assign(exports.default || {}, exports)'
                        : '',
            },
            {
                dir: 'dist',
                entryFileNames: '[name].mjs',
                format: 'esm',
                sourcemap: true,
            },
        ],
        plugins: [
            resolve({preferBuiltins: true}),
            esbuild({
                target: 'node18.0',
                sourceMap: true,
                minify: true,
            }),
            commonjs(),
        ],
        external: [],
    }, 
    {
        input: 'src/fsrs/index.ts',
        output: {
            file: 'dist/index.umd.js', 
            format: 'umd',
            name: 'FSRS',
            sourcemap: true,
        },
        plugins: [
            resolve(), 
            esbuild({ 
                target: 'es2017',
                minify: true,
                sourceMap: true,
            }),
            commonjs(),
        ],
        external: [],
    },
    {
        input: 'src/fsrs/index.ts',
        output: {
            file: 'dist/index.d.ts',
            format: 'esm'
        },
        plugins: [
            dts({
                // https://github.com/Swatinem/rollup-plugin-dts/issues/143
                compilerOptions: {preserveSymlinks: false},
                respectExternal: true,
            }),
        ],
        external: [],
    },
]);


================================================
File: ts-fsrs-workflow.drawio
================================================
<mxfile host="app.diagrams.net" modified="2024-07-12T16:31:21.977Z" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36" etag="Dg1vk4nbgVSpZjXzIEpq" version="24.6.5" type="device">
  <diagram id="aEf3h9zvOVPK_aX-VWGx" name="TS-FSRS WorkFlow">
    <mxGraphModel dx="1434" dy="738" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="827" pageHeight="1169" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="hIY5gGmRd6_EkSXHLzxa-1" value="&lt;font style=&quot;font-size: 16px;&quot;&gt;&lt;b&gt;TS-FSRS&lt;/b&gt; Workflow&lt;/font&gt;" style="shape=cube;whiteSpace=wrap;html=1;boundedLbl=1;backgroundOutline=1;darkOpacity=0.05;darkOpacity2=0.1;" parent="1" vertex="1">
          <mxGeometry x="537" y="430" width="270" height="80" as="geometry" />
        </mxCell>
        <mxCell id="hIY5gGmRd6_EkSXHLzxa-2" value="&lt;font style=&quot;font-size: 16px;&quot;&gt;&lt;b&gt;NEW&lt;/b&gt;&lt;/font&gt;" style="ellipse;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="20" y="650" width="140" height="80" as="geometry" />
        </mxCell>
        <mxCell id="hIY5gGmRd6_EkSXHLzxa-3" value="&lt;b style=&quot;font-size: 16px;&quot;&gt;Learning/&lt;/b&gt;&lt;br&gt;&lt;b style=&quot;font-size: 16px;&quot;&gt;ReLearning&lt;/b&gt;&lt;br&gt;&lt;font style=&quot;font-size: 14px;&quot;&gt;Ex：1m 5m 10m&lt;/font&gt;" style="ellipse;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="407" y="640" width="140" height="80" as="geometry" />
        </mxCell>
        <mxCell id="hIY5gGmRd6_EkSXHLzxa-4" value="&lt;span style=&quot;font-size: 16px;&quot;&gt;&lt;b&gt;Review&lt;/b&gt;&lt;/span&gt;" style="ellipse;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="407" y="980" width="140" height="80" as="geometry" />
        </mxCell>
        <mxCell id="hIY5gGmRd6_EkSXHLzxa-6" value="&lt;font style=&quot;font-size: 16px;&quot;&gt;&lt;b&gt;Again&lt;/b&gt;&lt;/font&gt;" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#ff5961;strokeColor=none;" parent="1" vertex="1">
          <mxGeometry x="597" y="570" width="70" height="50" as="geometry" />
        </mxCell>
        <mxCell id="hIY5gGmRd6_EkSXHLzxa-7" value="&lt;span style=&quot;font-size: 16px;&quot;&gt;&lt;b&gt;Hard&lt;/b&gt;&lt;/span&gt;" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#ffbf00;strokeColor=none;" parent="1" vertex="1">
          <mxGeometry x="677" y="570" width="70" height="50" as="geometry" />
        </mxCell>
        <mxCell id="hIY5gGmRd6_EkSXHLzxa-8" value="&lt;font style=&quot;font-size: 16px;&quot;&gt;&lt;b&gt;Good&lt;/b&gt;&lt;/font&gt;" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#00b5ff;strokeColor=none;" parent="1" vertex="1">
          <mxGeometry x="757" y="570" width="70" height="50" as="geometry" />
        </mxCell>
        <mxCell id="hIY5gGmRd6_EkSXHLzxa-14" value="" style="curved=1;endArrow=classic;html=1;rounded=0;dashed=1;entryX=-0.015;entryY=0.392;entryDx=0;entryDy=0;exitX=1;exitY=0.5;exitDx=0;exitDy=0;entryPerimeter=0;strokeWidth=2;" parent="1" source="hIY5gGmRd6_EkSXHLzxa-2" target="hIY5gGmRd6_EkSXHLzxa-3" edge="1">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="267" y="680" as="sourcePoint" />
            <mxPoint x="407" y="680" as="targetPoint" />
            <Array as="points">
              <mxPoint x="327" y="530" />
            </Array>
          </mxGeometry>
        </mxCell>
        <mxCell id="hIY5gGmRd6_EkSXHLzxa-15" value="" style="curved=1;endArrow=classic;html=1;rounded=0;dashed=1;strokeWidth=2;" parent="1" edge="1">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="507" y="620" as="sourcePoint" />
            <mxPoint x="557" y="670" as="targetPoint" />
            <Array as="points">
              <mxPoint x="607" y="560" />
            </Array>
          </mxGeometry>
        </mxCell>
        <mxCell id="hIY5gGmRd6_EkSXHLzxa-16" value="&lt;font style=&quot;font-size: 16px;&quot;&gt;First/Current/Next Step&lt;/font&gt;" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" parent="1" vertex="1">
          <mxGeometry x="607" y="620" width="190" height="30" as="geometry" />
        </mxCell>
        <mxCell id="hIY5gGmRd6_EkSXHLzxa-22" value="" style="curved=1;endArrow=classic;html=1;rounded=0;dashed=1;strokeWidth=2;exitX=0.5;exitY=1;exitDx=0;exitDy=0;entryX=0.5;entryY=0;entryDx=0;entryDy=0;" parent="1" source="hIY5gGmRd6_EkSXHLzxa-3" target="hIY5gGmRd6_EkSXHLzxa-4" edge="1">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="487" y="770" as="sourcePoint" />
            <mxPoint x="537" y="820" as="targetPoint" />
            <Array as="points">
              <mxPoint x="397" y="720" />
            </Array>
          </mxGeometry>
        </mxCell>
        <mxCell id="hIY5gGmRd6_EkSXHLzxa-9" value="&lt;font style=&quot;font-size: 16px;&quot;&gt;&lt;b&gt;Easy&lt;/b&gt;&lt;/font&gt;" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#00a96e;strokeColor=none;" parent="1" vertex="1">
          <mxGeometry x="407" y="890" width="70" height="50" as="geometry" />
        </mxCell>
        <mxCell id="hIY5gGmRd6_EkSXHLzxa-19" value="&lt;font style=&quot;font-size: 16px;&quot;&gt;&lt;b&gt;Good&lt;/b&gt;&lt;/font&gt;" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#00b5ff;strokeColor=none;" parent="1" vertex="1">
          <mxGeometry x="407" y="825" width="70" height="50" as="geometry" />
        </mxCell>
        <mxCell id="hIY5gGmRd6_EkSXHLzxa-25" value="" style="curved=1;endArrow=classic;html=1;rounded=0;dashed=1;strokeWidth=2;entryX=1;entryY=1;entryDx=0;entryDy=0;exitX=0.723;exitY=0.017;exitDx=0;exitDy=0;exitPerimeter=0;" parent="1" source="hIY5gGmRd6_EkSXHLzxa-4" target="hIY5gGmRd6_EkSXHLzxa-3" edge="1">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="547" y="960" as="sourcePoint" />
            <mxPoint x="487" y="990" as="targetPoint" />
            <Array as="points">
              <mxPoint x="787" y="740" />
            </Array>
          </mxGeometry>
        </mxCell>
        <mxCell id="hIY5gGmRd6_EkSXHLzxa-24" value="&lt;font style=&quot;font-size: 16px;&quot;&gt;&lt;b&gt;Again&lt;/b&gt;&lt;/font&gt;" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#ff5961;strokeColor=none;" parent="1" vertex="1">
          <mxGeometry x="597" y="820" width="70" height="50" as="geometry" />
        </mxCell>
        <mxCell id="hIY5gGmRd6_EkSXHLzxa-29" value="&lt;b&gt;&lt;font style=&quot;font-size: 16px;&quot;&gt;= Relearning&lt;/font&gt;&lt;/b&gt;" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" parent="1" vertex="1">
          <mxGeometry x="667" y="830" width="120" height="30" as="geometry" />
        </mxCell>
        <mxCell id="hIY5gGmRd6_EkSXHLzxa-32" value="" style="curved=1;endArrow=classic;html=1;rounded=0;dashed=1;strokeWidth=2;exitX=0.5;exitY=1;exitDx=0;exitDy=0;entryX=-0.015;entryY=0.36;entryDx=0;entryDy=0;entryPerimeter=0;" parent="1" source="hIY5gGmRd6_EkSXHLzxa-2" target="hIY5gGmRd6_EkSXHLzxa-4" edge="1">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="177" y="840" as="sourcePoint" />
            <mxPoint x="227" y="890" as="targetPoint" />
            <Array as="points">
              <mxPoint x="157" y="910" />
            </Array>
          </mxGeometry>
        </mxCell>
        <mxCell id="hIY5gGmRd6_EkSXHLzxa-30" value="&lt;font style=&quot;font-size: 16px;&quot;&gt;&lt;b&gt;Easy&lt;/b&gt;&lt;/font&gt;" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#00a96e;strokeColor=none;" parent="1" vertex="1">
          <mxGeometry x="187" y="880" width="70" height="50" as="geometry" />
        </mxCell>
        <mxCell id="hIY5gGmRd6_EkSXHLzxa-33" value="&lt;font style=&quot;font-size: 16px;&quot;&gt;&lt;b&gt;Again&lt;/b&gt;&lt;/font&gt;" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#ff5961;strokeColor=none;" parent="1" vertex="1">
          <mxGeometry x="177" y="590" width="70" height="50" as="geometry" />
        </mxCell>
        <mxCell id="hIY5gGmRd6_EkSXHLzxa-34" value="&lt;span style=&quot;font-size: 16px;&quot;&gt;&lt;b&gt;Hard&lt;/b&gt;&lt;/span&gt;" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#ffbf00;strokeColor=none;" parent="1" vertex="1">
          <mxGeometry x="257" y="590" width="70" height="50" as="geometry" />
        </mxCell>
        <mxCell id="hIY5gGmRd6_EkSXHLzxa-35" value="&lt;font style=&quot;font-size: 16px;&quot;&gt;&lt;b&gt;Good&lt;/b&gt;&lt;/font&gt;" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#00b5ff;strokeColor=none;" parent="1" vertex="1">
          <mxGeometry x="337" y="590" width="70" height="50" as="geometry" />
        </mxCell>
        <mxCell id="hIY5gGmRd6_EkSXHLzxa-36" value="&lt;font style=&quot;font-size: 16px;&quot;&gt;&lt;b&gt;Learning&lt;/b&gt;&lt;/font&gt;" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" parent="1" vertex="1">
          <mxGeometry x="247" y="665" width="90" height="30" as="geometry" />
        </mxCell>
        <mxCell id="hIY5gGmRd6_EkSXHLzxa-37" value="&lt;span style=&quot;font-size: 16px;&quot;&gt;&lt;b&gt;=&lt;/b&gt;&lt;/span&gt;" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;rotation=90;" parent="1" vertex="1">
          <mxGeometry x="276" y="645" width="30" height="30" as="geometry" />
        </mxCell>
        <mxCell id="hIY5gGmRd6_EkSXHLzxa-38" value="" style="curved=1;endArrow=classic;html=1;rounded=0;dashed=1;strokeWidth=2;" parent="1" edge="1">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="527" y="1060" as="sourcePoint" />
            <mxPoint x="430" y="1060" as="targetPoint" />
            <Array as="points">
              <mxPoint x="487" y="1200" />
            </Array>
          </mxGeometry>
        </mxCell>
        <mxCell id="hIY5gGmRd6_EkSXHLzxa-40" value="&lt;span style=&quot;font-size: 16px;&quot;&gt;&lt;b&gt;Hard&lt;/b&gt;&lt;/span&gt;" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#ffbf00;strokeColor=none;" parent="1" vertex="1">
          <mxGeometry x="367" y="1140" width="70" height="50" as="geometry" />
        </mxCell>
        <mxCell id="hIY5gGmRd6_EkSXHLzxa-41" value="&lt;font style=&quot;font-size: 16px;&quot;&gt;&lt;b&gt;Good&lt;/b&gt;&lt;/font&gt;" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#00b5ff;strokeColor=none;" parent="1" vertex="1">
          <mxGeometry x="447" y="1140" width="70" height="50" as="geometry" />
        </mxCell>
        <mxCell id="hIY5gGmRd6_EkSXHLzxa-42" value="&lt;font style=&quot;font-size: 16px;&quot;&gt;&lt;b&gt;Easy&lt;/b&gt;&lt;/font&gt;" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#00a96e;strokeColor=none;" parent="1" vertex="1">
          <mxGeometry x="527" y="1140" width="70" height="50" as="geometry" />
        </mxCell>
        <mxCell id="hIY5gGmRd6_EkSXHLzxa-43" value="&lt;div style=&quot;&quot;&gt;&lt;pre style=&quot;&quot;&gt;&lt;font style=&quot;font-size: 16px;&quot;&gt;&lt;i&gt;Next_Interval&amp;gt;0&lt;/i&gt;&lt;/font&gt;&lt;/pre&gt;&lt;/div&gt;" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" parent="1" vertex="1">
          <mxGeometry x="367" y="780" width="170" height="60" as="geometry" />
        </mxCell>
        <mxCell id="hIY5gGmRd6_EkSXHLzxa-44" value="&lt;div style=&quot;&quot;&gt;&lt;pre style=&quot;&quot;&gt;&lt;pre style=&quot;font-size: 13px; border-color: var(--border-color);&quot;&gt;&lt;pre style=&quot;font-size: 12px; border-color: var(--border-color);&quot;&gt;&lt;span style=&quot;font-size: 13px; background-color: initial; font-family: Helvetica; white-space: normal;&quot;&gt;Next_Interval =&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;pre style=&quot;font-size: 13px; border-color: var(--border-color);&quot;&gt;  enable_fuzz &amp;amp;&amp;amp; ivl&amp;gt;2.5?&lt;/pre&gt;&lt;pre style=&quot;border-color: var(--border-color);&quot;&gt;      &lt;span style=&quot;font-size: 13px;&quot;&gt;fuzz_factor * (max_ivl - min_ivl + 1):&lt;/span&gt;&lt;/pre&gt;&lt;pre style=&quot;border-color: var(--border-color);&quot;&gt;&lt;span style=&quot;font-size: 13px;&quot;&gt;     &lt;/span&gt;ivl&lt;/pre&gt;&lt;pre style=&quot;border-color: var(--border-color);&quot;&gt;&lt;hr&gt;&lt;/pre&gt;&lt;pre style=&quot;border-color: var(--border-color);&quot;&gt; get_fuzz_range(ivl, elapsed, maximum_interval) =&amp;gt;&lt;br&gt;&lt;/pre&gt;&lt;pre style=&quot;border-color: var(--border-color);&quot;&gt;    return  { min_ivl, max_ivl }&lt;br&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;/div&gt;" style="whiteSpace=wrap;html=1;shape=mxgraph.basic.document;align=left;" parent="1" vertex="1">
          <mxGeometry y="1010" width="320" height="180" as="geometry" />
        </mxCell>
        <mxCell id="hIY5gGmRd6_EkSXHLzxa-45" value="&lt;span style=&quot;orphans: 2; text-align: start; text-indent: 0px; widows: 2; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; float: none; display: inline !important; font-size: 16px;&quot;&gt;Rollback the previous &lt;br&gt;review operation.&lt;br&gt;&lt;br&gt;&lt;/span&gt;" style="text;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="1004.5" y="750" width="170" height="50" as="geometry" />
        </mxCell>
        <mxCell id="hIY5gGmRd6_EkSXHLzxa-50" value="" style="curved=1;endArrow=classic;html=1;rounded=0;dashed=1;strokeWidth=2;exitX=1;exitY=0.5;exitDx=0;exitDy=0;exitPerimeter=0;entryX=1;entryY=0.5;entryDx=0;entryDy=0;entryPerimeter=0;fillColor=#dae8fc;strokeColor=#6c8ebf;" parent="1" source="hIY5gGmRd6_EkSXHLzxa-53" target="hIY5gGmRd6_EkSXHLzxa-52" edge="1">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="1001.5" y="910" as="sourcePoint" />
            <mxPoint x="1004.5" y="770" as="targetPoint" />
            <Array as="points">
              <mxPoint x="1080" y="860" />
              <mxPoint x="1070" y="860" />
              <mxPoint x="1070" y="870" />
            </Array>
          </mxGeometry>
        </mxCell>
        <mxCell id="hIY5gGmRd6_EkSXHLzxa-52" value="&lt;font style=&quot;font-size: 16px;&quot;&gt;Status of the previous card&lt;/font&gt;" style="shape=card;whiteSpace=wrap;html=1;fillColor=#f5f5f5;fontColor=#333333;strokeColor=#666666;" parent="1" vertex="1">
          <mxGeometry x="871.5" y="700" width="103" height="130" as="geometry" />
        </mxCell>
        <mxCell id="hIY5gGmRd6_EkSXHLzxa-53" value="&lt;font style=&quot;font-size: 16px;&quot;&gt;Reviewed card&lt;/font&gt;" style="shape=card;whiteSpace=wrap;html=1;fillColor=#d5e8d4;strokeColor=#82b366;" parent="1" vertex="1">
          <mxGeometry x="870" y="850" width="103" height="130" as="geometry" />
        </mxCell>
        <mxCell id="hIY5gGmRd6_EkSXHLzxa-60" value="&lt;font style=&quot;font-size: 16px;&quot;&gt;fsrs.rollback&lt;br&gt;(reviewedCard, currentLog)&lt;/font&gt;" style="text;html=1;align=left;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" parent="1" vertex="1">
          <mxGeometry x="1070" y="825" width="220" height="50" as="geometry" />
        </mxCell>
        <mxCell id="hIY5gGmRd6_EkSXHLzxa-61" value="&lt;font style=&quot;font-size: 16px;&quot;&gt;New card&lt;br&gt;&lt;/font&gt;" style="shape=card;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="870" y="1000" width="103" height="130" as="geometry" />
        </mxCell>
        <mxCell id="hIY5gGmRd6_EkSXHLzxa-62" value="" style="curved=1;endArrow=classic;html=1;rounded=0;dashed=1;strokeWidth=2;entryX=1;entryY=0.5;entryDx=0;entryDy=0;entryPerimeter=0;fillColor=#f8cecc;strokeColor=#b85450;exitX=1;exitY=0.5;exitDx=0;exitDy=0;exitPerimeter=0;" parent="1" source="hIY5gGmRd6_EkSXHLzxa-53" target="hIY5gGmRd6_EkSXHLzxa-61" edge="1">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="994.5" y="940" as="sourcePoint" />
            <mxPoint x="984.5" y="775" as="targetPoint" />
            <Array as="points">
              <mxPoint x="1045" y="960" />
              <mxPoint x="1070" y="990" />
            </Array>
          </mxGeometry>
        </mxCell>
        <mxCell id="hIY5gGmRd6_EkSXHLzxa-63" value="&lt;span style=&quot;orphans: 2; text-align: start; text-indent: 0px; widows: 2; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; float: none; display: inline !important;&quot;&gt;&lt;font style=&quot;font-size: 16px;&quot;&gt;Revert to a new card.&lt;/font&gt;&lt;/span&gt;" style="text;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="990" y="1050" width="200" height="50" as="geometry" />
        </mxCell>
        <mxCell id="hIY5gGmRd6_EkSXHLzxa-64" value="&lt;font style=&quot;font-size: 16px;&quot;&gt;fsrs.forget&lt;br&gt;(reviewedCard,now,resetCount=false&lt;span style=&quot;background-color: initial;&quot;&gt;)&lt;/span&gt;&lt;/font&gt;" style="text;html=1;align=left;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" parent="1" vertex="1">
          <mxGeometry x="1070" y="960" width="290" height="50" as="geometry" />
        </mxCell>
        <mxCell id="hIY5gGmRd6_EkSXHLzxa-65" value="&lt;div style=&quot;&quot;&gt;&lt;pre style=&quot;&quot;&gt;&lt;font style=&quot;font-size: 16px;&quot;&gt;&lt;i&gt;Next_Interval&amp;gt;0&lt;/i&gt;&lt;/font&gt;&lt;/pre&gt;&lt;/div&gt;" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" parent="1" vertex="1">
          <mxGeometry x="17" y="870" width="170" height="60" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>


================================================
File: tsconfig.json
================================================
{
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig to read more about this file */

    /* Projects */
    // "incremental": true,                              /* Save .tsbuildinfo files to allow for incremental compilation of projects. */
    // "composite": true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */
    // "tsBuildInfoFile": "./.tsbuildinfo",              /* Specify the path to .tsbuildinfo incremental compilation file. */
    // "disableSourceOfProjectReferenceRedirect": true,  /* Disable preferring source files instead of declaration files when referencing composite projects. */
    // "disableSolutionSearching": true,                 /* Opt a project out of multi-project reference checking when editing. */
    // "disableReferencedProjectLoad": true,             /* Reduce the number of projects loaded automatically by TypeScript. */

    /* Language and Environment */
    "target": "ESNext",                                  /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */
    "lib": ["esnext", "dom", "dom.iterable"],                                       /* Specify a set of bundled library declaration files that describe the target runtime environment. */
    // "jsx": "preserve",                                /* Specify what JSX code is generated. */
    // "experimentalDecorators": true,                   /* Enable experimental support for TC39 stage 2 draft decorators. */
    // "emitDecoratorMetadata": true,                    /* Emit design-type metadata for decorated declarations in source files. */
    // "jsxFactory": "",                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'. */
    // "jsxFragmentFactory": "",                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */
    // "jsxImportSource": "",                            /* Specify module specifier used to import the JSX factory functions when using 'jsx: react-jsx*'. */
    // "reactNamespace": "",                             /* Specify the object invoked for 'createElement'. This only applies when targeting 'react' JSX emit. */
    // "noLib": true,                                    /* Disable including any library files, including the default lib.d.ts. */
    // "useDefineForClassFields": true,                  /* Emit ECMAScript-standard-compliant class fields. */
    // "moduleDetection": "auto",                        /* Control what method is used to detect module-format JS files. */

    /* Modules */
    "module": "ESNext",                                /* Specify what module code is generated. */
    // "rootDir": "./",                                  /* Specify the root folder within your source files. */
     "moduleResolution": "node",                       /* Specify how TypeScript looks up a file from a given module specifier. */
    // "baseUrl": "./",                                  /* Specify the base directory to resolve non-relative module names. */
    // "paths": {},                                      /* Specify a set of entries that re-map imports to additional lookup locations. */
    // "rootDirs": [],                                   /* Allow multiple folders to be treated as one when resolving modules. */
    // "typeRoots": [],                                  /* Specify multiple folders that act like './node_modules/@types'. */
    // "types": [],                                      /* Specify type package names to be included without being referenced in a source file. */
     "allowUmdGlobalAccess": true,                     /* Allow accessing UMD globals from modules. */
    // "moduleSuffixes": [],                             /* List of file name suffixes to search when resolving a module. */
    // "resolveJsonModule": true,                        /* Enable importing .json files. */
    // "noResolve": true,                                /* Disallow 'import's, 'require's or '<reference>'s from expanding the number of files TypeScript should add to a project. */

    /* JavaScript Support */
     "allowJs": true,                                  /* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */
     "checkJs": true,                                  /* Enable error reporting in type-checked JavaScript files. */
    // "maxNodeModuleJsDepth": 1,                        /* Specify the maximum folder depth used for checking JavaScript files from 'node_modules'. Only applicable with 'allowJs'. */

    /* Emit */
     "declaration": true,                              /* Generate .d.ts files from TypeScript and JavaScript files in your project. */
     "declarationMap": true,                           /* Create sourcemaps for d.ts files. */
     "emitDeclarationOnly": true,                      /* Only output d.ts files and not JavaScript files. */
     "sourceMap": true,                                /* Create source map files for emitted JavaScript files. */
    // "outFile": "./",                                  /* Specify a file that bundles all outputs into one JavaScript file. If 'declaration' is true, also designates a file that bundles all .d.ts output. */
     "outDir": "./dist",                                   /* Specify an output folder for all emitted files. */
    // "removeComments": true,                           /* Disable emitting comments. */
    // "noEmit": true,                                   /* Disable emitting files from a compilation. */
    // "importHelpers": true,                            /* Allow importing helper functions from tslib once per project, instead of including them per-file. */
    // "importsNotUsedAsValues": "remove",               /* Specify emit/checking behavior for imports that are only used for types. */
    // "downlevelIteration": true,                       /* Emit more compliant, but verbose and less performant JavaScript for iteration. */
    // "sourceRoot": "",                                 /* Specify the root path for debuggers to find the reference source code. */
    // "mapRoot": "",                                    /* Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSourceMap": true,                          /* Include sourcemap files inside the emitted JavaScript. */
    // "inlineSources": true,                            /* Include source code in the sourcemaps inside the emitted JavaScript. */
    // "emitBOM": true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */
    // "newLine": "crlf",                                /* Set the newline character for emitting files. */
    // "stripInternal": true,                            /* Disable emitting declarations that have '@internal' in their JSDoc comments. */
    // "noEmitHelpers": true,                            /* Disable generating custom helper functions like '__extends' in compiled output. */
    // "noEmitOnError": true,                            /* Disable emitting files if any type checking errors are reported. */
    // "preserveConstEnums": true,                       /* Disable erasing 'const enum' declarations in generated code. */
    // "declarationDir": "./",                           /* Specify the output directory for generated declaration files. */
    // "preserveValueImports": true,                     /* Preserve unused imported values in the JavaScript output that would otherwise be removed. */

    /* Interop Constraints */
    // "isolatedModules": true,                          /* Ensure that each file can be safely transpiled without relying on other imports. */
     "allowSyntheticDefaultImports": true,             /* Allow 'import x from y' when a module doesn't have a default export. */
    "esModuleInterop": true,                             /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */
    // "preserveSymlinks": true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */
    "forceConsistentCasingInFileNames": true,            /* Ensure that casing is correct in imports. */

    /* Type Checking */
    "strict": true,                                      /* Enable all strict type-checking options. */
    // "noImplicitAny": true,                            /* Enable error reporting for expressions and declarations with an implied 'any' type. */
    // "strictNullChecks": true,                         /* When type checking, take into account 'null' and 'undefined'. */
    // "strictFunctionTypes": true,                      /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */
    // "strictBindCallApply": true,                      /* Check that the arguments for 'bind', 'call', and 'apply' methods match the original function. */
    // "strictPropertyInitialization": true,             /* Check for class properties that are declared but not set in the constructor. */
    // "noImplicitThis": true,                           /* Enable error reporting when 'this' is given the type 'any'. */
    // "useUnknownInCatchVariables": true,               /* Default catch clause variables as 'unknown' instead of 'any'. */
    // "alwaysStrict": true,                             /* Ensure 'use strict' is always emitted. */
    // "noUnusedLocals": true,                           /* Enable error reporting when local variables aren't read. */
    // "noUnusedParameters": true,                       /* Raise an error when a function parameter isn't read. */
    // "exactOptionalPropertyTypes": true,               /* Interpret optional property types as written, rather than adding 'undefined'. */
    // "noImplicitReturns": true,                        /* Enable error reporting for codepaths that do not explicitly return in a function. */
    // "noFallthroughCasesInSwitch": true,               /* Enable error reporting for fallthrough cases in switch statements. */
    // "noUncheckedIndexedAccess": true,                 /* Add 'undefined' to a type when accessed using an index. */
    // "noImplicitOverride": true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */
    // "noPropertyAccessFromIndexSignature": true,       /* Enforces using indexed accessors for keys declared using an indexed type. */
    // "allowUnusedLabels": true,                        /* Disable error reporting for unused labels. */
    // "allowUnreachableCode": true,                     /* Disable error reporting for unreachable code. */

    /* Completeness */
    // "skipDefaultLibCheck": true,                      /* Skip type checking .d.ts files that are included with TypeScript. */
    "skipLibCheck": true                                 /* Skip type checking all .d.ts files. */
  },
  "include": ["src"],
  "exclude": ["node_modules", "**/__tests__/*"],
  "detectCycles": true,
  "ts-node": {
    "experimentalSpecifierResolution": "node",
    "transpileOnly": true, // you can specify ts-node options here
    "compilerOptions": {
      "module": "commonjs" // you can also override compilerOptions.  Only ts-node will use these overrides
    }
  },
}


================================================
File: typedoc.json
================================================
{
  "$schema": "https://typedoc.org/schema.json",
  "name": "TS-FSRS",
  "titleLink": "https://open-spaced-repetition.github.io/ts-fsrs/",
  "entryPoints": [
    "./src/fsrs"
  ],
  "out": "./docs",
  "navigationLinks": {
    "Docs": "https://open-spaced-repetition.github.io/ts-fsrs/",
    "GitHub": "https://github.com/open-spaced-repetition/ts-fsrs"
  },
  "plugin": [
    "typedoc-plugin-katex",
    "typedoc-plugin-extras"
  ],
  "visibilityFilters":{
    "protected": false,
    "private": false,
    "inherited": false,
    "external": false
  }
}


================================================
File: .eslintrc.json
================================================
{
    "env": {
        "browser": true,
        "node": true,
        "amd": true,
        "es2021": true
    },
    "extends": [
        "eslint:recommended",
        "plugin:@typescript-eslint/recommended",
        "prettier"
    ],
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
        "ecmaVersion": "latest",
        "sourceType": "module"
    },
    "plugins": [
        "@typescript-eslint"
    ],
    "rules": {
        "@typescript-eslint/ban-ts-comment": "off",
        "@typescript-eslint/no-unused-vars": "off",
        "@typescript-eslint/no-namespace": "warn"
    }
}


================================================
File: .npmignore
================================================
src
.gitgnore
test
.eslintrc.json
jest.config.js
.prettierrc.json

================================================
File: .nvmrc
================================================
v18.20.3

================================================
File: .prettierrc.json
================================================
{
    "trailingComma": "es5",
    "tabWidth": 2,
    "semi": false,
    "singleQuote": true
}

================================================
File: __tests__/FSRSV5.test.ts
================================================
import {
  fsrs,
  Rating,
  FSRS,
  createEmptyCard,
  State,
  Grade,
  Grades,
} from '../src/fsrs'

describe('FSRS V5 ', () => {
  const w = [
    0.40255, 1.18385, 3.173, 15.69105, 7.1949, 0.5345, 1.4604, 0.0046, 1.54575,
    0.1192, 1.01925, 1.9395, 0.11, 0.29605, 2.2698, 0.2315, 2.9898, 0.51655,
    0.6621,
  ]
  const f: FSRS = fsrs({ w })
  it('ivl_history', () => {
    let card = createEmptyCard()
    let now = new Date(2022, 11, 29, 12, 30, 0, 0)
    let scheduling_cards = f.repeat(card, now)
    const ratings: Grade[] = [
      Rating.Good,
      Rating.Good,
      Rating.Good,
      Rating.Good,
      Rating.Good,
      Rating.Good,
      Rating.Again,
      Rating.Again,
      Rating.Good,
      Rating.Good,
      Rating.Good,
      Rating.Good,
      Rating.Good,
    ]
    const ivl_history: number[] = []
    for (const rating of ratings) {
      for (const check of Grades) {
        const rollbackCard = f.rollback(
          scheduling_cards[check].card,
          scheduling_cards[check].log
        )
        expect(rollbackCard).toEqual(card)
        expect(scheduling_cards[check].log.elapsed_days).toEqual(
          card.last_review ? now.diff(card.last_review as Date, 'days') : 0
        )
        const _f = fsrs({ w })
        const next = _f.next(card, now, check)
        expect(scheduling_cards[check]).toEqual(next)
      }
      card = scheduling_cards[rating].card
      const ivl = card.scheduled_days
      ivl_history.push(ivl)
      now = card.due
      scheduling_cards = f.repeat(card, now)
    }
    expect(ivl_history).toEqual([
      0, 4, 14, 44, 125, 328, 0, 0, 7, 16, 34, 71, 142,
    ])
  })

  it('memory state', () => {
    let card = createEmptyCard()
    let now = new Date(2022, 11, 29, 12, 30, 0, 0)
    let scheduling_cards = f.repeat(card, now)
    const ratings: Grade[] = [
      Rating.Again,
      Rating.Good,
      Rating.Good,
      Rating.Good,
      Rating.Good,
      Rating.Good,
    ]
    const intervals: number[] = [0, 0, 1, 3, 8, 21]
    for (const [index, rating] of ratings.entries()) {
      card = scheduling_cards[rating].card
      now = new Date(now.getTime() + intervals[index] * 24 * 60 * 60 * 1000)
      scheduling_cards = f.repeat(card, now)
    }

    const { stability, difficulty } = scheduling_cards[Rating.Good].card
    expect(stability).toBeCloseTo(48.4848, 4)
    expect(difficulty).toBeCloseTo(7.0866, 4)
  })

  it('first repeat', () => {
    const card = createEmptyCard()
    const now = new Date(2022, 11, 29, 12, 30, 0, 0)
    const scheduling_cards = f.repeat(card, now)

    const stability: number[] = []
    const difficulty: number[] = []
    const elapsed_days: number[] = []
    const scheduled_days: number[] = []
    const reps: number[] = []
    const lapses: number[] = []
    const states: State[] = []
    for (const item of scheduling_cards) {
      const first_card = item.card
      stability.push(first_card.stability)
      difficulty.push(first_card.difficulty)
      reps.push(first_card.reps)
      lapses.push(first_card.lapses)
      elapsed_days.push(first_card.elapsed_days)
      scheduled_days.push(first_card.scheduled_days)
      states.push(first_card.state)
    }
    expect(stability).toEqual([0.40255, 1.18385, 3.173, 15.69105])
    expect(difficulty).toEqual([7.1949, 6.48830527, 5.28243442, 3.22450159])
    expect(reps).toEqual([1, 1, 1, 1])
    expect(lapses).toEqual([0, 0, 0, 0])
    expect(elapsed_days).toEqual([0, 0, 0, 0])
    expect(scheduled_days).toEqual([0, 0, 0, 16])
    expect(states).toEqual([
      State.Learning,
      State.Learning,
      State.Learning,
      State.Review,
    ])
  })
})

describe('get retrievability', () => {
  const fsrs = new FSRS({})
  test('return 0.00% for new cards', () => {
    const card = createEmptyCard()
    const now = new Date()
    const expected = '0.00%'
    expect(fsrs.get_retrievability(card, now)).toBe(expected)
  })

  test('return retrievability percentage for review cards', () => {
    const card = createEmptyCard('2023-12-01 04:00:00')
    const sc = fsrs.repeat(card, '2023-12-01 04:05:00')
    const r = ['100.00%', '100.00%', '100.00%', '89.83%']
    const r_number = [1, 1, 1, 0.89832125]
    Grades.forEach((grade, index) => {
      expect(fsrs.get_retrievability(sc[grade].card, sc[grade].card.due)).toBe(
        r[index]
      )
      expect(
        fsrs.get_retrievability(sc[grade].card, sc[grade].card.due, false)
      ).toBe(r_number[index])
    })
  })

  test('fake the current system time', () => {
    const card = createEmptyCard('2023-12-01 04:00:00')
    const sc = fsrs.repeat(card, '2023-12-01 04:05:00')
    const r = ['100.00%', '100.00%', '100.00%', '89.83%']
    const r_number = [1, 1, 1, 0.89832125]
    jest.useFakeTimers()
    Grades.forEach((grade, index) => {
      jest.setSystemTime(sc[grade].card.due)
      expect(fsrs.get_retrievability(sc[grade].card)).toBe(r[index])
      expect(fsrs.get_retrievability(sc[grade].card, undefined, false)).toBe(
        r_number[index]
      )
    })
    jest.useRealTimers()
  })

  test('loop Again', () => {
    const fsrs = new FSRS({})
    let card = createEmptyCard()
    let now = new Date()
    let i = 0
    while (i < 5) {
      card = fsrs.next(card, now, Rating.Again).card
      now = card.due
      i++

      const r = fsrs.get_retrievability(card, now, false)
      console.debug(`Loop ${i}: s:${card.stability} r:${r} `)

      expect(r).not.toBeNaN()
    }
  })
})

describe('fsrs.next method', () => {
  const fsrs = new FSRS({})
  test('invalid grade', () => {
    const card = createEmptyCard()
    const now = new Date()
    const g = Rating.Manual as unknown as Grade
    expect(() => fsrs.next(card, now, g)).toThrow(
      'Cannot review a manual rating'
    )
  })
})


================================================
File: __tests__/alea.test.ts
================================================
// Import the Alea generator and additional required elements
import { alea } from '../src/fsrs/alea' // Adjust the import path according to your project structure

describe('Alea PRNG Tests', () => {
  it('make sure two seeded values are the same', () => {
    const prng1 = alea(1)
    const prng2 = alea(3)
    const prng3 = alea(1)

    const a = prng1.state()
    const b = prng2.state()
    const c = prng3.state()

    expect(a).toEqual(c)
    expect(a).not.toEqual(b)
  })

  it('Known values test', () => {
    const seed = 12345
    const generator = alea(seed)
    const results = Array.from({ length: 3 }, () => generator())
    expect(results).toEqual([
      0.27138191112317145, 0.19615925149992108, 0.6810678059700876,
    ])
  })

  it('should generate an int32', () => {
    const generator = alea('int32test')
    const int32 = generator.int32()
    expect(int32).toBeLessThanOrEqual(0xffffffff)
    expect(int32).toBeGreaterThanOrEqual(0)
  })

  it('Uint32 test', () => {
    const seed = 12345
    const generator = alea(seed)
    const results = Array.from({ length: 3 }, () => generator.int32())
    expect(results).toEqual([1165576433, 842497570, -1369803343])
  })

  it('should generate a double', () => {
    const generator = alea('doubletest')
    const double = generator.double()
    expect(double).toBeGreaterThanOrEqual(0)
    expect(double).toBeLessThan(1)
  })

  it('Fract53 test', () => {
    const seed = 12345
    const generator = alea(seed)
    const results = Array.from({ length: 3 }, () => generator.double())
    expect(results).toEqual([
      0.27138191116884325, 0.6810678062004586, 0.3407802057882554,
    ])
  })

  it('Import with Alea.importState()', () => {
    const prng1 = alea(Math.random())

    // generate a few numbers
    prng1()
    prng1()
    prng1()

    const e = prng1.state()

    const prng4 = alea().importState(e)
    expect(prng4.state()).toEqual(prng1.state())
    for (let i = 0; i < 10000; i++) {
      const a = prng1()
      const b = prng4()
      expect(a).toEqual(b)
      expect(a).toBeGreaterThanOrEqual(0)
      expect(a).toBeLessThan(1)
      expect(b).toBeLessThan(1)
    }
  })
  it('should have reproducible state', () => {
    const generator = alea('statetest')
    const state1 = generator.state()
    const next1 = generator()
    const state2 = generator.state()
    const next2 = generator()

    expect(state1.s0).not.toEqual(state2.s0)
    expect(state1.s1).not.toEqual(state2.s1)
    expect(state1.s2).not.toEqual(state2.s2)
    expect(next1).not.toEqual(next2)
  })

  it('s2<0', () => {
    const seed = 12345
    const generator = alea(seed).importState({
      c: 0,
      s0: 0,
      s1: 0,
      s2: -0.5,
    })
    const results = generator()
    const state = generator.state()
    expect(results).toEqual(0)
    expect(state).toEqual({
      c: 0,
      s0: 0,
      s1: -0.5,
      s2: 0,
    })
  })

  it('seed 1727015666066', () => {
    const seed = '1727015666066' // constructor s0 = -0.4111432870849967 +1
    const generator = alea(seed)
    const results = generator()
    const state = generator.state()
    expect(results).toEqual(0.6320083506871015)
    expect(state).toEqual({
      c: 1828249,
      s0: 0.5888567129150033,
      s1: 0.5074866858776659,
      s2: 0.6320083506871015,
    })
  })

  it('seed Seedp5fxh9kf4r0', () => {
    const seed = 'Seedp5fxh9kf4r0' // constructor s1 = -0.3221628828905523 +1
    const generator = alea(seed)
    const results = generator()
    const state = generator.state()
    expect(results).toEqual(0.14867847645655274)
    expect(state).toEqual({
      c: 1776946,
      s0: 0.6778371171094477,
      s1: 0.0770602801349014,
      s2: 0.14867847645655274,
    })
  })

  it('seed NegativeS2Seed', () => {
    const seed = 'NegativeS2Seed' // constructor s2 = -0.07867425470612943 +1
    const generator = alea(seed)
    const results = generator()
    const state = generator.state()
    expect(results).toEqual(0.830770346801728)
    expect(state).toEqual({
      c: 952982,
      s0: 0.25224833423271775,
      s1: 0.9213257452938706,
      s2: 0.830770346801728,
    })
  })
})


================================================
File: __tests__/algorithm.test.ts
================================================
import {
  DECAY,
  default_enable_fuzz,
  default_maximum_interval,
  default_request_retention,
  default_w,
  FACTOR,
  fsrs,
  FSRS,
  FSRSAlgorithm,
  generatorParameters,
  get_fuzz_range,
  Grades,
  Rating,
} from '../src/fsrs'
import Decimal from 'decimal.js'

describe('FACTOR[DECAY = -0.5]', () => {
  it('FACTOR', () => {
    expect(19 / 81).toEqual(new Decimal(19).div(81).toNumber())
    expect(FACTOR).toEqual(new Decimal(19).div(81).toNumber())
    expect(FACTOR).toEqual(
      new Decimal(0.9).pow(new Decimal(1).div(DECAY)).sub(1).toNumber()
    )
    expect(new Decimal(19).div(81).toNumber()).toEqual(
      new Decimal(0.9).pow(new Decimal(1).div(DECAY)).sub(1).toNumber()
    )
  })
})

describe('forgetting_curve', () => {
  const params = generatorParameters()
  //w=[
  //   0.5701, 1.4436, 4.1386, 10.9355, 5.1443, 1.2006, 0.8627, 0.0362, 1.629,
  //   0.1342, 1.0166, 2.1174, 0.0839, 0.3204, 1.4676, 0.219, 2.8237,
  // ];
  const algorithm: FSRSAlgorithm = new FSRSAlgorithm(params)

  function forgetting_curve(elapsed_days: number, stability: number): number {
    return +new Decimal(
      new Decimal(1)
        .add(new Decimal(FACTOR).mul(elapsed_days).div(stability))
        .pow(DECAY)
    ).toFixed(8)
  }

  const delta_t = [0, 1, 2, 3, 4, 5]
  const s = [1.0, 2.0, 3.0, 4.0, 4.0, 2.0]
  const collection: number[] = []
  const expected: number[] = []
  it('retrievability', () => {
    for (let i = 0; i < delta_t.length; i++) {
      collection.push(algorithm.forgetting_curve(delta_t[i], s[i]))
      expected.push(forgetting_curve(delta_t[i], s[i]))
    }
    expect(collection).toEqual(expected)
    expect(collection).toEqual([
      1.0, 0.946059, 0.9299294, 0.92216794, 0.9, 0.79394596,
    ])
  })
})

describe('init_ds', () => {
  const params = generatorParameters()
  const algorithm: FSRSAlgorithm = new FSRSAlgorithm(params)
  it('initial stability ', () => {
    const collection: number[] = []
    Grades.forEach((grade) => {
      const s = algorithm.init_stability(grade)
      collection.push(s)
    })
    expect(collection).toEqual([
      params.w[0],
      params.w[1],
      params.w[2],
      params.w[3],
    ])
  })
  it('initial difficulty ', () => {
    const collection: number[] = []
    const expected: number[] = []
    Grades.forEach((grade) => {
      const d = algorithm.init_difficulty(grade)
      collection.push(d)
      expected.push(
        +new Decimal(params.w[4])
          .sub(new Decimal(params.w[5]).mul(new Decimal(grade).sub(1)).exp())
          .add(1)
          .toFixed(8)
      )
    })
    expect(collection).toEqual(expected)
    // e^0 = 1
    // again: w[4]- e^(0*w[5]) +1
    // hard: w[4]-e^(1*w[5]) +1
    // good: w[4]-e^(2*w[5]) +1
    // easy: w[4]-e^(3*w[5]) +1
  })
})

describe('next_ds', () => {
  const params = generatorParameters()
  //w=[
  //   0.5701, 1.4436, 4.1386, 10.9355, 5.1443, 1.2006, 0.8627, 0.0362, 1.629,
  //   0.1342, 1.0166, 2.1174, 0.0839, 0.3204, 1.4676, 0.219, 2.8237,
  // ];
  const algorithm: FSRSAlgorithm = new FSRSAlgorithm(params)
  it('next_difficulty', () => {
    function next_d(d: number, g: number) {
      function mean_reversion(init: number, current: number): number {
        const f1 = new Decimal(params.w[7]).mul(init)
        const f2 = new Decimal(1).sub(new Decimal(params.w[7])).mul(current)
        return f1.add(f2).toNumber()
      }

      function constrain_difficulty(difficulty: number): number {
        return Math.min(Math.max(+new Decimal(difficulty).toFixed(8), 1), 10)
      }

      function init_difficulty(g: number) {
        return +new Decimal(params.w[4])
          .sub(new Decimal(params.w[5]).mul(new Decimal(g).sub(1)).exp())
          .add(1)
          .toFixed(8)
      }

      function linear_damping(delta_d: number, old_d: number): number {
        return +new Decimal(delta_d)
          .mul(new Decimal(10).sub(old_d))
          .div(9)
          .toFixed(8)
      }
      const delta_d = new Decimal(-params.w[6]).mul(new Decimal(g - 3))
      const next_d = +new Decimal(d)
        .add(linear_damping(delta_d.toNumber(), d))
        .toFixed(8)
      return constrain_difficulty(mean_reversion(init_difficulty(4), next_d))
    }

    const collection: number[] = []
    const expected: number[] = []
    Grades.forEach((grade) => {
      const d = algorithm.next_difficulty(5.0, grade)
      const expected_d = next_d(5.0, grade)
      collection.push(d)
      expected.push(expected_d)
    })
    expect(collection).toEqual([6.60703511, 5.7994339, 4.99183271, 4.18423151])
    expect(collection).toEqual(expected)
  })

  it('next_stability', () => {
    function next_forget_stability(d: number, s: number, r: number): number {
      return +new Decimal(params.w[11])
        .mul(new Decimal(d).pow(-params.w[12]))
        .mul(new Decimal(s + 1).pow(params.w[13]).sub(1))
        .mul(new Decimal(Math.exp((1 - r) * params.w[14])))
        .toFixed(8)
    }

    function next_recall_stability(
      d: number,
      s: number,
      r: number,
      g: number
    ): number {
      const hard_penalty = Rating.Hard === g ? params.w[15] : 1
      const easy_bound = Rating.Easy === g ? params.w[16] : 1
      return +new Decimal(s)
        .mul(
          new Decimal(1).add(
            new Decimal(params.w[8])
              .exp()
              .mul(new Decimal(11).sub(d))
              .mul(new Decimal(s).pow(-params.w[9]))
              .mul(
                new Decimal(params.w[10])
                  .mul(new Decimal(1).sub(r))
                  .exp()
                  .sub(1)
              )
              .mul(hard_penalty)
              .mul(easy_bound)
          )
        )
        .toFixed(8)
    }

    function next_short_term_stability(s: number, g: number) {
      return +new Decimal(s)
        .mul(
          new Decimal(params.w[17])
            .mul(new Decimal(g).sub(3).add(params.w[18]))
            .exp()
        )
        .toFixed(8)
    }

    function next_s(d: number, s: number, r: number, g: number) {
      if (g < 1 || g > 4) {
        throw new Error('Invalid grade')
      } else if (g === Rating.Again) {
        return next_forget_stability(d, s, r)
      } else {
        return next_recall_stability(d, s, r, g)
      }
    }

    const s_recall_collection: number[] = []
    const s_fail_collection: number[] = []
    const s_short_collection: number[] = []
    const next_s_collection: number[] = []

    const expected_s_recall: number[] = []
    const expected_s_fail: number[] = []
    const expected_next_s: number[] = []
    const expected_s_short: number[] = []

    const s = [5, 5, 5, 5]
    const d = [1, 2, 3, 4]
    const r = [0.9, 0.8, 0.7, 0.6]

    Grades.forEach((grade, index) => {
      const s_recall = algorithm.next_recall_stability(
        d[index],
        s[index],
        r[index],
        grade
      )
      const s_fail = algorithm.next_forget_stability(
        d[index],
        s[index],
        r[index]
      )
      const s_short = algorithm.next_short_term_stability(s[index], grade)

      s_recall_collection.push(s_recall)
      s_fail_collection.push(s_fail)
      s_short_collection.push(s_short)

      expected_s_fail.push(next_forget_stability(d[index], s[index], r[index]))
      expected_s_recall.push(
        next_recall_stability(d[index], s[index], r[index], grade)
      )
      expected_s_short.push(next_short_term_stability(s[index], grade))

      if (grade === Rating.Again) {
        next_s_collection.push(s_fail)
      } else {
        next_s_collection.push(s_recall)
      }
      expected_next_s.push(next_s(d[index], s[index], r[index], grade))
    })
    expect(s_recall_collection).toEqual([
      25.77614184, 14.12189062, 60.40439635, 208.97595604,
    ])
    expect(s_recall_collection).toEqual(expected_s_recall)
    expect(s_fail_collection).toEqual([
      1.70284991, 1.97988166, 2.37599408, 2.88853913,
    ])
    expect(s_fail_collection).toEqual(expected_s_fail)

    expect(s_short_collection).toEqual([
      2.50514262, 4.19920687, 7.03885607, 11.79877447,
    ])
    expect(s_short_collection).toEqual(expected_s_short)

    expect(next_s_collection).toEqual([
      s_fail_collection[0],
      s_recall_collection[1],
      s_recall_collection[2],
      s_recall_collection[3],
    ])
    expect(next_s_collection).toEqual(expected_next_s)
  })
})

describe('next_interval', () => {
  it('next_ivl', () => {
    const desired_retentions: number[] = Array.from(
      { length: 10 },
      (_, i) => (i + 1) / 10
    )
    const intervals: number[] = desired_retentions.map((r) =>
      fsrs({ request_retention: r }).next_interval(1.0, 0)
    )
    expect(intervals).toEqual([422, 102, 43, 22, 13, 8, 4, 2, 1, 1])
  })

  // https://github.com/open-spaced-repetition/ts-fsrs/pull/74
  it('next_ivl[max_limit]', () => {
    const params = generatorParameters({ maximum_interval: 365 })
    const intervalModifier =
      (Math.pow(params.request_retention, 1 / DECAY) - 1) / FACTOR
    let f: FSRS = fsrs(params)

    const s = 737.47
    const next_ivl = f.next_interval(s, 0)
    expect(next_ivl).toEqual(params.maximum_interval)

    const t_fuzz = 98
    f = fsrs({ ...params, enable_fuzz: true })
    const next_ivl_fuzz = fsrs(params).next_interval(s, t_fuzz)
    const { min_ivl, max_ivl } = get_fuzz_range(
      Math.round(s * intervalModifier),
      t_fuzz,
      params.maximum_interval
    )
    expect(next_ivl_fuzz).toBeGreaterThanOrEqual(min_ivl)
    expect(max_ivl).toBe(params.maximum_interval)
    expect(next_ivl_fuzz).toBeLessThanOrEqual(max_ivl)
  })
})

describe('FSRS apply_fuzz', () => {
  test('return original interval when fuzzing is disabled', () => {
    const ivl = 3.2
    const enable_fuzz = false
    const algorithm = new FSRS({ enable_fuzz: enable_fuzz })
    expect(algorithm.apply_fuzz(ivl, 0)).toBe(3)
  })

  test('return original interval when ivl is less than 2.5', () => {
    const ivl = 2.3
    const enable_fuzz = true
    const algorithm = new FSRS({ enable_fuzz: enable_fuzz })
    expect(algorithm.apply_fuzz(ivl, 0)).toBe(2)
  })

  test('return original interval when ivl is less than 2.5', () => {
    const ivl = 2.5
    const enable_fuzz = true
    const algorithm = new FSRSAlgorithm({ enable_fuzz: enable_fuzz })
    const { min_ivl, max_ivl } = get_fuzz_range(
      Math.round(2.5),
      0,
      default_maximum_interval
    )
    const fuzzedInterval = algorithm.apply_fuzz(ivl, 0)
    expect(fuzzedInterval).toBeGreaterThanOrEqual(min_ivl)
    expect(fuzzedInterval).toBeLessThanOrEqual(max_ivl)
  })

  test('return original interval when ivl is less than 3', () => {
    const ivl = 3
    const enable_fuzz = true
    const algorithm = new FSRSAlgorithm({ enable_fuzz: enable_fuzz })
    algorithm.seed = 'NegativeS2Seed'
    const { min_ivl, max_ivl } = get_fuzz_range(
      Math.round(ivl),
      0,
      default_maximum_interval
    )
    const fuzzedInterval = algorithm.apply_fuzz(ivl, 0)
    expect(fuzzedInterval).toBeGreaterThanOrEqual(min_ivl)
    expect(fuzzedInterval).toBeLessThanOrEqual(max_ivl)
  })
})

describe('change Params', () => {
  test('change FSRSParameters[FSRS]', () => {
    const f = fsrs()
    // I(r,s),r=0.9 then I(r,s)=s
    expect(f.interval_modifier).toEqual(1)
    expect(f.parameters).toEqual(generatorParameters())

    const request_retention = 0.8
    const update_w = [
      1.14, 1.01, 5.44, 14.67, 5.3024, 1.5662, 1.2503, 0.0028, 1.5489, 0.1763,
      0.9953, 2.7473, 0.0179, 0.3105, 0.3976, 0.0, 2.0902, 0.48, 0.64,
    ]
    f.parameters = generatorParameters({
      request_retention: request_retention,
      w: update_w,
      enable_fuzz: true,
    })
    expect(f.parameters.request_retention).toEqual(request_retention)
    expect(f.parameters.w).toEqual(update_w)
    expect(f.parameters.enable_fuzz).toEqual(true)
    expect(f.interval_modifier).toEqual(
      f.calculate_interval_modifier(request_retention)
    )

    f.parameters.request_retention = default_request_retention
    expect(f.interval_modifier).toEqual(
      f.calculate_interval_modifier(default_request_retention)
    )

    f.parameters.w = default_w
    expect(f.parameters.w).toEqual(default_w)

    f.parameters.maximum_interval = 365
    expect(f.parameters.maximum_interval).toEqual(365)

    f.parameters.enable_fuzz = default_enable_fuzz
    expect(f.parameters.enable_fuzz).toEqual(default_enable_fuzz)

    f.parameters = {} // check default values
    expect(f.parameters).toEqual(generatorParameters())

    f.parameters.enable_short_term = false
    expect(f.parameters.enable_short_term).toEqual(false)
  })

  test('change FSRSParameters[FSRSAlgorithm]', () => {
    const params = generatorParameters()
    const f = new FSRSAlgorithm(params)
    // I(r,s),r=0.9 then I(r,s)=s
    expect(f.interval_modifier).toEqual(1)
    expect(f.parameters).toEqual(generatorParameters())

    const request_retention = 0.8
    const update_w = [
      1.14, 1.01, 5.44, 14.67, 5.3024, 1.5662, 1.2503, 0.0028, 1.5489, 0.1763,
      0.9953, 2.7473, 0.0179, 0.3105, 0.3976, 0.0, 2.0902, 0.48, 0.64,
    ]
    f.parameters = generatorParameters({
      request_retention: request_retention,
      w: update_w,
      enable_fuzz: true,
    })
    expect(f.parameters.request_retention).toEqual(request_retention)
    expect(f.parameters.w).toEqual(update_w)
    expect(f.parameters.enable_fuzz).toEqual(true)
    expect(f.interval_modifier).toEqual(
      f.calculate_interval_modifier(request_retention)
    )

    f.parameters.request_retention = default_request_retention
    expect(f.interval_modifier).toEqual(
      f.calculate_interval_modifier(default_request_retention)
    )

    f.parameters.w = default_w
    expect(f.parameters.w).toEqual(default_w)

    f.parameters.maximum_interval = 365
    expect(f.parameters.maximum_interval).toEqual(365)

    f.parameters.enable_fuzz = default_enable_fuzz
    expect(f.parameters.enable_fuzz).toEqual(default_enable_fuzz)

    f.parameters = {} // check default values
    expect(f.parameters).toEqual(generatorParameters())

    f.parameters.enable_short_term = false
    expect(f.parameters.enable_short_term).toEqual(false)
  })

  test('calculate_interval_modifier', () => {
    const f = new FSRSAlgorithm(generatorParameters())
    expect(f.interval_modifier).toEqual(
      f.calculate_interval_modifier(default_request_retention)
    )
    expect(() => {
      f.parameters.request_retention = 1.2
    }).toThrow('Requested retention rate should be in the range (0,1]')
    expect(() => {
      f.parameters.request_retention = -0.2
    }).toThrow('Requested retention rate should be in the range (0,1]')
  })
})

describe('next_state', () => {
  it('next_state not NaN', () => {
    const f = fsrs()
    const next_state = f.next_state(
      { stability: 0, difficulty: 0 },
      1,
      1 /** Again */
    )

    expect(Number.isNaN(next_state.stability)).toBe(false)
    expect(next_state).toEqual(f.next_state(null, 1, 1 /** Again */))
    expect(next_state).toEqual(
      f.next_state({ difficulty: 0, stability: 0 }, 1, 1 /** Again */)
    )
  })

  it('invalid memory state', () => {
    const f = fsrs()

    const init = f.next_state(null, 0, 3 /** Good */)
    // d<1
    expect(() => {
      f.next_state(
        { stability: init.stability, difficulty: 0 },
        1,
        1 /** Again */
      )
    }).toThrow(/^Invalid memory state/)

    // s<0.01
    expect(() => {
      f.next_state(
        { stability: 0, difficulty: init.stability },
        1,
        1 /** Again */
      )
    }).toThrow(/^Invalid memory state/)

    // t<0
    expect(() => {
      f.next_state(
        { stability: 0, difficulty: 0 },
        -1 /** invalid delta_t */,
        1 /** Again */
      )
    }).toThrow(/^Invalid delta_t/)

    // g<0
    expect(() => {
      f.next_state(init, 1, -1 /** invalid grade */)
    }).toThrow(/^Invalid grade/)

    // g>4
    expect(() => {
      f.next_state(init, 1, 5 /** invalid grade */)
    }).toThrow(/^Invalid grade/)
  })

  it('clamped s', () => {
    const f = fsrs()
    const state = { difficulty: 9.98210112, stability: 0.01020119 }

    const newState = f.next_state(state, 1, 1)

    expect(newState.stability).toBeGreaterThanOrEqual(0.01)
  })
})


================================================
File: __tests__/default.test.ts
================================================
import {
  createEmptyCard,
  default_enable_fuzz,
  default_maximum_interval,
  default_request_retention,
  default_w,
  generatorParameters,
} from '../src/fsrs'

describe('default params', () => {
  const expected_w = [
    0.40255, 1.18385, 3.173, 15.69105, 7.1949, 0.5345, 1.4604, 0.0046, 1.54575,
    0.1192, 1.01925, 1.9395, 0.11, 0.29605, 2.2698, 0.2315, 2.9898, 0.51655,
    0.6621,
  ]
  expect(default_request_retention).toEqual(0.9)
  expect(default_maximum_interval).toEqual(36500)
  expect(default_enable_fuzz).toEqual(false)
  expect(default_w.length).toBe(expected_w.length)
  expect(default_w).toEqual(expected_w)

  const params = generatorParameters()
  it('default_request_retention', () => {
    expect(params.request_retention).toEqual(default_request_retention)
  })
  it('default_maximum_interval', () => {
    expect(params.maximum_interval).toEqual(default_maximum_interval)
  })
  it('default_w ', () => {
    expect(params.w).toEqual(expected_w)
  })
  it('default_enable_fuzz ', () => {
    expect(params.enable_fuzz).toEqual(default_enable_fuzz)
  })

  it('convert FSRS 4.5 to FSRS-5', () => {
    const params = generatorParameters({
      w: [
        0.4, 0.6, 2.4, 5.8, 4.93, 0.94, 0.86, 0.01, 1.49, 0.14, 0.94, 2.18,
        0.05, 0.34, 1.26, 0.29, 2.61,
      ],
    })
    expect(params.w).toEqual([
      0.4, 0.6, 2.4, 5.8, 6.81, 0.44675014, 1.36, 0.01, 1.49, 0.14, 0.94, 2.18,
      0.05, 0.34, 1.26, 0.29, 2.61, 0.0, 0.0,
    ])
  })
})

describe('default Card', () => {
  it('empty card', () => {
    const time = [new Date(), new Date('2023-10-3 00:00:00')]
    for (const now of time) {
      const card = createEmptyCard(now)
      expect(card.due).toEqual(now)
      expect(card.stability).toEqual(0)
      expect(card.difficulty).toEqual(0)
      expect(card.elapsed_days).toEqual(0)
      expect(card.scheduled_days).toEqual(0)
      expect(card.reps).toEqual(0)
      expect(card.lapses).toEqual(0)
      expect(card.state).toEqual(0)
    }
  })
})


================================================
File: __tests__/elapsed_days.test.ts
================================================
// Ref:https://github.com/ishiko732/ts-fsrs/issues/44

import {
  fsrs,
  FSRS,
  createEmptyCard,
  Rating,
  Grade,
  ReviewLog,
} from '../src/fsrs'

describe('elapsed_days', () => {
  const f: FSRS = fsrs()

  const createDue = new Date(Date.UTC(2023, 9, 18, 14, 32, 3, 370))
  const grades: Grade[] = [Rating.Good, Rating.Again, Rating.Again, Rating.Good]
  let currentLog: ReviewLog | null = null
  let index = 0
  let card = createEmptyCard(createDue)
  test('first repeat[Rating.Good]', () => {
    const firstDue = new Date(Date.UTC(2023, 10, 5, 8, 27, 2, 605))
    const sc = f.repeat(card, firstDue)
    currentLog = sc[grades[index]].log

    expect(currentLog.elapsed_days).toEqual(0)
    // console.log(sc[grades[index]].log)
    card = sc[grades[index]].card
    // console.log(card)
    index += 1
  })

  test('second repeat[Rating.Again]', () => {
    // 2023-11-08 15:02:09.791,4.93,2023-11-05 08:27:02.605
    const secondDue = new Date(Date.UTC(2023, 10, 8, 15, 2, 9, 791))
    expect(card).not.toBeNull()
    const sc = f.repeat(card, secondDue)

    currentLog = sc[grades[index]].log
    expect(currentLog.elapsed_days).toEqual(
      secondDue.diff(card.last_review as Date, 'days')
    ) // 3
    expect(currentLog.elapsed_days).toEqual(3) // 0
    card = sc[grades[index]].card
    // console.log(card)
    // console.log(currentLog)
    index += 1
  })

  test('third repeat[Rating.Again]', () => {
    // 2023-11-08 15:02:30.799,4.93,2023-11-08 15:02:09.791
    const secondDue = new Date(Date.UTC(2023, 10, 8, 15, 2, 30, 799))
    expect(card).not.toBeNull()
    const sc = f.repeat(card, secondDue)

    currentLog = sc[grades[index]].log
    expect(currentLog.elapsed_days).toEqual(
      secondDue.diff(card.last_review as Date, 'days')
    ) // 0
    expect(currentLog.elapsed_days).toEqual(0) // 0
    // console.log(currentLog);
    card = sc[grades[index]].card
    // console.log(card);
    index += 1
  })

  test('fourth repeat[Rating.Good]', () => {
    // 2023-11-08 15:04:08.739,4.93,2023-11-08 15:02:30.799
    const secondDue = new Date(Date.UTC(2023, 10, 8, 15, 4, 8, 739))
    expect(card).not.toBeNull()
    const sc = f.repeat(card, secondDue)

    currentLog = sc[grades[index]].log
    expect(currentLog.elapsed_days).toEqual(
      secondDue.diff(card.last_review as Date, 'days')
    ) // 0
    expect(currentLog.elapsed_days).toEqual(0) // 0
    // console.log(currentLog);
    card = sc[grades[index]].card
    // console.log(card);
    index += 1
  })
})


================================================
File: __tests__/forget.test.ts
================================================
import { createEmptyCard, fsrs, FSRS, Rating } from '../src/fsrs'
import { Grade } from '../src/fsrs'

describe('FSRS forget', () => {
  const f: FSRS = fsrs({
    w: [
      1.14, 1.01, 5.44, 14.67, 5.3024, 1.5662, 1.2503, 0.0028, 1.5489, 0.1763,
      0.9953, 2.7473, 0.0179, 0.3105, 0.3976, 0.0, 2.0902,
    ],
    enable_fuzz: false,
  })
  it('forget', () => {
    const card = createEmptyCard()
    const now = new Date(2022, 11, 29, 12, 30, 0, 0)
    const forget_now = new Date(2023, 11, 30, 12, 30, 0, 0)
    const scheduling_cards = f.repeat(card, now)
    const grades: Grade[] = [
      Rating.Again,
      Rating.Hard,
      Rating.Good,
      Rating.Easy,
    ]
    for (const grade of grades) {
      const forgetCard = f.forget(
        scheduling_cards[grade].card,
        forget_now,
        true
      )
      expect(forgetCard.card).toEqual({
        ...card,
        due: forget_now,
        lapses: 0,
        reps: 0,
        last_review: scheduling_cards[grade].card.last_review,
      })
      expect(forgetCard.log.rating).toEqual(Rating.Manual)
      expect(() => f.rollback(forgetCard.card, forgetCard.log)).toThrow(
        'Cannot rollback a manual rating'
      )
    }
    for (const grade of grades) {
      const forgetCard = f.forget(scheduling_cards[grade].card, forget_now)
      expect(forgetCard.card).toEqual({
        ...card,
        due: forget_now,
        lapses: scheduling_cards[grade].card.lapses,
        reps: scheduling_cards[grade].card.reps,
        last_review: scheduling_cards[grade].card.last_review,
      })
      expect(forgetCard.log.rating).toEqual(Rating.Manual)
      expect(() => f.rollback(forgetCard.card, forgetCard.log)).toThrow(
        'Cannot rollback a manual rating'
      )
    }
  })

  it('new card forget[reset true]', () => {
    const card = createEmptyCard()
    const forget_now = new Date(2023, 11, 30, 12, 30, 0, 0)
    const forgetCard = f.forget(card, forget_now, true)
    expect(forgetCard.card).toEqual({
      ...card,
      due: forget_now,
      lapses: 0,
      reps: 0,
    })
  })
  it('new card forget[reset true]', () => {
    const card = createEmptyCard()
    const forget_now = new Date(2023, 11, 30, 12, 30, 0, 0)
    const forgetCard = f.forget(card, forget_now)
    expect(forgetCard.card).toEqual({
      ...card,
      due: forget_now,
    })
  })
})


================================================
File: __tests__/handler.test.ts
================================================
import {
  Card,
  createEmptyCard,
  date_scheduler,
  fixState,
  fsrs,
  FSRS,
  Grades,
  Rating,
  RatingType,
  RecordLog,
  RecordLogItem,
  ReviewLog,
  State,
  StateType,
} from '../src/fsrs'

interface CardPrismaUnChecked
  extends Omit<Card, 'due' | 'last_review' | 'state'> {
  cid: string
  due: Date | number
  last_review: Date | null | number
  state: StateType
}

interface RevLogPrismaUnchecked
  extends Omit<ReviewLog, 'due' | 'review' | 'state' | 'rating'> {
  cid: string
  due: Date | number
  state: StateType
  review: Date | number
  rating: RatingType
}

interface RepeatRecordLog {
  card: CardPrismaUnChecked
  log: RevLogPrismaUnchecked
}

describe('afterHandler', () => {
  const f: FSRS = fsrs()
  const now = new Date()

  function cardAfterHandler(card: Card) {
    return {
      ...card,
      cid: 'test001',
      state: State[card.state],
      last_review: card.last_review ?? null,
    } as CardPrismaUnChecked
  }

  function repeatAfterHandler(recordLog: RecordLog) {
    const record: RepeatRecordLog[] = []
    for (const grade of Grades) {
      record.push({
        card: {
          ...(recordLog[grade].card as Card & { cid: string }),
          due: recordLog[grade].card.due.getTime(),
          state: State[recordLog[grade].card.state] as StateType,
          last_review: recordLog[grade].card.last_review
            ? recordLog[grade].card.last_review!.getTime()
            : null,
        },
        log: {
          ...recordLog[grade].log,
          cid: (recordLog[grade].card as Card & { cid: string }).cid,
          due: recordLog[grade].log.due.getTime(),
          review: recordLog[grade].log.review.getTime(),
          state: State[recordLog[grade].log.state] as StateType,
          rating: Rating[recordLog[grade].log.rating] as RatingType,
        },
      })
    }
    return record
  }

  // function repeatAfterHandler(recordLog: RecordLog) {
  //   const record: { [key in Grade]: RepeatRecordLog } = {} as {
  //     [key in Grade]: RepeatRecordLog;
  //   };
  //   for (const grade of Grades) {
  //     record[grade] = {
  //       card: {
  //         ...(recordLog[grade].card as Card & { cid: string }),
  //         due: recordLog[grade].card.due.getTime(),
  //         state: State[recordLog[grade].card.state] as StateType,
  //         last_review: recordLog[grade].card.last_review
  //           ? recordLog[grade].card.last_review!.getTime()
  //           : null,
  //       },
  //       log: {
  //         ...recordLog[grade].log,
  //         cid: (recordLog[grade].card as Card & { cid: string }).cid,
  //         due: recordLog[grade].log.due.getTime(),
  //         review: recordLog[grade].log.review.getTime(),
  //         state: State[recordLog[grade].log.state] as StateType,
  //         rating: Rating[recordLog[grade].log.rating] as RatingType,
  //       },
  //     };
  //   }
  //   return record;
  // }
  function nextAfterHandler(recordLogItem: RecordLogItem) {
    const recordItem = {
      card: {
        ...(recordLogItem.card as Card & { cid: string }),
        due: recordLogItem.card.due.getTime(),
        state: State[recordLogItem.card.state] as StateType,
        last_review: recordLogItem.card.last_review
          ? recordLogItem.card.last_review!.getTime()
          : null,
      },
      log: {
        ...recordLogItem.log,
        cid: (recordLogItem.card as Card & { cid: string }).cid,
        due: recordLogItem.log.due.getTime(),
        review: recordLogItem.log.review.getTime(),
        state: State[recordLogItem.log.state] as StateType,
        rating: Rating[recordLogItem.log.rating] as RatingType,
      },
    }
    return recordItem
  }

  function forgetAfterHandler(recordLogItem: RecordLogItem): RepeatRecordLog {
    return {
      card: {
        ...(recordLogItem.card as Card & { cid: string }),
        due: recordLogItem.card.due.getTime(),
        state: State[recordLogItem.card.state] as StateType,
        last_review: recordLogItem.card.last_review
          ? recordLogItem.card.last_review!.getTime()
          : null,
      },
      log: {
        ...recordLogItem.log,
        cid: (recordLogItem.card as Card & { cid: string }).cid,
        due: recordLogItem.log.due.getTime(),
        review: recordLogItem.log.review.getTime(),
        state: State[recordLogItem.log.state] as StateType,
        rating: Rating[recordLogItem.log.rating] as RatingType,
      },
    }
  }

  it('createEmptyCard[afterHandler]', () => {
    const emptyCardFormAfterHandler = createEmptyCard(now, cardAfterHandler)
    expect(emptyCardFormAfterHandler.state).toEqual('New')
    expect(fixState(emptyCardFormAfterHandler.state)).toEqual(State.New)
    expect(emptyCardFormAfterHandler.last_review).toEqual(null)
    expect(emptyCardFormAfterHandler.cid).toEqual('test001')

    const emptyCardFormAfterHandler2 = createEmptyCard<CardPrismaUnChecked>(
      now,
      cardAfterHandler
    )
    expect(emptyCardFormAfterHandler2.state).toEqual('New')
    expect(fixState(emptyCardFormAfterHandler2.state)).toEqual(State.New)
    expect(emptyCardFormAfterHandler2.last_review).toEqual(null)
    expect(emptyCardFormAfterHandler2.cid).toEqual('test001')
  })

  it('repeat[afterHandler]', () => {
    const emptyCardFormAfterHandler = createEmptyCard(now, cardAfterHandler)
    const repeat = f.repeat(emptyCardFormAfterHandler, now, repeatAfterHandler)
    expect(Array.isArray(repeat)).toEqual(true)

    for (let i = 0; i < Grades.length; i++) {
      expect(Number.isSafeInteger(repeat[i].card.due)).toEqual(true)
      expect(typeof repeat[i].card.state === 'string').toEqual(true)
      expect(Number.isSafeInteger(repeat[i].card.last_review)).toEqual(true)

      expect(Number.isSafeInteger(repeat[i].log.due)).toEqual(true)
      expect(Number.isSafeInteger(repeat[i].log.review)).toEqual(true)
      expect(typeof repeat[i].log.state === 'string').toEqual(true)
      expect(typeof repeat[i].log.rating === 'string').toEqual(true)
      expect(repeat[i].card.cid).toEqual('test001')
      expect(repeat[i].log.cid).toEqual(repeat[i].card.cid)
    }
  })

  it('next[afterHandler]', () => {
    const emptyCardFormAfterHandler = createEmptyCard(now, cardAfterHandler)
    for (const grade of Grades) {
      const next = f.next(
        emptyCardFormAfterHandler,
        now,
        grade,
        nextAfterHandler
      )
      expect('card' in next).toEqual(true)
      expect('log' in next).toEqual(true)

      expect(Number.isSafeInteger(next.card.due)).toEqual(true)
      expect(typeof next.card.state === 'string').toEqual(true)
      expect(Number.isSafeInteger(next.card.last_review)).toEqual(true)

      expect(Number.isSafeInteger(next.log.due)).toEqual(true)
      expect(Number.isSafeInteger(next.log.review)).toEqual(true)
      expect(typeof next.log.state === 'string').toEqual(true)
      expect(typeof next.log.rating === 'string').toEqual(true)
      expect(next.card.cid).toEqual('test001')
      expect(next.log.cid).toEqual(next.card.cid)
    }
  })

  it('rollback[afterHandler]', () => {
    const emptyCardFormAfterHandler = createEmptyCard(now, cardAfterHandler)
    const repeatFormAfterHandler = f.repeat(
      emptyCardFormAfterHandler,
      now,
      repeatAfterHandler
    )
    const { card, log } = repeatFormAfterHandler[Rating.Hard]
    const rollbackFromAfterHandler = f.rollback(card, log, cardAfterHandler)
    expect(rollbackFromAfterHandler).toEqual(emptyCardFormAfterHandler)
    expect(rollbackFromAfterHandler.cid).toEqual('test001')
  })

  it('forget[afterHandler]', () => {
    const emptyCardFormAfterHandler = createEmptyCard(now, cardAfterHandler)
    const repeatFormAfterHandler = f.repeat(
      emptyCardFormAfterHandler,
      now,
      repeatAfterHandler
    )
    const { card } = repeatFormAfterHandler[Rating.Hard]
    const forgetFromAfterHandler = f.forget(
      card,
      date_scheduler(now, 1, true),
      false,
      forgetAfterHandler
    )

    expect(Number.isSafeInteger(forgetFromAfterHandler.card.due)).toEqual(true)
    expect(typeof forgetFromAfterHandler.card.state === 'string').toEqual(true)
    expect(
      Number.isSafeInteger(forgetFromAfterHandler.card.last_review)
    ).toEqual(true)

    expect(Number.isSafeInteger(forgetFromAfterHandler.log.due)).toEqual(true)
    expect(Number.isSafeInteger(forgetFromAfterHandler.log.review)).toEqual(
      true
    )
    expect(typeof forgetFromAfterHandler.log.state === 'string').toEqual(true)
    expect(typeof forgetFromAfterHandler.log.rating === 'string').toEqual(true)
    expect(forgetFromAfterHandler.card.cid).toEqual('test001')
    expect(forgetFromAfterHandler.log.cid).toEqual(
      forgetFromAfterHandler.card.cid
    )
  })
})


================================================
File: __tests__/help.test.ts
================================================
import {
  date_diff,
  date_scheduler,
  fixDate,
  fixRating,
  fixState,
  formatDate,
  Grades,
  Rating,
  State,
} from '../src/fsrs'

test('FSRS-Grades', () => {
  expect(Grades).toStrictEqual([
    Rating.Again,
    Rating.Hard,
    Rating.Good,
    Rating.Easy,
  ])
})

test('Date.prototype.format', () => {
  const now = new Date(2022, 11, 30, 12, 30, 0, 0)
  const last_review = new Date(2022, 11, 29, 12, 30, 0, 0)
  expect(now.format()).toEqual('2022-12-30 12:30:00')
  expect(formatDate(now)).toEqual('2022-12-30 12:30:00')
  expect(formatDate(now.getTime())).toEqual('2022-12-30 12:30:00')
  expect(formatDate(now.toUTCString())).toEqual('2022-12-30 12:30:00')
  const TIMEUNITFORMAT_TEST = ['秒', '分', '时', '天', '月', '年']
  expect(now.dueFormat(last_review)).toEqual('1')
  expect(now.dueFormat(last_review, true)).toEqual('1day')
  expect(now.dueFormat(last_review, true, TIMEUNITFORMAT_TEST)).toEqual('1天')
})

describe('date_scheduler', () => {
  test('offset by minutes', () => {
    const now = new Date('2023-01-01T12:00:00Z')
    const t = 30
    const expected = new Date('2023-01-01T12:30:00Z')

    expect(date_scheduler(now, t)).toEqual(expected)
  })

  test('offset by days', () => {
    const now = new Date('2023-01-01T12:00:00Z')
    const t = 3
    const expected = new Date('2023-01-04T12:00:00Z')

    expect(date_scheduler(now, t, true)).toEqual(expected)
  })

  test('negative offset', () => {
    const now = new Date('2023-01-01T12:00:00Z')
    const t = -15
    const expected = new Date('2023-01-01T11:45:00Z')

    expect(date_scheduler(now, t)).toEqual(expected)
  })

  test('offset with isDay parameter', () => {
    const now = new Date('2023-01-01T12:00:00Z')
    const t = 2
    const expected = new Date('2023-01-03T12:00:00Z')

    expect(date_scheduler(now, t, true)).toEqual(expected)
  })

  test('Date data real type is string/number', () => {
    const now = '2023-01-01T12:00:00Z'
    const t = 2
    const expected = new Date('2023-01-03T12:00:00Z')

    expect(date_scheduler(now, t, true)).toEqual(expected)
  })
})

describe('date_diff', () => {
  test('wrong fix', () => {
    const now = new Date(2022, 11, 30, 12, 30, 0, 0)
    const last_review = new Date(2022, 11, 29, 12, 30, 0, 0)

    expect(() => date_diff(now, null as unknown as Date, 'days')).toThrowError(
      'Invalid date'
    )
    expect(() =>
      date_diff(now, null as unknown as Date, 'minutes')
    ).toThrowError('Invalid date')
    expect(() =>
      date_diff(null as unknown as Date, last_review, 'days')
    ).toThrowError('Invalid date')
    expect(() =>
      date_diff(null as unknown as Date, last_review, 'minutes')
    ).toThrowError('Invalid date')
  })

  test('calculate difference in minutes', () => {
    const now = new Date('2023-11-25T12:30:00Z')
    const pre = new Date('2023-11-25T12:00:00Z')
    const unit = 'minutes'
    const expected = 30
    expect(date_diff(now, pre, unit)).toBe(expected)
  })

  test('calculate difference in minutes for negative time difference', () => {
    const now = new Date('2023-11-25T12:00:00Z')
    const pre = new Date('2023-11-25T12:30:00Z')
    const unit = 'minutes'
    const expected = -30
    expect(date_diff(now, pre, unit)).toBe(expected)
  })

  test('Date data real type is string/number', () => {
    const now = '2023-11-25T12:30:00Z'
    const pre = new Date('2023-11-25T12:00:00Z').getTime()
    const unit = 'minutes'
    const expected = 30
    expect(date_diff(now, pre, unit)).toBe(expected)
  })
})

describe('fixDate', () => {
  test('throw error for invalid date value', () => {
    const input = 'invalid-date'
    expect(() => fixDate(input)).toThrowError('Invalid date:[invalid-date]')
  })

  test('throw error for unsupported value type', () => {
    const input = true
    expect(() => fixDate(input)).toThrowError('Invalid date:[true]')
  })

  test('throw error for undefined value', () => {
    const input = undefined
    expect(() => fixDate(input)).toThrowError('Invalid date:[undefined]')
  })

  test('throw error for null value', () => {
    const input = null
    expect(() => fixDate(input)).toThrowError('Invalid date:[null]')
  })
})

describe('fixState', () => {
  test('fix state value', () => {
    const newState = 'New'
    expect(fixState('new')).toEqual(State.New)
    expect(fixState(newState)).toEqual(State.New)

    const learning = 'Learning'
    expect(fixState('learning')).toEqual(State.Learning)
    expect(fixState(learning)).toEqual(State.Learning)

    const relearning = 'Relearning'
    expect(fixState('relearning')).toEqual(State.Relearning)
    expect(fixState(relearning)).toEqual(State.Relearning)

    const review = 'Review'
    expect(fixState('review')).toEqual(State.Review)
    expect(fixState(review)).toEqual(State.Review)
  })

  test('throw error for invalid state value', () => {
    const input = 'invalid-state'
    expect(() => fixState(input)).toThrowError('Invalid state:[invalid-state]')
    expect(() => fixState(null)).toThrowError('Invalid state:[null]')
    expect(() => fixState(undefined)).toThrowError('Invalid state:[undefined]')
  })
})

describe('fixRating', () => {
  test('fix Rating value', () => {
    const again = 'Again'
    expect(fixRating('again')).toEqual(Rating.Again)
    expect(fixRating(again)).toEqual(Rating.Again)

    const hard = 'Hard'
    expect(fixRating('hard')).toEqual(Rating.Hard)
    expect(fixRating(hard)).toEqual(Rating.Hard)

    const good = 'Good'
    expect(fixRating('good')).toEqual(Rating.Good)
    expect(fixRating(good)).toEqual(Rating.Good)

    const easy = 'Easy'
    expect(fixRating('easy')).toEqual(Rating.Easy)
    expect(fixRating(easy)).toEqual(Rating.Easy)
  })

  test('throw error for invalid rating value', () => {
    const input = 'invalid-rating'
    expect(() => fixRating(input)).toThrowError(
      'Invalid rating:[invalid-rating]'
    )
    expect(() => fixRating(null)).toThrowError('Invalid rating:[null]')
    expect(() => fixRating(undefined)).toThrowError(
      'Invalid rating:[undefined]'
    )
  })
})


================================================
File: __tests__/models.test.ts
================================================
import { Rating, RatingType, State, StateType } from '../src/fsrs'

describe('State', () => {
  it('use State.New', () => {
    expect(State.New).toEqual(0)
    expect(0).toEqual(State.New)
    expect(State[State.New]).toEqual('New')
    expect((0 as State).valueOf()).toEqual(0)
    expect(State['New' as StateType]).toEqual(0)
  })

  it('use State.Learning', () => {
    expect(State.Learning).toEqual(1)
    expect(1).toEqual(State.Learning)
    expect(State[State.Learning]).toEqual('Learning')
    expect((1 as State).valueOf()).toEqual(1)
    expect(State['Learning' as StateType]).toEqual(1)
  })

  it('use State.Review', () => {
    expect(State.Review).toEqual(2)
    expect(2).toEqual(State.Review)
    expect(State[State.Review]).toEqual('Review')
    expect((2 as State).valueOf()).toEqual(2)
    expect(State['Review' as StateType]).toEqual(2)
  })

  it('use State.Relearning', () => {
    expect(State.Relearning).toEqual(3)
    expect(3).toEqual(State.Relearning)
    expect(State[State.Relearning]).toEqual('Relearning')
    expect((3 as State).valueOf()).toEqual(3)
    expect(State['Relearning' as StateType]).toEqual(3)
  })
})

describe('Rating', () => {
  it('use Rating.Again', () => {
    expect(Rating.Again).toEqual(1)
    expect(1).toEqual(Rating.Again)
    expect(Rating[Rating.Again]).toEqual('Again')
    expect((1 as Rating).valueOf()).toEqual(1)
    expect(Rating['Again' as RatingType]).toEqual(1)
  })

  it('use Rating.Hard', () => {
    expect(Rating.Hard).toEqual(2)
    expect(2).toEqual(Rating.Hard)
    expect(Rating[Rating.Hard]).toEqual('Hard')
    expect((2 as Rating).valueOf()).toEqual(2)
    expect(Rating['Hard' as RatingType]).toEqual(2)
  })

  it('use Rating.Good', () => {
    expect(Rating.Good).toEqual(3)
    expect(3).toEqual(Rating.Good)
    expect(Rating[Rating.Good]).toEqual('Good')
    expect((3 as Rating).valueOf()).toEqual(3)
    expect(Rating['Good' as RatingType]).toEqual(3)
  })

  it('use Rating.Easy', () => {
    expect(Rating.Easy).toEqual(4)
    expect(4).toEqual(Rating.Easy)
    expect(Rating[Rating.Easy]).toEqual('Easy')
    expect((4 as Rating).valueOf()).toEqual(4)
    expect(Rating['Easy' as RatingType]).toEqual(4)
  })
})


================================================
File: __tests__/reschedule.test.ts
================================================
import {
  createEmptyCard,
  date_diff,
  FSRS,
  fsrs,
  Grade,
  Grades,
  Rating,
  RecordLogItem,
  RescheduleOptions,
  ReviewLog,
  State,
  TypeConvert,
} from '../src/fsrs'
import { Card, DateInput, FSRSHistory } from '../src/fsrs/models'

type reviewState = {
  difficulty: number
  due: Date
  rating: Rating
  review?: Date
  stability: number
  state: State
  reps: number
  lapses: number
  elapsed_days: number
  scheduled_days: number
}

const MOCK_NOW = new Date(1723338000000 /**2024, 7, 11, 1, 0, 0 UTC**/)

// https://github.com/open-spaced-repetition/ts-fsrs/issues/112#issuecomment-2286238381

function experiment(
  scheduler: FSRS,
  reviews: Array<FSRSHistory>,
  skipManual: boolean = true
) {
  if (skipManual) {
    reviews = reviews.filter((review) => review.rating !== Rating.Manual)
  }
  const output = reviews.reduce(
    (state: reviewState[], review: FSRSHistory, index: number) => {
      const currentCard = state[index - 1]
        ? {
            due: state[index - 1].due,
            stability: state[index - 1].stability,
            difficulty: state[index - 1].difficulty,
            elapsed_days:
              state[index - 2]?.review && state[index - 1]?.review
                ? date_diff(
                    state[index - 1].review!,
                    state[index - 2].review!,
                    'days'
                  )
                : 0,
            scheduled_days:
              state[index - 1].review && state[index - 1].due
                ? date_diff(
                    state[index - 1].review!,
                    state[index - 1].due,
                    'days'
                  )
                : 0,
            reps: state[index - 1].reps,
            lapses: state[index - 1].lapses,
            state: state[index - 1].state,
            last_review: state[index - 1].review,
          }
        : createEmptyCard(MOCK_NOW)

      if (review.review) {
        let card = currentCard
        let log: ReviewLog
        if (review.rating) {
          const item = scheduler.next(currentCard, review.review, review.rating)
          card = item.card
          log = item.log
        } else {
          review.review = TypeConvert.time(review.review)
          log = state[index - 1]
            ? {
                rating: Rating.Manual,
                state: State.New,
                due: state[index - 1].due,
                stability: state[index - 1].stability,
                difficulty: state[index - 1].difficulty,
                elapsed_days: state[index - 1].elapsed_days,
                last_elapsed_days: state[index - 1].elapsed_days,
                scheduled_days: state[index - 1].scheduled_days,
                review: review.review,
              }
            : {
                rating: Rating.Manual,
                state: State.New,
                due: new Date(MOCK_NOW),
                stability: 0,
                difficulty: 0,
                elapsed_days: 0,
                last_elapsed_days: 0,
                scheduled_days: 0,
                review: review.review,
              }
          card = createEmptyCard(review.review)
        }

        return [
          ...state,
          {
            difficulty: card.difficulty,
            due: card.due,
            rating: log.rating,
            review: log.review,
            stability: card.stability,
            state: card.state,
            reps: card.reps,
            lapses: card.lapses,
            elapsed_days: card.elapsed_days,
            scheduled_days: card.scheduled_days,
          } satisfies reviewState,
        ]
      }

      return state
    },
    []
  )

  return output
}

function testReschedule(
  scheduler: FSRS,
  tests: number[][],
  options: Partial<RescheduleOptions> = {}
) {
  for (const test of tests) {
    const reviews = test.map((rating, index) => ({
      rating: <Grade>rating,
      review: new Date(
        new Date(MOCK_NOW).valueOf() + 1000 * 60 * 60 * 24 * (index + 1)
      ),
      state: rating === Rating.Manual ? State.New : undefined,
    }))
    const { collections: control } = scheduler.reschedule(
      createEmptyCard(),
      reviews,
      options
    )
    const experimentResult = experiment(
      scheduler,
      reviews,
      options.skipManual ?? true
    )
    for (const [index, controlItem] of control.entries()) {
      const experimentItem = experimentResult[index]
      // console.log(controlItem, experimentItem, index, test)
      expect(controlItem.card.difficulty).toEqual(experimentItem.difficulty)
      expect(controlItem.card.due).toEqual(experimentItem.due)
      expect(controlItem.card.stability).toEqual(experimentItem.stability)
      expect(controlItem.card.state).toEqual(experimentItem.state)
      expect(controlItem.card.last_review?.getTime()).toEqual(
        experimentItem.review?.getTime()
      )
      expect(controlItem.card.reps).toEqual(experimentItem.reps)
      expect(controlItem.card.lapses).toEqual(experimentItem.lapses)

      expect(controlItem.card.elapsed_days).toEqual(experimentItem.elapsed_days)
      expect(controlItem.card.scheduled_days).toEqual(
        experimentItem.scheduled_days
      )
    }
  }
}

describe('FSRS reschedule', () => {
  const scheduler = fsrs()

  it('basic grade', () => {
    const tests: number[][] = []
    for (let i = 0; i < Grades.length; i++) {
      for (let j = 0; j < Grades.length; j++) {
        for (let k = 0; k < Grades.length; k++) {
          for (let l = 0; l < Grades.length; l++) {
            tests.push([Grades[i], Grades[j], Grades[k], Grades[l]])
          }
        }
      }
    }
    testReschedule(scheduler, tests, {
      reviewsOrderBy: (a: FSRSHistory, b: FSRSHistory) =>
        date_diff(a.review, b.review, 'days'),
      recordLogHandler: (recordLog) => recordLog,
    })
  })

  it('case : include Manual rating -> set forget', () => {
    const tests: number[][] = []
    const Ratings = [
      Rating.Manual,
      Rating.Again,
      Rating.Hard,
      Rating.Good,
      Rating.Easy,
    ]
    for (let i = 0; i < Ratings.length; i++) {
      for (let j = 0; j < Ratings.length; j++) {
        for (let k = 0; k < Ratings.length; k++) {
          for (let l = 0; l < Ratings.length; l++) {
            for (let m = 0; m < Ratings.length; m++) {
              tests.push([
                Ratings[i],
                Ratings[j],
                Ratings[k],
                Ratings[l],
                Ratings[m],
              ])
            }
          }
        }
      }
    }
    console.debug('reschedule case size:', tests.length)
    testReschedule(scheduler, tests, {
      reviewsOrderBy: (a: FSRSHistory, b: FSRSHistory) =>
        date_diff(a.review, b.review, 'days'),
      recordLogHandler: (recordLog) => recordLog,
      skipManual: false,
    })
  })

  it('case : include Manual rating -> state have not been provided', () => {
    const test = [Rating.Easy, Rating.Good, Rating.Manual, Rating.Good]
    const reviews = test.map((rating, index) => ({
      rating: <Grade>rating,
      review: new Date(
        new Date(MOCK_NOW).valueOf() + 1000 * 60 * 60 * 24 * (index + 1)
      ),
    }))
    expect(() => {
      scheduler.reschedule(createEmptyCard(), reviews, { skipManual: false })
    }).toThrow('reschedule: state is required for manual rating')
  })

  it('case : include Manual rating -> due have not been provided', () => {
    const test = [Rating.Easy, Rating.Good, Rating.Manual, Rating.Good]
    const reviews = test.map((rating, index) => ({
      rating: <Grade>rating,
      review: new Date(
        new Date(MOCK_NOW).valueOf() + 1000 * 60 * 60 * 24 * (index + 1)
      ),
      state: rating === Rating.Manual ? State.Review : undefined,
    }))
    expect(() => {
      scheduler.reschedule(createEmptyCard(), reviews, { skipManual: false })
    }).toThrow('reschedule: due is required for manual rating')
  })

  it('case : include Manual rating -> Manually configure the data', () => {
    const test = [Rating.Easy, Rating.Good, Rating.Manual, Rating.Good]
    const reviews = test.map(
      (rating, index) =>
        ({
          rating: <Grade>rating,
          review: new Date(
            new Date(MOCK_NOW).getTime() + 1000 * 60 * 60 * 24 * (index + 1)
          ),
          state: rating === Rating.Manual ? State.Review : undefined,
          difficulty: 3.2828565,
          stability: 21.79806877,
          due: new Date(1725469200000 /**2024-09-04T17:00:00.000Z*/),
        }) satisfies FSRSHistory
    )
    const expected = {
      card: {
        due: new Date(1725469200000 /**2024-09-04T17:00:00.000Z*/),
        stability: 21.79806877,
        difficulty: 3.2828565,
        elapsed_days: 1,
        scheduled_days: 21,
        reps: 3,
        lapses: 0,
        state: 2,
        last_review: new Date(1723597200000 /**2024-08-14T01:00:00.000Z*/),
      },
      log: {
        rating: 0,
        state: 2,
        due: new Date(1723510800000 /**2024-08-13T01:00:00.000Z*/),
        stability: 18.80877052,
        difficulty: 3.22450159,
        elapsed_days: 1,
        last_elapsed_days: 1,
        scheduled_days: 19,
        review: new Date(1723597200000 /**2024-08-14T01:00:00.000Z*/),
      },
    }

    const nextItemExpected = {
      card: {
        due: new Date(1725843600000 /**2024-09-09T01:00:00.000Z*/),
        stability: 24.7796143,
        difficulty: 3.28258807,
        elapsed_days: 1,
        scheduled_days: 25,
        reps: 4,
        lapses: 0,
        state: State.Review,
        last_review: new Date(1723683600000 /**2024-08-15T01:00:00.000Z*/),
      },
      log: {
        rating: Rating.Good,
        state: State.Review,
        due: new Date(1723597200000 /**2024-08-14T01:00:00.000Z*/),
        stability: 21.79806877,
        difficulty: 3.2828565,
        elapsed_days: 1,
        last_elapsed_days: 1,
        scheduled_days: 21,
        review: new Date(1723683600000 /**2024-08-15T01:00:00.000Z*/),
      },
    }

    const { collections: control } = scheduler.reschedule(
      createEmptyCard(),
      reviews,
      {
        skipManual: false,
      }
    )
    expect(control[2]).toEqual(expected)
    expect(control[3]).toEqual(nextItemExpected)
  })

  it('case : include Manual rating -> Manually configure the data and ds have not been provided', () => {
    const test = [Rating.Easy, Rating.Good, Rating.Manual, Rating.Good]
    const reviews = test.map(
      (rating, index) =>
        ({
          rating: <Grade>rating,
          review: new Date(
            new Date(MOCK_NOW).getTime() + 1000 * 60 * 60 * 24 * (index + 1)
          ),
          state: rating === Rating.Manual ? State.Review : undefined,
          due: new Date(1725469200000 /**'2024-09-04T17:00:00.000Z'*/),
        }) satisfies FSRSHistory
    )
    const expected = {
      card: {
        due: new Date(1725469200000 /**'2024-09-04T17:00:00.000Z'*/),
        stability: 18.80877052,
        difficulty: 3.22450159,
        elapsed_days: 1,
        scheduled_days: 21,
        reps: 3,
        lapses: 0,
        state: State.Review,
        last_review: new Date(1723597200000 /**'2024-08-14T01:00:00.000Z'*/),
      },
      log: {
        rating: Rating.Manual,
        state: State.Review,
        due: new Date(1723510800000 /**2024-08-13T01:00:00.000Z*/),
        stability: 18.80877052,
        difficulty: 3.22450159,
        elapsed_days: 1,
        last_elapsed_days: 1,
        scheduled_days: 19,
        review: new Date(1723597200000 /**'2024-08-14T01:00:00.000Z'*/),
      },
    }

    const current_card = {
      due: new Date(1725584400000 /**'2024-09-06T01:00:00.000Z'*/),
      stability: 21.79806877,
      difficulty: 3.2828565,
      elapsed_days: 1,
      scheduled_days: 22,
      reps: 4,
      lapses: 0,
      state: State.Review,
      last_review: new Date(1723683600000 /**'2024-08-15T01:00:00.000Z'*/),
    }

    const { collections: control, reschedule_item } = scheduler.reschedule(
      current_card,
      reviews,
      {
        skipManual: false,
      }
    )
    expect(control[2]).toEqual(expected)
    expect(reschedule_item).toBeNull()
  })

  it('case : get reschedule item', () => {
    const test = [Rating.Easy, Rating.Good, Rating.Good, Rating.Good]
    const reviews = test.map(
      (rating, index) =>
        ({
          rating: <Grade>rating,
          review: new Date(
            new Date(MOCK_NOW).getTime() + 1000 * 60 * 60 * 24 * (index + 1)
          ),
          state: rating === Rating.Manual ? State.Review : undefined,
          due: new Date(1725469200000 /**'2024-09-04T17:00:00.000Z'*/),
        }) satisfies FSRSHistory
    )

    const expected = {
      card: {
        due: new Date(1725843600000 /**'2024-09-09T01:00:00.000Z'*/),
        stability: 24.86663381,
        difficulty: 3.22450159,
        elapsed_days: 1,
        scheduled_days: 25,
        reps: 4,
        lapses: 0,
        state: State.Review,
        last_review: new Date(1723683600000 /**'2024-08-15T01:00:00.000Z'*/),
      },
      log: {
        rating: Rating.Good,
        state: State.Review,
        due: new Date(1723597200000 /**2024-08-14T01:00:00.000Z*/),
        stability: 21.86357285,
        difficulty: 3.22450159,
        elapsed_days: 1,
        last_elapsed_days: 1,
        scheduled_days: 22,
        review: new Date(1723683600000 /**'2024-08-15T01:00:00.000Z'*/),
      },
    }
    let cur_card = createEmptyCard(MOCK_NOW)
    let index = 0
    const review_at = new Date(1723683600000 /**'2024-08-15T01:00:00.000Z'*/)
    for (const _ of test) {
      const { collections: control, reschedule_item } = scheduler.reschedule(
        cur_card,
        reviews,
        {
          skipManual: false,
          update_memory_state: true,
          now: review_at,
        }
      )
      const scheduled_days = reschedule_item!.card.due.diff(
        cur_card.due,
        'days'
      )
      expect(control[control.length - 1]).toEqual(expected)
      expect(reschedule_item).toEqual({
        card: {
          ...expected.card,
          last_review: review_at,
          reps: cur_card.reps + 1,
        },
        log: {
          ...expected.log,
          rating: Rating.Manual,
          state: cur_card.state,
          due: cur_card.last_review || cur_card.due,
          last_elapsed_days: cur_card.elapsed_days,
          scheduled_days: scheduled_days,
          stability: cur_card.stability,
          difficulty: cur_card.difficulty,
          review: review_at,
        },
      } satisfies RecordLogItem)
      cur_card = control[index++].card
      // index++
    }
  })

  it('Handling the case of an empty set.', () => {
    const control = scheduler.reschedule(createEmptyCard(), [])
    expect(control).toEqual({
      collections: [],
      reschedule_item: null,
    })

    const control2 = scheduler.reschedule(createEmptyCard())
    expect(control2).toEqual({
      collections: [],
      reschedule_item: null,
    })
  })

  it('case : basic test', () => {
    const f = fsrs()
    const grades: Grade[] = [Rating.Good, Rating.Good, Rating.Good, Rating.Good]
    const reviews_at = [
      new Date(2024, 8, 13),
      new Date(2024, 8, 13),
      new Date(2024, 8, 17),
      new Date(2024, 8, 28),
    ]

    const reviews: FSRSHistory[] = []
    for (let i = 0; i < grades.length; i++) {
      reviews.push({
        rating: grades[i],
        review: reviews_at[i],
      })
    }

    const results_short = f.reschedule(createEmptyCard(), reviews, {
      skipManual: false,
    })
    const ivl_history_short = results_short.collections.map(
      (item) => item.card.scheduled_days
    )
    const s_history_short = results_short.collections.map(
      (item) => item.card.stability
    )
    const d_history_short = results_short.collections.map(
      (item) => item.card.difficulty
    )

    expect(results_short.reschedule_item).not.toBeNull()
    expect(results_short.collections.length).toEqual(4)
    expect(ivl_history_short).toEqual([0, 4, 14, 38])
    expect(s_history_short).toEqual([
      3.173, 4.46685806, 14.21728391, 37.90805078,
    ])
    expect(d_history_short).toEqual([
      5.28243442, 5.27296793, 5.26354498, 5.25416538,
    ])

    // switch long-term scheduler
    f.parameters.enable_short_term = false
    const results = f.reschedule(createEmptyCard(), reviews, {
      skipManual: false,
    })
    const ivl_history_long = results.collections.map(
      (item) => item.card.scheduled_days
    )
    const s_history_long = results.collections.map(
      (item) => item.card.stability
    )
    const d_history_long = results.collections.map(
      (item) => item.card.difficulty
    )
    expect(results.reschedule_item).not.toBeNull()
    expect(results.collections.length).toEqual(4)
    expect(ivl_history_long).toEqual([3, 4, 13, 37])
    expect(s_history_long).toEqual([3.173, 3.173, 12.96611898, 36.73449305])
    expect(d_history_long).toEqual([
      5.28243442, 5.27296793, 5.26354498, 5.25416538,
    ])
  })

  it('case : current card = reschedule card', () => {
    const grades: Grade[] = [Rating.Good, Rating.Good, Rating.Good, Rating.Good]
    const reviews_at: number[] = [
      Date.UTC(2024, 8, 13, 0, 0, 0),
      Date.UTC(2024, 8, 13, 0, 0, 0),
      Date.UTC(2024, 8, 17, 0, 0, 0),
      Date.UTC(2024, 8, 28, 0, 0, 0),
    ]

    const reviews: FSRSHistory[] = []
    for (let i = 0; i < grades.length; i++) {
      reviews.push({
        rating: grades[i],
        review: reviews_at[i],
      })
    }
    const current_card = {
      due: new Date(1730764800000 /** 2024-11-05T00:00:00.000Z */),
      stability: 37.90805078,
      difficulty: 5.25416538,
      elapsed_days: 11,
      scheduled_days: 9,
      reps: 5,
      lapses: 0,
      state: State.Review,
      last_review: Date.UTC(2024, 9, 27, 0, 0, 0),
    }

    const results_short = scheduler.reschedule(current_card, reviews, {
      recordLogHandler: (recordLog) => {
        return recordLog
      },
      skipManual: false,
      first_card: createEmptyCard(Date.UTC(2024, 8, 13, 0, 0, 0)),
      update_memory_state: true,
      now: Date.UTC(2024, 9, 27, 0, 0, 0),
    })
    expect(results_short.reschedule_item).toBeNull()
  })

  it('case : forget', () => {
    const grades: Grade[] = [Rating.Good, Rating.Good, Rating.Good, Rating.Good]
    const reviews_at: number[] = [
      Date.UTC(2024, 8, 13, 0, 0, 0),
      Date.UTC(2024, 8, 13, 0, 0, 0),
      Date.UTC(2024, 8, 17, 0, 0, 0),
      Date.UTC(2024, 8, 28, 0, 0, 0),
    ]

    const reviews: FSRSHistory[] = []
    for (let i = 0; i < grades.length; i++) {
      reviews.push({
        rating: grades[i],
        review: reviews_at[i],
      })
    }
    const first_card = createEmptyCard(Date.UTC(2024, 8, 28, 0, 0, 0))
    let current_card: Card = createEmptyCard()
    const history_card: Card[] = []
    for (const review of reviews) {
      const item = scheduler.next(
        current_card,
        review.review,
        <Grade>review.rating
      )
      current_card = item.card
      history_card.push(current_card)
    }
    const { card: forget_card } = scheduler.forget(
      current_card,
      Date.UTC(2024, 9, 27, 0, 0, 0)
    )
    current_card = forget_card

    const { reschedule_item } = scheduler.reschedule(current_card!, reviews, {
      first_card: first_card,
      update_memory_state: true,
      now: Date.UTC(2024, 9, 27, 0, 0, 0),
    })
    expect(reschedule_item).not.toBeNull()
    expect(reschedule_item!.card.due).toEqual(
      history_card[history_card.length - 1].due
    )
    expect(reschedule_item!.card.stability).toEqual(
      history_card[history_card.length - 1].stability
    )
    expect(reschedule_item!.card.difficulty).toEqual(
      history_card[history_card.length - 1].difficulty
    )
  })
})


================================================
File: __tests__/rollback.test.ts
================================================
import { createEmptyCard, fsrs, FSRS, Grade, Rating } from '../src/fsrs'

describe('FSRS rollback', () => {
  const f: FSRS = fsrs({
    w: [
      1.14, 1.01, 5.44, 14.67, 5.3024, 1.5662, 1.2503, 0.0028, 1.5489, 0.1763,
      0.9953, 2.7473, 0.0179, 0.3105, 0.3976, 0.0, 2.0902,
    ],
    enable_fuzz: false,
  })
  it('first rollback', () => {
    const card = createEmptyCard()
    const now = new Date(2022, 11, 29, 12, 30, 0, 0)
    const scheduling_cards = f.repeat(card, now)
    const grade: Grade[] = [Rating.Again, Rating.Hard, Rating.Good, Rating.Easy]
    for (const rating of grade) {
      const rollbackCard = f.rollback(
        scheduling_cards[rating].card,
        scheduling_cards[rating].log
      )
      expect(rollbackCard).toEqual(card)
    }
  })

  it('rollback 2', () => {
    let card = createEmptyCard()
    let now = new Date(2022, 11, 29, 12, 30, 0, 0)
    let scheduling_cards = f.repeat(card, now)
    card = scheduling_cards['4'].card
    now = card.due
    scheduling_cards = f.repeat(card, now)
    const grade: Grade[] = [Rating.Again, Rating.Hard, Rating.Good, Rating.Easy]
    for (const rating of grade) {
      const rollbackCard = f.rollback(
        scheduling_cards[rating].card,
        scheduling_cards[rating].log
      )
      expect(rollbackCard).toEqual(card)
    }
  })
})


================================================
File: __tests__/show_diff_message.test.ts
================================================
import { fixDate, show_diff_message } from '../src/fsrs'

test('show_diff_message_bad_type', () => {
  const TIMEUNITFORMAT_TEST = ['秒', '分', '时', '天', '月', '年']
  //https://github.com/ishiko732/ts-fsrs/issues/19
  const t1 = '1970-01-01T00:00:00.000Z'
  const t2 = '1970-01-02T00:00:00.000Z'
  const t3 = '1970-01-01 00:00:00'
  const t4 = '1970-01-02 00:00:00'

  const t5 = 0
  const t6 = 1000 * 60 * 60 * 24
  // @ts-ignore
  expect(show_diff_message(t2, t1)).toBe('1')
  // @ts-ignore
  expect(show_diff_message(t2, t1, true)).toEqual('1day')
  expect(fixDate(t2).dueFormat(fixDate(t1), true, TIMEUNITFORMAT_TEST)).toEqual(
    '1天'
  )

  // @ts-ignore
  expect(show_diff_message(t4, t3)).toBe('1')
  // @ts-ignore
  expect(show_diff_message(t4, t3, true)).toEqual('1day')
  expect(fixDate(t4).dueFormat(fixDate(t3), true, TIMEUNITFORMAT_TEST)).toEqual(
    '1天'
  )

  // @ts-ignore
  expect(show_diff_message(t6, t5)).toBe('1')
  // @ts-ignore
  expect(show_diff_message(t6, t5, true)).toEqual('1day')
  expect(fixDate(t6).dueFormat(fixDate(t5), true, TIMEUNITFORMAT_TEST)).toEqual(
    '1天'
  )
})

test('show_diff_message_min', () => {
  const TIMEUNITFORMAT_TEST = ['秒', '分', '时', '天', '月', '年']
  //https://github.com/ishiko732/ts-fsrs/issues/19
  const t1 = new Date()
  const t2 = new Date(t1.getTime() + 1000 * 60)
  const t3 = new Date(t1.getTime() + 1000 * 60 * 59)
  expect(show_diff_message(t2, t1)).toBe('1')
  expect(show_diff_message(t2, t1, true)).toEqual('1min')
  expect(fixDate(t2).dueFormat(fixDate(t1), true, TIMEUNITFORMAT_TEST)).toEqual(
    '1分'
  )

  expect(show_diff_message(t3, t1, true)).toEqual('59min')
  expect(fixDate(t3).dueFormat(fixDate(t1), true, TIMEUNITFORMAT_TEST)).toEqual(
    '59分'
  )
})

test('show_diff_message_hour', () => {
  const TIMEUNITFORMAT_TEST = ['秒', '分', '小时', '天', '月', '年']
  //https://github.com/ishiko732/ts-fsrs/issues/19
  const t1 = new Date()
  const t2 = new Date(t1.getTime() + 1000 * 60 * 60)
  const t3 = new Date(t1.getTime() + 1000 * 60 * 60 * 59)
  expect(show_diff_message(t2, t1)).toBe('1')

  expect(show_diff_message(t2, t1, true)).toEqual('1hour')
  expect(fixDate(t2).dueFormat(fixDate(t1), true, TIMEUNITFORMAT_TEST)).toEqual(
    '1小时'
  )

  expect(show_diff_message(t3, t1, true)).not.toBe('59hour')
  expect(
    fixDate(t3).dueFormat(fixDate(t1), true, TIMEUNITFORMAT_TEST)
  ).not.toEqual('59小时')

  expect(show_diff_message(t3, t1, true)).toBe('2day')
  expect(fixDate(t3).dueFormat(fixDate(t1), true, TIMEUNITFORMAT_TEST)).toEqual(
    '2天'
  )
})

test('show_diff_message_day', () => {
  const TIMEUNITFORMAT_TEST = ['秒', '分', '小时', '天', '个月', '年']
  //https://github.com/ishiko732/ts-fsrs/issues/19
  const t1 = new Date()
  const t2 = new Date(t1.getTime() + 1000 * 60 * 60 * 24)
  const t3 = new Date(t1.getTime() + 1000 * 60 * 60 * 24 * 30)
  const t4 = new Date(t1.getTime() + 1000 * 60 * 60 * 24 * 31)
  expect(show_diff_message(t2, t1)).toBe('1')
  expect(show_diff_message(t2, t1, true)).toEqual('1day')
  expect(fixDate(t2).dueFormat(fixDate(t1), true, TIMEUNITFORMAT_TEST)).toEqual(
    '1天'
  )

  expect(show_diff_message(t3, t1)).toBe('30')
  expect(show_diff_message(t3, t1, true)).toEqual('30day')
  expect(fixDate(t3).dueFormat(fixDate(t1), true, TIMEUNITFORMAT_TEST)).toEqual(
    '30天'
  )

  expect(show_diff_message(t4, t1)).not.toBe('31')
  expect(show_diff_message(t4, t1, true)).toEqual('1month')
  expect(fixDate(t4).dueFormat(fixDate(t1), true, TIMEUNITFORMAT_TEST)).toEqual(
    '1个月'
  )
})

test('show_diff_message_month', () => {
  const TIMEUNITFORMAT_TEST = ['秒', '分', '小时', '天', '个月', '年']
  //https://github.com/ishiko732/ts-fsrs/issues/19
  const t1 = new Date()
  const t2 = new Date(t1.getTime() + 1000 * 60 * 60 * 24 * 31)
  const t3 = new Date(t1.getTime() + 1000 * 60 * 60 * 24 * 31 * 12)
  const t4 = new Date(t1.getTime() + 1000 * 60 * 60 * 24 * 31 * 13)
  expect(show_diff_message(t2, t1)).toBe('1')
  expect(show_diff_message(t2, t1, true)).toEqual('1month')
  expect(fixDate(t2).dueFormat(fixDate(t1), true, TIMEUNITFORMAT_TEST)).toEqual(
    '1个月'
  )

  expect(show_diff_message(t3, t1)).not.toBe('12')
  expect(show_diff_message(t3, t1, true)).not.toEqual('12month')
  expect(
    fixDate(t3).dueFormat(fixDate(t1), true, TIMEUNITFORMAT_TEST)
  ).not.toEqual('12个月')

  expect(show_diff_message(t4, t1)).not.toBe('13')
  expect(show_diff_message(t4, t1, true)).toEqual('1year')
  expect(fixDate(t4).dueFormat(fixDate(t1), true, TIMEUNITFORMAT_TEST)).toEqual(
    '1年'
  )
})

test('show_diff_message_year', () => {
  const TIMEUNITFORMAT_TEST = ['秒', '分', '小时', '天', '个月', '年']
  //https://github.com/ishiko732/ts-fsrs/issues/19
  const t1 = new Date()
  const t2 = new Date(t1.getTime() + 1000 * 60 * 60 * 24 * 31 * 13)
  const t3 = new Date(
    t1.getTime() + 1000 * 60 * 60 * 24 * 31 * 13 + 1000 * 60 * 60 * 24
  )
  const t4 = new Date(
    t1.getTime() + 1000 * 60 * 60 * 24 * 31 * 24 + 1000 * 60 * 60 * 24
  )
  expect(show_diff_message(t2, t1)).toBe('1')
  expect(show_diff_message(t2, t1, true)).toEqual('1year')
  expect(fixDate(t2).dueFormat(fixDate(t1), true, TIMEUNITFORMAT_TEST)).toEqual(
    '1年'
  )

  expect(show_diff_message(t3, t1)).toBe('1')
  expect(show_diff_message(t3, t1, true)).toEqual('1year')
  expect(fixDate(t3).dueFormat(fixDate(t1), true, TIMEUNITFORMAT_TEST)).toEqual(
    '1年'
  )

  expect(show_diff_message(t4, t1)).toBe('2')
  expect(show_diff_message(t4, t1, true)).toEqual('2year')
  expect(fixDate(t4).dueFormat(fixDate(t1), true, TIMEUNITFORMAT_TEST)).toEqual(
    '2年'
  )
})

test('wrong timeUnit length', () => {
  const TIMEUNITFORMAT_TEST = ['年']
  const t1 = new Date()
  const t2 = new Date(t1.getTime() + 1000 * 60 * 60 * 24 * 31 * 13)
  expect(show_diff_message(t2, t1)).toBe('1')
  expect(show_diff_message(t2, t1, true)).toEqual('1year')
  expect(
    fixDate(t2).dueFormat(fixDate(t1), true, TIMEUNITFORMAT_TEST)
  ).not.toEqual('1年')
  expect(fixDate(t2).dueFormat(fixDate(t1), true, TIMEUNITFORMAT_TEST)).toEqual(
    '1year'
  )
})

test('Date data real type is string/number', () => {
  const TIMEUNITFORMAT_TEST = ['年']
  const t1 = new Date()
  const t2 = new Date(
    t1.getTime() + 1000 * 60 * 60 * 24 * 31 * 13
  ).toDateString()
  expect(show_diff_message(t2, t1.getTime())).toBe('1')
  expect(show_diff_message(t2, t1.toUTCString(), true)).toEqual('1year')
  expect(
    fixDate(t2).dueFormat(fixDate(t1), true, TIMEUNITFORMAT_TEST)
  ).not.toEqual('1年')
  expect(fixDate(t2).dueFormat(fixDate(t1), true, TIMEUNITFORMAT_TEST)).toEqual(
    '1year'
  )
})


================================================
File: __tests__/version.test.ts
================================================
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import { version } from '../package.json'
import { FSRSVersion } from '../src/fsrs'

test('TS-FSRS-Version', () => {
  // v3.5.7 using FSRS V5.0
  // test 3.5.7
  expect(version).toBe(FSRSVersion.split(' ')[0].slice(1))
})


================================================
File: __tests__/fixed/calc-elapsed-days.test.ts
================================================
import {
  createEmptyCard,
  dateDiffInDays,
  fsrs,
  FSRSHistory,
  Grade,
  Rating,
  State,
  FSRSState,
} from '../../src/fsrs'

/**
 * @see https://forums.ankiweb.net/t/feature-request-estimated-total-knowledge-over-time/53036/58?u=l.m.sherlock
 * @see https://ankiweb.net/shared/info/1613056169
 */
test('TS-FSRS-Simulator', () => {
  const f = fsrs({
    w: [
      1.1596, 1.7974, 13.1205, 49.3729, 7.2303, 0.5081, 1.5371, 0.001, 1.5052,
      0.1261, 0.9735, 1.8924, 0.1486, 0.2407, 2.1937, 0.1518, 3.0699, 0.4636,
      0.6048,
    ],
  })
  const rids = [1704468957000, 1704469645000, 1704599572000, 1705509507000]

  const expected = [13.1205, 17.3668145, 21.28550751, 39.63452215]
  let card = createEmptyCard(new Date(rids[0]))
  const grades: Grade[] = [Rating.Good, Rating.Good, Rating.Good, Rating.Good]
  for (let i = 0; i < rids.length; i++) {
    const now = new Date(rids[i])
    const log = f.next(card, now, grades[i])
    card = log.card
    expect(card.stability).toBeCloseTo(expected[i], 4)
  }
})


test('SSE use next_state', () => {
  const f = fsrs({
    w: [
      0.4911, 4.5674, 24.8836, 77.045, 7.5474, 0.1873, 1.7732, 0.001, 1.1112,
      0.152, 0.5728, 1.8747, 0.1733, 0.2449, 2.2905, 0.0, 2.9898, 0.0883,
      0.9033,
    ],
  })

  const rids = [
    1698678054940 /**2023-10-30T15:00:54.940Z */,
    1698678126399 /**2023-10-30T15:02:06.399Z */,
    1698688771401 /**2023-10-30T17:59:31.401Z */,
    1698688837021 /**2023-10-30T18:00:37.021Z */,
    1698688916440 /**2023-10-30T18:01:56.440Z */,
    1698698192380 /**2023-10-30T20:36:32.380Z */,
    1699260169343 /**2023-11-06T08:42:49.343Z */,
    1702718934003 /**2023-12-16T09:28:54.003Z */,
    1704910583686 /**2024-01-10T18:16:23.686Z */,
    1713000017248 /**2024-04-13T09:20:17.248Z */,
  ]
  const ratings: Rating[] = [3, 3, 1, 3, 3, 3, 0, 3, 0, 3]
  // 0,0,0,0,0,0,47,119
  let last = new Date(rids[0])
  let memoryState: FSRSState | null = null
  for (let i = 0; i < rids.length; i++) {
    const current = new Date(rids[i])
    const rating = ratings[i]
    const delta_t = dateDiffInDays(last, current)
    const nextStates = f.next_state(memoryState, delta_t, rating)
    if (rating !== 0) {
      last = new Date(rids[i])
    }

    console.debug(
      rids[i + 1],
      rids[i],
      delta_t,
      +nextStates.stability.toFixed(2),
      +nextStates.difficulty.toFixed(2)
    )
    memoryState = nextStates
  }
  expect(memoryState?.stability).toBeCloseTo(71.77)
})

test.skip('SSE 71.77', () => {
  const f = fsrs({
    w: [
      0.4911, 4.5674, 24.8836, 77.045, 7.5474, 0.1873, 1.7732, 0.001, 1.1112,
      0.152, 0.5728, 1.8747, 0.1733, 0.2449, 2.2905, 0.0, 2.9898, 0.0883,
      0.9033,
    ],
  })

  const rids = [
    1698678054940 /**2023-10-30T15:00:54.940Z */,
    1698678126399 /**2023-10-30T15:02:06.399Z */,
    1698688771401 /**2023-10-30T17:59:31.401Z */,
    1698688837021 /**2023-10-30T18:00:37.021Z */,
    1698688916440 /**2023-10-30T18:01:56.440Z */,
    1698698192380 /**2023-10-30T20:36:32.380Z */,
    1699260169343 /**2023-11-06T08:42:49.343Z */,
    1702718934003 /**2023-12-16T09:28:54.003Z */,
    1704910583686 /**2024-01-10T18:16:23.686Z */,
    1713000017248 /**2024-04-13T09:20:17.248Z */,
  ]
  const ratings: Rating[] = [3, 3, 1, 3, 3, 3, 0, 3, 0, 3]

  const expected = [
    {
      elapsed_days: 0,
      s: 24.88,
      d: 7.09,
    },
    {
      elapsed_days: 0,
      s: 26.95,
      d: 7.09,
    },
    {
      elapsed_days: 0,
      s: 24.46,
      d: 8.24,
    },
    {
      elapsed_days: 0,
      s: 26.48,
      d: 8.24,
    },
    {
      elapsed_days: 0,
      s: 28.69,
      d: 8.23,
    },
    {
      elapsed_days: 0,
      s: 31.08,
      d: 8.23,
    },
    {
      elapsed_days: 0,
      s: 47.44,
      d: 8.23,
    },
    {
      elapsed_days: 119,
      s: 71.77,
      d: 8.23,
    },
  ]

  let card = createEmptyCard(new Date(rids[0]))

  for (let i = 0; i < rids.length; i++) {
    const rating = ratings[i]
    if (rating == 0) {
      continue
    }

    const now = new Date(rids[i])
    const log = f.next(card, now, rating)
    card = log.card
    console.debug(i + 1)
    expect(card.elapsed_days).toBe(expected[i].elapsed_days)
    expect(card.stability).toBeCloseTo(expected[i].s, 2)
    expect(card.difficulty).toBeCloseTo(expected[i].d, 2)
  }

  expect(card.stability).toBeCloseTo(71.77)
})


================================================
File: __tests__/fixed/same-seed.test.ts
================================================
import { createEmptyCard, fsrs, Rating } from '../../src/fsrs'

describe('fuzz same seed', () => {
  const MOCK_NOW = new Date(2024, 7, 15)
  const size = 100

  // https://github.com/open-spaced-repetition/ts-fsrs/issues/113
  it('should be the same[short-term]', () => {
    const { card } = fsrs().next(createEmptyCard(), MOCK_NOW, Rating.Good)
    const scheduler = fsrs({ enable_fuzz: true })
    const MOCK_TOMORROW = new Date(2024, 7, 16)

    const timestamp: number[] = []
    for (let count = 0; count < size; count++) {
      setTimeout(() => {
        const _card = scheduler.next(card, MOCK_TOMORROW, Rating.Good).card
        timestamp.push(_card.due.getTime())
        if (timestamp.length === size) {
          expect(timestamp.every((value) => value === timestamp[0])).toBe(true)
        }
      }, 50)
    }
  })

  it('should be the same[long-term]', () => {
    const { card } = fsrs({ enable_short_term: false }).next(
      createEmptyCard(),
      MOCK_NOW,
      Rating.Good
    )
    const scheduler = fsrs({ enable_fuzz: true, enable_short_term: false })
    const MOCK_TOMORROW = new Date(2024, 7, 18)

    const timestamp: number[] = []
    for (let count = 0; count < size; count++) {
      setTimeout(() => {
        const _card = scheduler.next(card, MOCK_TOMORROW, Rating.Good).card
        timestamp.push(_card.due.getTime())
        if (timestamp.length === size) {
          expect(timestamp.every((value) => value === timestamp[0])).toBe(true)
        }
      }, 50)
    }
  })
})


================================================
File: __tests__/impl/abstract_scheduler.test.ts
================================================
import {
    createEmptyCard,
    fsrs,
    Grade,
    type IPreview,
    Rating,
} from '../../src/fsrs'

describe('basic scheduler', () => {
    const now = new Date()

    it('[Symbol.iterator]', () => {
        const card = createEmptyCard(now)
        const f = fsrs()
        const preview = f.repeat(card, now)
        const again = f.next(card, now, Rating.Again)
        const hard = f.next(card, now, Rating.Hard)
        const good = f.next(card, now, Rating.Good)
        const easy = f.next(card, now, Rating.Easy)

        const expect_preview = {
            [Rating.Again]: again,
            [Rating.Hard]: hard,
            [Rating.Good]: good,
            [Rating.Easy]: easy,
            [Symbol.iterator]: preview[Symbol.iterator],
        } satisfies IPreview
        expect(preview).toEqual(expect_preview)
        for (const item of preview) {
            expect(item).toEqual(expect_preview[<Grade>item.log.rating])
        }
        const iterator = preview[Symbol.iterator]()
        expect(iterator.next().value).toEqual(again)
        expect(iterator.next().value).toEqual(hard)
        expect(iterator.next().value).toEqual(good)
        expect(iterator.next().value).toEqual(easy)
        expect(iterator.next().done).toBeTruthy()
    })

})


================================================
File: __tests__/impl/basic_scheduler.test.ts
================================================
import {
  createEmptyCard,
  FSRSAlgorithm,
  generatorParameters,
  Grade,
  Rating,
} from '../../src/fsrs'
import BasicScheduler from '../../src/fsrs/impl/basic_scheduler'

describe('basic scheduler', () => {
  const params = generatorParameters()
  const algorithm = new FSRSAlgorithm(params)
  const now = new Date()

  it('[State.New]exist', () => {
    const card = createEmptyCard(now)
    const basicScheduler = new BasicScheduler(card, now, algorithm)
    const preview = basicScheduler.preview()
    const again = basicScheduler.review(Rating.Again)
    const hard = basicScheduler.review(Rating.Hard)
    const good = basicScheduler.review(Rating.Good)
    const easy = basicScheduler.review(Rating.Easy)
    expect(preview).toEqual({
      [Rating.Again]: again,
      [Rating.Hard]: hard,
      [Rating.Good]: good,
      [Rating.Easy]: easy,
      [Symbol.iterator]: basicScheduler[`previewIterator`].bind(basicScheduler),
    })
    for (const item of preview) {
      expect(item).toEqual(basicScheduler.review(<Grade>item.log.rating))
    }
    const iterator = preview[Symbol.iterator]()
    expect(iterator.next().value).toEqual(again)
    expect(iterator.next().value).toEqual(hard)
    expect(iterator.next().value).toEqual(good)
    expect(iterator.next().value).toEqual(easy)
    expect(iterator.next().done).toBeTruthy()
  })
  it('[State.New]invalid grade', () => {
    const card = createEmptyCard(now)
    const basicScheduler = new BasicScheduler(card, now, algorithm)
    expect(() => basicScheduler.review('invalid' as unknown as Grade)).toThrow(
      'Invalid grade'
    )
  })

  it('[State.Learning]exist', () => {
    const cardByNew = createEmptyCard(now)
    const { card } = new BasicScheduler(cardByNew, now, algorithm).review(
      Rating.Again
    )
    const basicScheduler = new BasicScheduler(card, now, algorithm)

    const preview = basicScheduler.preview()
    const again = basicScheduler.review(Rating.Again)
    const hard = basicScheduler.review(Rating.Hard)
    const good = basicScheduler.review(Rating.Good)
    const easy = basicScheduler.review(Rating.Easy)
    expect(preview).toEqual({
      [Rating.Again]: again,
      [Rating.Hard]: hard,
      [Rating.Good]: good,
      [Rating.Easy]: easy,
      [Symbol.iterator]: basicScheduler[`previewIterator`].bind(basicScheduler),
    })
    for (const item of preview) {
      expect(item).toEqual(basicScheduler.review(<Grade>item.log.rating))
    }
  })
  it('[State.Learning]invalid grade', () => {
    const cardByNew = createEmptyCard(now)
    const { card } = new BasicScheduler(cardByNew, now, algorithm).review(
      Rating.Again
    )
    const basicScheduler = new BasicScheduler(card, now, algorithm)
    expect(() => basicScheduler.review('invalid' as unknown as Grade)).toThrow(
      'Invalid grade'
    )
  })

  it('[State.Review]exist', () => {
    const cardByNew = createEmptyCard(now)
    const { card } = new BasicScheduler(cardByNew, now, algorithm).review(
      Rating.Easy
    )
    const basicScheduler = new BasicScheduler(card, now, algorithm)

    const preview = basicScheduler.preview()
    const again = basicScheduler.review(Rating.Again)
    const hard = basicScheduler.review(Rating.Hard)
    const good = basicScheduler.review(Rating.Good)
    const easy = basicScheduler.review(Rating.Easy)
    expect(preview).toEqual({
      [Rating.Again]: again,
      [Rating.Hard]: hard,
      [Rating.Good]: good,
      [Rating.Easy]: easy,
      [Symbol.iterator]: basicScheduler[`previewIterator`].bind(basicScheduler),
    })
    for (const item of preview) {
      expect(item).toEqual(basicScheduler.review(<Grade>item.log.rating))
    }
  })
  it('[State.Review]invalid grade', () => {
    const cardByNew = createEmptyCard(now)
    const { card } = new BasicScheduler(cardByNew, now, algorithm).review(
      Rating.Easy
    )
    const basicScheduler = new BasicScheduler(card, now, algorithm)
    expect(() => basicScheduler.review('invalid' as unknown as Grade)).toThrow(
      'Invalid grade'
    )
  })
})


================================================
File: __tests__/impl/long-term_scheduler.test.ts
================================================
import {
  CardInput,
  createEmptyCard,
  fsrs,
  generatorParameters,
  Grade,
  Rating,
  State,
} from '../../src/fsrs'

describe('Long-term  scheduler', () => {
  const w = [
    0.4197, 1.1869, 3.0412, 15.2441, 7.1434, 0.6477, 1.0007, 0.0674, 1.6597,
    0.1712, 1.1178, 2.0225, 0.0904, 0.3025, 2.1214, 0.2498, 2.9466, 0.4891,
    0.6468,
  ]
  const params = generatorParameters({ w, enable_short_term: false })
  const f = fsrs(params)
  // Grades => const grade: Grade[] = [Rating.Again, Rating.Hard, Rating.Good, Rating.Easy]

  test('test1', () => {
    let card = createEmptyCard()
    let now = new Date(2022, 11, 29, 12, 30, 0, 0)
    const ratings: Grade[] = [
      Rating.Good,
      Rating.Good,
      Rating.Good,
      Rating.Good,
      Rating.Good,
      Rating.Good,
      Rating.Again,
      Rating.Again,
      Rating.Good,
      Rating.Good,
      Rating.Good,
      Rating.Good,
      Rating.Good,
    ]
    const ivl_history: number[] = []
    const s_history: number[] = []
    const d_history: number[] = []
    for (const rating of ratings) {
      const record = f.repeat(card, now)[rating]
      // https://github.com/open-spaced-repetition/ts-fsrs/issues/105
      const next = fsrs(params).next(card, now, rating)
      expect(record).toEqual(next)

      card = record.card
      ivl_history.push(card.scheduled_days)
      s_history.push(card.stability)
      d_history.push(card.difficulty)
      now = card.due
    }
    expect(ivl_history).toEqual([
      3, 13, 48, 155, 445, 1158, 17, 3, 11, 37, 112, 307, 773,
    ])
    expect(s_history).toEqual([
      3.0412, 13.09130698, 48.15848988, 154.93732625, 445.05562739,
      1158.07779739, 16.63063166, 3.01732209, 11.42247264, 37.37521902,
      111.8752758, 306.5974569, 772.94031572,
    ])
    expect(d_history).toEqual([
      4.49094334, 4.26664289, 4.05746029, 3.86237659, 3.68044154, 3.51076891,
      4.69833071, 5.55956298, 5.26323756, 4.98688448, 4.72915759, 4.4888015,
      4.26464541,
    ])
  })

  test('test2', () => {
    let card = createEmptyCard()
    let now = new Date(2022, 11, 29, 12, 30, 0, 0)
    const ratings: Grade[] = [
      Rating.Again,
      Rating.Hard,
      Rating.Good,
      Rating.Easy,
      Rating.Again,
      Rating.Hard,
      Rating.Good,
      Rating.Easy,
    ]
    const ivl_history: number[] = []
    const s_history: number[] = []
    const d_history: number[] = []
    for (const rating of ratings) {
      const record = f.repeat(card, now)[rating]
      // https://github.com/open-spaced-repetition/ts-fsrs/issues/105
      const next = fsrs(params).next(card, now, rating)
      expect(record).toEqual(next)

      card = record.card
      ivl_history.push(card.scheduled_days)
      s_history.push(card.stability)
      d_history.push(card.difficulty)
      now = card.due
    }
    expect(ivl_history).toEqual([1, 2, 6, 41, 4, 7, 21, 133])
    expect(s_history).toEqual([
      0.4197, 1.0344317, 5.5356759, 41.0033667, 4.46605519, 6.67743292,
      20.88868155, 132.81849454,
    ])
    expect(d_history).toEqual([
      7.1434, 7.03653841, 6.64066485, 5.92312772, 6.44779861, 6.45995078,
      6.10293922, 5.36588547,
    ])
  })

  test('test3', () => {
    let card = createEmptyCard()
    let now = new Date(2022, 11, 29, 12, 30, 0, 0)
    const ratings: Grade[] = [
      Rating.Hard,
      Rating.Good,
      Rating.Easy,
      Rating.Again,
      Rating.Hard,
      Rating.Good,
      Rating.Easy,
      Rating.Again,
    ]
    const ivl_history: number[] = []
    const s_history: number[] = []
    const d_history: number[] = []
    for (const rating of ratings) {
      const record = f.repeat(card, now)[rating]
      // https://github.com/open-spaced-repetition/ts-fsrs/issues/105
      const next = fsrs(params).next(card, now, rating)
      expect(record).toEqual(next)

      card = record.card
      ivl_history.push(card.scheduled_days)
      s_history.push(card.stability)
      d_history.push(card.difficulty)
      now = card.due
    }
    expect(ivl_history).toEqual([2, 7, 54, 5, 8, 26, 171, 8])

    expect(s_history).toEqual([
      1.1869, 6.59167572, 53.76078737, 5.0853693, 8.09786749, 25.52991279,
      171.16195166, 8.11072373,
    ])
    expect(d_history).toEqual([
      6.23225985, 5.89059466, 5.14583392, 5.884097, 5.99269555, 5.667177,
      4.91430736, 5.71619151,
    ])
  })

  test('test4', () => {
    let card = createEmptyCard()
    let now = new Date(2022, 11, 29, 12, 30, 0, 0)
    const ratings: Grade[] = [
      Rating.Good,
      Rating.Easy,
      Rating.Again,
      Rating.Hard,
      Rating.Good,
      Rating.Easy,
      Rating.Again,
      Rating.Hard,
    ]
    const ivl_history: number[] = []
    const s_history: number[] = []
    const d_history: number[] = []
    for (const rating of ratings) {
      const record = f.repeat(card, now)[rating]
      // https://github.com/open-spaced-repetition/ts-fsrs/issues/105
      const next = fsrs(params).next(card, now, rating)
      expect(record).toEqual(next)

      card = record.card
      ivl_history.push(card.scheduled_days)
      s_history.push(card.stability)
      d_history.push(card.difficulty)
      now = card.due
    }
    expect(ivl_history).toEqual([3, 33, 4, 7, 26, 193, 9, 14])

    expect(s_history).toEqual([
      3.0412, 32.65484522, 4.22256838, 7.23250123, 25.52681848, 193.36619432,
      8.63899858, 14.31323884,
    ])
    expect(d_history).toEqual([
      4.49094334, 3.69538259, 4.83221448, 5.12078462, 4.85403286, 4.07165035,
      5.1050878, 5.34697075,
    ])
  })
  test('test5', () => {
    let card = createEmptyCard()
    let now = new Date(2022, 11, 29, 12, 30, 0, 0)
    const ratings: Grade[] = [
      Rating.Easy,
      Rating.Again,
      Rating.Hard,
      Rating.Good,
      Rating.Easy,
      Rating.Again,
      Rating.Hard,
      Rating.Good,
    ]
    const ivl_history: number[] = []
    const s_history: number[] = []
    const d_history: number[] = []
    for (const rating of ratings) {
      const record = f.repeat(card, now)[rating]
      // https://github.com/open-spaced-repetition/ts-fsrs/issues/105
      const next = fsrs(params).next(card, now, rating)
      expect(record).toEqual(next)

      card = record.card
      ivl_history.push(card.scheduled_days)
      s_history.push(card.stability)
      d_history.push(card.difficulty)
      now = card.due
    }
    expect(ivl_history).toEqual([15, 3, 6, 27, 240, 10, 17, 60])

    expect(s_history).toEqual([
      15.2441, 3.25621013, 6.32684549, 26.56339029, 239.70462771, 9.75621519,
      17.06035531, 59.59547542,
    ])
    expect(d_history).toEqual([
      1.16304343, 2.99573557, 3.59851762, 3.43436666, 2.60045771, 4.03816348,
      4.46259158, 4.24020203,
    ])
  })

  test('[State.(Re)Learning]switch long-term scheduler', () => {
    // Good(short)->Good(long)->Again(long)->Good(long)->Good(short)->Again(short)
    const ivl_history: number[] = []
    const s_history: number[] = []
    const d_history: number[] = []
    const state_history: string[] = []

    const grades: Grade[] = [
      Rating.Good,
      Rating.Good,
      Rating.Again,
      Rating.Good,
      Rating.Good,
      Rating.Again,
    ]
    const short_term = [true, false, false, false, true, true]

    let now = new Date(2022, 11, 29, 12, 30, 0, 0)
    let card = createEmptyCard(now)
    const f = fsrs({ w })
    for (let i = 0; i < grades.length; i++) {
      const grade = grades[i]
      const enable = short_term[i]
      f.parameters.enable_short_term = enable
      const record = f.repeat(card, now)[grade]
      // https://github.com/open-spaced-repetition/ts-fsrs/issues/105
      const next = fsrs({ ...params, enable_short_term: enable }).next(
        card,
        now,
        grade
      )
      expect(record).toEqual(next)

      card = record.card
      now = card.due
      ivl_history.push(card.scheduled_days)
      s_history.push(card.stability)
      d_history.push(card.difficulty)
      state_history.push(State[card.state])
    }

    expect(ivl_history).toEqual([0, 4, 1, 5, 19, 0])
    expect(s_history).toEqual([
      3.0412, 3.0412, 1.21778427, 4.73753014, 19.02294877, 3.20676576,
    ])
    expect(d_history).toEqual([
      4.49094334, 4.26664289, 5.24649844, 4.97127357, 4.71459886, 5.57136081,
    ])
    expect(state_history).toEqual([
      'Learning',
      'Review',
      'Review',
      'Review',
      'Review',
      'Relearning',
    ])
  })

  test('[Long-term]get_retrievability ', () => {
    const f = fsrs({
      w: [
        0.4072, 1.1829, 3.1262, 15.4722, 7.2102, 0.5316, 1.0651, 0.0234, 1.616,
        0.1544, 1.0824, 1.9813, 0.0953, 0.2975, 2.2042, 0.2407, 2.9466, 0.5034,
        0.6567,
      ],
      enable_short_term: false,
    })
    const now = '2024-08-03T18:15:34.500Z'
    const view_date = '2024-08-03T18:25:34.500Z'
    let card: CardInput = createEmptyCard(now)
    card = f.repeat(card, now)[Rating.Again].card
    let r = f.get_retrievability(card, view_date)
    expect(r).toEqual('100.00%')

    card = {
      cid: 81,
      due: '2024-08-04T18:15:34.500Z',
      stability: 0.4072,
      difficulty: 7.2102,
      elapsed_days: 0,
      scheduled_days: 1,
      reps: 1,
      lapses: 0,
      state: 'Review',
      last_review: '2024-08-03T18:15:34.500Z',
      nid: 82,
      suspended: false,
      deleted: false,
    } as CardInput
    r = f.get_retrievability(card, view_date)
    expect(r).toEqual('100.00%')
  })
})


================================================
File: __tests__/strategies/seed.test.ts
================================================
import {
  AbstractScheduler,
  Card,
  createEmptyCard,
  DefaultInitSeedStrategy,
  fsrs,
  GenSeedStrategyWithCardId,
  Rating,
  StrategyMode,
} from '../../src/fsrs'

interface ICard extends Card {
  card_id: number
}

describe('seed strategy', () => {
  it('default seed strategy', () => {
    const seedStrategy = DefaultInitSeedStrategy
    const f = fsrs().useStrategy(StrategyMode.SEED, seedStrategy)
    const now = Date.UTC(2022, 11, 29, 12, 30, 0, 0)

    const card = createEmptyCard<ICard>(now, (card: Card) => {
      Object.assign(card, { card_id: 555 })
      return card as ICard
    })

    const record = f.repeat(card, now)
    const scheduler = new f['Scheduler'](card, now, f, {
      seed: seedStrategy,
    }) as AbstractScheduler

    const seed = seedStrategy.bind(scheduler)()
    console.debug('seed', seed)

    expect(f['_seed']).toBe(seed)
  })
})

describe('seed strategy with card ID', () => {
  it('use seedStrategy', () => {
    const seedStrategy = GenSeedStrategyWithCardId('card_id')
    const f = fsrs().useStrategy(StrategyMode.SEED, seedStrategy)

    expect(f['strategyHandler'].get(StrategyMode.SEED)).toBe(seedStrategy)

    f.clearStrategy()
    expect(f['strategyHandler'].get(StrategyMode.SEED)).toBeUndefined()
  })
  it('clear seedStrategy', () => {
    const seedStrategy = GenSeedStrategyWithCardId('card_id')
    const f = fsrs().useStrategy(StrategyMode.SEED, seedStrategy)
    const now = Date.UTC(2022, 11, 29, 12, 30, 0, 0)

    const card = createEmptyCard<ICard>(now, (card: Card) => {
      Object.assign(card, { card_id: 555 })
      return card as ICard
    })

    f.repeat(card, now)
    let scheduler = new f['Scheduler'](card, now, f, {
      seed: seedStrategy,
    }) as AbstractScheduler

    const seed_with_card_id = seedStrategy.bind(scheduler)()
    console.debug('seed with card_id=555', seed_with_card_id)

    f.clearStrategy(StrategyMode.SEED)

    f.repeat(card, now)
    scheduler = new f['Scheduler'](card, now, f, {
      seed: DefaultInitSeedStrategy,
    }) as AbstractScheduler
    const basic_seed = DefaultInitSeedStrategy.bind(scheduler)()
    console.debug('basic_seed with card_id=555', basic_seed)

    expect(f['_seed']).toBe(basic_seed)

    expect(seed_with_card_id).not.toBe(basic_seed)
  })

  it('exist card_id', () => {
    const seedStrategy = GenSeedStrategyWithCardId('card_id')
    const f = fsrs().useStrategy(StrategyMode.SEED, seedStrategy)
    const now = Date.UTC(2022, 11, 29, 12, 30, 0, 0)

    const card = createEmptyCard<ICard>(now, (card: Card) => {
      Object.assign(card, { card_id: 555 })
      return card as ICard
    })

    const record = f.repeat(card, now)
    const scheduler = new f['Scheduler'](card, now, f, {
      seed: seedStrategy,
    }) as AbstractScheduler

    const seed = seedStrategy.bind(scheduler)()
    console.debug('seed with card_id=555', seed)

    expect(f['_seed']).toBe(seed)
  })

  it('not exist card_id', () => {
    const seedStrategy = GenSeedStrategyWithCardId('card_id')
    const f = fsrs().useStrategy(StrategyMode.SEED, seedStrategy)
    const now = Date.UTC(2022, 11, 29, 12, 30, 0, 0)

    const card = createEmptyCard<ICard>(now)

    const record = f.repeat(card, now)
    const scheduler = new f['Scheduler'](card, now, f, {
      seed: seedStrategy,
    }) as AbstractScheduler

    const seed = seedStrategy.bind(scheduler)()
    console.debug('seed with card_id=undefined(default)', seed)

    expect(f['_seed']).toBe(seed)
  })

  it('card_id = -1', () => {
    const seedStrategy = GenSeedStrategyWithCardId('card_id')
    const f = fsrs().useStrategy(StrategyMode.SEED, seedStrategy)
    const now = Date.UTC(2022, 11, 29, 12, 30, 0, 0)

    const card = createEmptyCard<ICard>(now, (card: Card) => {
      Object.assign(card, { card_id: -1 })
      return card as ICard
    })

    const record = f.repeat(card, now)
    const scheduler = new f['Scheduler'](card, now, f, {
      seed: seedStrategy,
    }) as AbstractScheduler

    const seed = seedStrategy.bind(scheduler)()
    console.debug('with card_id=-1', seed)

    expect(f['_seed']).toBe(seed)
    expect(f['_seed']).toBe('0')
  })

  it('card_id is undefined', () => {
    const seedStrategy = GenSeedStrategyWithCardId('card_id')
    const f = fsrs().useStrategy(StrategyMode.SEED, seedStrategy)
    const now = Date.UTC(2022, 11, 29, 12, 30, 0, 0)

    const card = createEmptyCard<ICard>(now, (card: Card) => {
      Object.assign(card, { card_id: undefined })
      return card as ICard
    })

    const item = f.next(card, now, Rating.Good)
    const scheduler = new f['Scheduler'](card, now, f, {
      seed: seedStrategy,
    }) as AbstractScheduler

    const seed = seedStrategy.bind(scheduler)()
    console.debug('seed with card_id=undefined', seed)

    expect(f['_seed']).toBe(seed)
    expect(f['_seed']).toBe(`${item.card.reps}`)
  })

  it('card_id is null', () => {
    const seedStrategy = GenSeedStrategyWithCardId('card_id')
    const f = fsrs().useStrategy(StrategyMode.SEED, seedStrategy)
    const now = Date.UTC(2022, 11, 29, 12, 30, 0, 0)

    const card = createEmptyCard<ICard>(now, (card: Card) => {
      Object.assign(card, { card_id: null })
      return card as ICard
    })

    const item = f.next(card, now, Rating.Good)
    const scheduler = new f['Scheduler'](card, now, f, {
      seed: seedStrategy,
    }) as AbstractScheduler

    const seed = seedStrategy.bind(scheduler)()
    console.debug('seed with card_id=null', seed)

    expect(f['_seed']).toBe(seed)
    expect(f['_seed']).toBe(`${item.card.reps}`)
  })
})


================================================
File: debug/index.ts
================================================
import { FSRSVersion } from '../src/fsrs'
import { runLongTerm } from './long-term'
import { runShortTerm } from './short-term'

console.log(FSRSVersion)


runShortTerm()
runLongTerm()

================================================
File: debug/long-term.ts
================================================
import assert from 'assert'
import { createEmptyCard, fsrs, Grade, Rating } from '../src/fsrs'

const f = fsrs({ enable_short_term: false })

function test1() {
  let card = createEmptyCard()
  let now = new Date(2022, 11, 29, 12, 30, 0, 0)
  const ratings: Grade[] = [
    Rating.Good,
    Rating.Good,
    Rating.Good,
    Rating.Good,
    Rating.Good,
    Rating.Good,
    Rating.Again,
    Rating.Again,
    Rating.Good,
    Rating.Good,
    Rating.Good,
    Rating.Good,
    Rating.Good,
  ]
  const ivl_history: number[] = []
  const s_history: number[] = []
  const d_history: number[] = []
  for (const rating of ratings) {
    const record = f.repeat(card, now)[rating]
    card = record.card
    ivl_history.push(card.scheduled_days)
    s_history.push(card.stability)
    d_history.push(card.difficulty)
    now = card.due
  }

  assert.deepStrictEqual(
    ivl_history,
    [3, 11, 36, 105, 277, 669, 13, 2, 4, 8, 15, 28, 51]
  )
  assert.deepStrictEqual(
    s_history,
    [
      3.1262, 11.38843914, 36.39366698, 105.18699429, 276.69089439,
      669.22510555, 12.54444945, 2.41539727, 4.33950844, 8.07463145,
      15.26080938, 28.22186641, 51.42879844,
    ]
  )
  assert.deepStrictEqual(
    d_history,
    [
      5.31457783, 5.26703555, 5.22060576, 5.17526243, 5.13098013, 5.08773404,
      7.12585323, 9.11628043, 8.97977831, 8.84647034, 8.71628178, 8.58913963,
      8.4649726,
    ]
  )
}

export function runLongTerm() {
  test1()
}


================================================
File: debug/short-term.ts
================================================
import assert from 'assert'
import { createEmptyCard, fsrs, Grade, Rating } from '../src/fsrs'

const f = fsrs()

function test1() {
  let card = createEmptyCard()
  let now = new Date(2022, 11, 29, 12, 30, 0, 0)
  const ratings: Grade[] = [
    Rating.Good,
    Rating.Good,
    Rating.Good,
    Rating.Good,
    Rating.Good,
    Rating.Good,
    Rating.Again,
    Rating.Again,
    Rating.Good,
    Rating.Good,
    Rating.Good,
    Rating.Good,
    Rating.Good,
  ]
  const ivl_history: number[] = []
  const s_history: number[] = []
  const d_history: number[] = []
  for (const rating of ratings) {
    const record = f.repeat(card, now)[rating]
    card = record.card
    ivl_history.push(card.scheduled_days)
    s_history.push(card.stability)
    d_history.push(card.difficulty)
    now = card.due
  }

  assert.deepStrictEqual(
    ivl_history,
    [0, 4, 15, 48, 136, 351, 0, 0, 7, 13, 24, 43, 77]
  )
  assert.deepStrictEqual(
    s_history,
    [
      3.1262, 4.35097949, 14.94870008, 47.78790366, 136.29251941, 351.35118365,
      9.99090459, 5.08074507, 7.07127426, 13.09253023, 23.92805755, 43.23645988,
      76.59611345,
    ]
  )
  assert.deepStrictEqual(
    d_history,
    [
      5.31457783, 5.26703555, 5.22060576, 5.17526243, 5.13098013, 5.08773404,
      7.12585323, 9.11628043, 8.97977831, 8.84647034, 8.71628178, 8.58913963,
      8.4649726,
    ]
  )
}

export function runShortTerm() {
  test1()
}


================================================
File: digrams/algorithm.pu
================================================
@startuml FSRSAlgorithmFunctionCalls

FSRSAlgorithm -down-> init_ds
init_ds -down-> init_difficulty
init_ds -down-> init_stability
FSRSAlgorithm -down-> next_ds
FSRSAlgorithm -down-> current_retrievability
FSRSAlgorithm -down-> next_interval
next_interval -down-> apply_fuzz
next_ds -down-> next_difficulty
next_ds -down-> next_forget_stability
next_ds -down-> next_recall_stability
next_difficulty -down-> constrain_difficulty
next_difficulty -down-> mean_reversion

@enduml


================================================
File: digrams/cardState.pu
================================================
@startuml cardStateTransition

state New {
    New : - again_due: scheduler(1)
    New : - hard_due: scheduler(5)
    New : - good_due: scheduler(10)
    New : - easy_interval: next_interval(easy.stability)
}

state Learning {
    Learning : - hard_interval: 0
    Learning : - good_interval: next_interval(good.stability)
    Learning : - easy_interval: should be at least 1 day more than good_interval
}

state Relearning {
    Relearning : Same scheduling as Learning.
}

state Review {
    Review : - generate card next DS,next_ds(s, last_d, last_s, retrievability)
    Review : - hard_interval: next_interval(s.hard.stability);
    Review : - good_interval: should be at least 1 day more than hard_interval
    Review : - easy_interval: should be at least 1 day more than good_interval
}



' 定义状态转换
[*] --> New
New -d-> Learning : again, hard, good
New -d-> Review : easy

Relearning --> Relearning : again, hard
Relearning -u-> Review : good, easy
Learning --> Learning : again, hard
Learning -u-> Review : good, easy


Review --> Relearning : again
Review --> Review : hard, good, easy



' 使用hidden语法来帮助布局
' New -[hidden]-> Relearning
Learning -[hidden]l-> Relearning

@enduml


================================================
File: digrams/class.pu
================================================
@startuml class_diagram.png

class FSRSAlgorithm {
  - param: FSRSParameters
  - intervalModifier
  - seed?
  + constructor(param: Partial<FSRSParameters>)
  + init_ds(s: SchedulingCard): void
  + next_ds(s: SchedulingCard, last_d: number, last_s: number, retrievability: number): void
  + init_stability(g: number): number
  + init_difficulty(g: number): number
  + apply_fuzz(ivl: number)
  + next_interval(s: number): int
  + next_difficulty(d: number, g: number): number
  + constrain_difficulty(difficulty: number)
  + mean_reversion(init: number, current: number): number
  + next_recall_stability(d: number, s: number, r: number, g: Rating): number
  + next_forget_stability(d: number, s: number, r: number): number
  + current_retrievability(t: number, s: number): number
}

' 定义枚举类型
enum StateType {
  New
  Learning
  Review
  Relearning
}

enum RatingType {
  Again
  Hard
  Good
  Easy
}

' 定义类
interface  Rating {
  + Again: RatingType = 1
  + Hard: RatingType
  + Good: RatingType
  + Easy: RatingType
}

interface State {
  + New: StateType = 0
  + Learning: StateType
  + Review: StateType
  + Relearning: StateType
}

interface ReviewLog {
  + rating: Rating
  + state: State
  + elapsed_days: number
  + scheduled_days: number
  + review: Date
}

interface RecordLogItem{
  card: Card, log: ReviewLog
}
interface RecordLog {
  + Again: RecordLogItem
  + Hard: RecordLogItem
  + Good: RecordLogItem
  + Easy: RecordLogItem
}

interface Card {
  + due: Date
  + stability: number
  + difficulty: number
  + elapsed_days: number
  + scheduled_days: number
  + reps: number
  + lapses: number
  + state: State
  + last_review?: Date
}

interface CardInput {
  + due: Date
  + stability: number
  + difficulty: number
  + elapsed_days: number
  + scheduled_days: number
  + reps: number
  + lapses: number
  + state: StateType | State
  + last_review?: Date
}

interface DateInput {
  + value: Date | number | string
}

interface FSRSParameters {
  + request_retention: number
  + maximum_interval: number
  + w: number[]
  + enable_fuzz: boolean
}

' 关联关系
State -- StateType
Rating -- RatingType
Card <|-- CardInput
RecordLogItem --> ReviewLog
RecordLogItem --> Card
RecordLog --> RecordLogItem
ReviewLog --> Rating
ReviewLog --> State
DateInput --|> Date



@enduml


================================================
File: digrams/models.pu
================================================
@startuml models

' 定义枚举类型
enum StateType {
  New
  Learning
  Review
  Relearning
}

enum RatingType {
  Again
  Hard
  Good
  Easy
}

' 定义类
interface  Rating {
  + Again: RatingType = 1
  + Hard: RatingType
  + Good: RatingType
  + Easy: RatingType
}

interface State {
  + New: StateType = 0
  + Learning: StateType
  + Review: StateType
  + Relearning: StateType
}

interface ReviewLog {
  + rating: Rating
  + state: State
  + elapsed_days: number
  + scheduled_days: number
  + review: Date
}

interface RecordLog {
  + Again: { card: Card, log: ReviewLog }
  + Hard: { card: Card, log: ReviewLog }
  + Good: { card: Card, log: ReviewLog }
  + Easy: { card: Card, log: ReviewLog }
}

interface Card {
  + due: Date
  + stability: number
  + difficulty: number
  + elapsed_days: number
  + scheduled_days: number
  + reps: number
  + lapses: number
  + state: State
  + last_review?: Date
}

interface CardInput {
  + due: Date
  + stability: number
  + difficulty: number
  + elapsed_days: number
  + scheduled_days: number
  + reps: number
  + lapses: number
  + state: StateType | State
  + last_review?: Date
}

interface DateInput {
  + value: Date | number | string
}

interface FSRSParameters {
  + request_retention: number
  + maximum_interval: number
  + w: number[]
  + enable_fuzz: boolean
}

' 关联关系
State -- StateType
Rating -- RatingType
Card <|-- CardInput
RecordLog --> ReviewLog
RecordLog --> Card
ReviewLog --> Rating
ReviewLog --> State
DateInput --|> Date

@enduml


================================================
File: example/example.html
================================================
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script crossorigin src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
    <script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script>
    <script src="https://cdn.tailwindcss.com?plugins=forms,typography,aspect-ratio,line-clamp"></script>
    <script type="module">
        // production
        import * as tsFsrs from 'https://cdn.jsdelivr.net/npm/ts-fsrs@latest/+esm';
        // development
        // Please start with this command: `pnpm run build`
        // you need install `Live Server` in vscode:
        // https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer
        // import * as tsFsrs from '../dist/index.mjs';

        window.tsfsrs = tsFsrs
    </script>
    <title>TS-FSRS example</title>
</head>
<body>
    <div id="root" class="max-w-full content-center"></div>
</body>
<script type="text/babel" src="./exampleComponent.jsx"></script>
<script type="text/babel" src="./example.jsx"></script>

</html>

================================================
File: example/example.jsx
================================================
/* eslint-disable no-undef */
const { generatorParameters, fsrs, createEmptyCard, State, Rating } = tsfsrs

const App = ({ cardRecord, logRecord }) => {
    const [cards, setCards] = React.useState(cardRecord || [])
    const [logs, setLogs] = React.useState(logRecord || [])
    const [f, setF] = React.useState(fsrs())
    return <React.Fragment className="w-full">
        <div className="text-xl text-center">Current TS-FSRS Version:{tsfsrs.FSRSVersion}</div>
        <div className="text-lg text-center">Example</div>
        <div className="flex">
            <ExampleCard cardRecord={cards} f={f} className={"flex-initial w-1/2 pr-2 "}/>
            <ExampleLog logRecord={logs} className={"flex-initial w-1/2"}/>
        </div>
        <div className="flex justify-center mt-8"><ExampleGenerator cards={cards} setCards={setCards} setLogs={setLogs} f={f} /></div>
        <ParamsComponent f={f} setF={setF}/>
    </React.Fragment>;
};
const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />);

================================================
File: example/exampleComponent.jsx
================================================
const { State, Rating, createEmptyCard, generatorParameters, fsrs } = tsfsrs;

const ExampleCard = ({ cardRecord, f, className }) => {
  return (
    <table className={className}>
      <thead>
        <tr>
          <th>index</th>
          <th>due</th>
          <th>state</th>
          <th>last_review</th>
          <th>stability</th>
          <th>difficulty</th>
          <th>R</th>
          <th>elapsed_days</th>
          <th>scheduled_days</th>
          <th>reps</th>
          <th>lapses</th>
        </tr>
      </thead>
      <tbody className="text-sm text-center">
        {cardRecord.map((record, index) => (
          <tr className="hover:bg-zinc-200">
            <td>{index + 1}</td>
            <td>{record.due.toLocaleString()}</td>
            <td>{`${record.state}(${State[record.state]})`}</td>
            <td>{record.last_review.toLocaleString()}</td>
            <td>{record.stability.toFixed(2)}</td>
            <td>{record.difficulty.toFixed(2)}</td>
            <td>{f.get_retrievability(record, record.due) || "/"}</td>
            <td>{record.elapsed_days}</td>
            <td>{record.scheduled_days}</td>
            <td>{record.reps}</td>
            <td>{record.lapses}</td>
          </tr>
        ))}
        <tr></tr>
      </tbody>
    </table>
  );
};

const ExampleLog = ({ logRecord, className }) => {
  return (
    <table className={className}>
      <thead>
        <tr>
          <th>#</th>
          <th>rating</th>
          <th>state</th>
          <th>due</th>
          <th>elapsed_days</th>
          <th>scheduled_days</th>
          <th>review</th>
        </tr>
      </thead>
      <tbody className="text-sm text-center">
        {logRecord.map((record) => (
          <tr className="hover:bg-zinc-200">
            <th>{"=>"}</th>
            <td>{`${record.rating}(${Rating[record.rating]})`}</td>
            <td>{`${record.state}(${State[record.state]})`}</td>
            <td>{record.due.toLocaleString()}</td>
            <td>{record.elapsed_days}</td>
            <td>{record.scheduled_days}</td>
            <td>{record.review.toLocaleString()}</td>
          </tr>
        ))}
        <tr></tr>
      </tbody>
    </table>
  );
};

const ScheduledButton = ({ rating, children, handleClick, tip }) => {
  return (
    <button
      onClick={(e) => handleClick(e, rating)}
      rating={rating}
      className="mx-4 px-4 py-2 font-semibold text-sm bg-sky-500 hover:bg-cyan-500 text-white rounded-none shadow-sm"
      title={tip}
      aria-label={tip}
    >
      {children}
    </button>
  );
};

const ExampleGenerator = ({ f, cards, setCards, setLogs, className }) => {
  const [review, setReview] = React.useState(new Date());
  React.useEffect(() => {
    if (cards.length > 0) {
      setReview(cards[cards.length - 1].due);
    }
  }, [cards]);
  const handleClick = (e, rating) => {
    console.log(Rating[rating]);
    const preCard =
      cards.length > 0 ? cards[cards.length - 1] : createEmptyCard(new Date());
    console.log(f.parameters);
    const scheduling_cards = f.repeat(preCard, preCard.due);
    console.log(scheduling_cards);
    setCards((pre) => [...pre, scheduling_cards[rating].card]);
    setLogs((pre) => [...pre, scheduling_cards[rating].log]);
  };
  return (
    <div>
      <ScheduledButton
        rating={Rating.Again}
        handleClick={handleClick}
        tip={"your answer was completely incorrect."}
      >
        Again
      </ScheduledButton>
      <ScheduledButton
        rating={Rating.Hard}
        handleClick={handleClick}
        tip={"your answer was partially correct, and/or you hesitated a lot."}
      >
        Hard
      </ScheduledButton>
      <ScheduledButton
        rating={Rating.Good}
        handleClick={handleClick}
        tip={"you answered correctly with a little bit of hesitation."}
      >
        Good
      </ScheduledButton>
      <ScheduledButton
        rating={Rating.Easy}
        handleClick={handleClick}
        tip={"you answered correctly with no hesitation."}
      >
        Easy
      </ScheduledButton>
      <div className="pt-4">Next review:{review.toLocaleString()}</div>
    </div>
  );
};

const ParamsComponent = ({ f, setF }) => {
  const handleChange = (key, value) => {
    console.log(key, value);
    setF((pre) => {
      const newF = fsrs({
        ...pre.parameters,
        [key]: value,
      });
      return newF;
    });
  };

  return (
    <div className="w-1/2 mx-auto">
      <div>Parameters:</div>
      <label htmlFor="request_retention" className="pr-4">
        request_retention:
      </label>
      <input
        name="request_retention"
        className="input input-bordered w-full"
        type="number"
        max={0.99}
        min={0.7}
        step={0.01}
        aria-label="request retention"
        defaultValue={f.parameters.request_retention}
        onChange={(e) =>
          e.target.value > 0 &&
          e.target.value < 1 &&
          handleChange("request_retention", e.target.value)
        }
      />
      <div className="label text-xs">
        Represents the probability of the target memory you want. Note that
        there is a trade-off between higher retention rates and higher
        repetition rates. It is recommended that you set this value between 0.8
        and 0.9.
      </div>

      <label htmlFor="maximum_interval" className="pr-4">
        maximum_interval:
      </label>
      <input
        name="maximum_interval"
        className="input input-bordered w-full"
        type="number"
        max={36500}
        min={7}
        step={1}
        aria-label="maximum interval"
        defaultValue={f.parameters.maximum_interval}
        onChange={(e) =>
          e.target.value > 0 && handleChange("maximum_interval", e.target.value)
        }
      />
      <div className="label text-xs">
        The maximum number of days between reviews of a card. When the review
        interval of a card reaches this number of days, the{" "}
        {`'hard', 'good', and 'easy'`} intervals will be consistent. The shorter
        the interval, the more workload.
      </div>

      <label htmlFor="w" className="pr-4">
        w:
      </label>
      <input
        name="w"
        className="input input-bordered w-full"
        type="text"
        aria-label="w"
        defaultValue={JSON.stringify(f.parameters.w)}
        onChange={(e) => {
          let value = e.target.value;
          if (value[0] !== "[") {
            value = `[${value}]`;
          }
          handleChange("w", JSON.parse(value));
        }}
      />
      <div className="label text-xs">
        Weights created by running the FSRS optimizer. By default, these are
        calculated from a sample dataset.
      </div>

      <div className="flex py-4">
        <label htmlFor="enable_fuzz" className="pr-4">
          enable_fuzz:
        </label>
        <input
          name="enable_fuzz"
          type="checkbox"
          className="toggle toggle-info mt-1"
          aria-label="enable fuzz"
          defaultChecked={f.parameters.enable_fuzz}
          onChange={(e) => handleChange("enable_fuzz", e.target.checked)}
        />
      </div>
      <div className="label text-xs">
        When enabled, this adds a small random delay to the new interval time to
        prevent cards from sticking together and always being reviewed on the
        same day.
      </div>

      <div className="flex py-4">
        <label htmlFor="enable_short-term" className="pr-4">
        enable_short-term:
        </label>
        <input
          name="enable_short-term"
          type="checkbox"
          className="toggle toggle-info mt-1"
          aria-label="enable short-term"
          defaultChecked={f.parameters.enable_short_term}
          onChange={(e) => handleChange("enable_short_term", e.target.checked)}
        />
      </div>
      <div className="label text-xs">
        When disabled, this allow user to skip the short-term schedule.
      </div>
      <hr className="pt-4"/>
      <div>
        <div>current apply parameters:</div>
        <div>{Object.keys(f.parameters).map(key=><p key={key}>
          {`${key} : ${JSON.stringify(f.parameters[key])}`}
        </p>)}</div>
      </div>
    </div>
  );
};


================================================
File: src/fsrs/abstract_scheduler.ts
================================================
import { FSRSAlgorithm } from './algorithm'
import { TypeConvert } from './convert'
import { dateDiffInDays, Grades } from './help'
import {
  type Card,
  type Grade,
  type RecordLogItem,
  State,
  Rating,
  type ReviewLog,
  type CardInput,
  type DateInput,
} from './models'
import { DefaultInitSeedStrategy } from './strategies'
import type { TSeedStrategy } from './strategies/types'
import type { IPreview, IScheduler } from './types'

export abstract class AbstractScheduler implements IScheduler {
  protected last: Card
  protected current: Card
  protected review_time: Date
  protected next: Map<Grade, RecordLogItem> = new Map()
  protected algorithm: FSRSAlgorithm
  private initSeedStrategy: TSeedStrategy

  constructor(
    card: CardInput | Card,
    now: DateInput,
    algorithm: FSRSAlgorithm,
    strategies: {
      seed: TSeedStrategy
    } = {
      seed: DefaultInitSeedStrategy,
    }
  ) {
    this.algorithm = algorithm
    this.initSeedStrategy = strategies.seed.bind(this)

    this.last = TypeConvert.card(card)
    this.current = TypeConvert.card(card)
    this.review_time = TypeConvert.time(now)
    this.init()
  }

  private init() {
    const { state, last_review } = this.current
    let interval = 0 // card.state === State.New => 0
    if (state !== State.New && last_review) {
      interval = dateDiffInDays(last_review, this.review_time)
    }
    this.current.last_review = this.review_time
    this.current.elapsed_days = interval
    this.current.reps += 1
    this.algorithm.seed = this.initSeedStrategy()
  }

  public preview(): IPreview {
    return {
      [Rating.Again]: this.review(Rating.Again),
      [Rating.Hard]: this.review(Rating.Hard),
      [Rating.Good]: this.review(Rating.Good),
      [Rating.Easy]: this.review(Rating.Easy),
      [Symbol.iterator]: this.previewIterator.bind(this),
    } satisfies IPreview
  }

  private *previewIterator(): IterableIterator<RecordLogItem> {
    for (const grade of Grades) {
      yield this.review(grade)
    }
  }

  public review(grade: Grade): RecordLogItem {
    const { state } = this.last
    let item: RecordLogItem | undefined
    switch (state) {
      case State.New:
        item = this.newState(grade)
        break
      case State.Learning:
      case State.Relearning:
        item = this.learningState(grade)
        break
      case State.Review:
        item = this.reviewState(grade)
        break
    }
    if (item) {
      return item
    }
    throw new Error('Invalid grade')
  }

  protected abstract newState(grade: Grade): RecordLogItem

  protected abstract learningState(grade: Grade): RecordLogItem

  protected abstract reviewState(grade: Grade): RecordLogItem

  protected buildLog(rating: Grade): ReviewLog {
    const { last_review, due, elapsed_days } = this.last

    return {
      rating: rating,
      state: this.current.state,
      due: last_review || due,
      stability: this.current.stability,
      difficulty: this.current.difficulty,
      elapsed_days: this.current.elapsed_days,
      last_elapsed_days: elapsed_days,
      scheduled_days: this.current.scheduled_days,
      review: this.review_time,
    } satisfies ReviewLog
  }
}


================================================
File: src/fsrs/alea.ts
================================================
// https://github.com/davidbau/seedrandom/blob/released/lib/alea.js
// A port of an algorithm by Johannes Baagøe <baagoe@baagoe.com>, 2010
// http://baagoe.com/en/RandomMusings/javascript/
// https://github.com/nquinlan/better-random-numbers-for-javascript-mirror
// Original work is under MIT license -

// Copyright (C) 2010 by Johannes Baagøe <baagoe@baagoe.org>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

type State = {
  c: number
  s0: number
  s1: number
  s2: number
}

class Alea {
  private c: number
  private s0: number
  private s1: number
  private s2: number

  constructor(seed?: number | string) {
    const mash = Mash()
    this.c = 1
    this.s0 = mash(' ')
    this.s1 = mash(' ')
    this.s2 = mash(' ')
    if (seed == null) seed = +new Date()
    this.s0 -= mash(seed)
    if (this.s0 < 0) this.s0 += 1
    this.s1 -= mash(seed)
    if (this.s1 < 0) this.s1 += 1
    this.s2 -= mash(seed)
    if (this.s2 < 0) this.s2 += 1
  }

  next(): number {
    const t = 2091639 * this.s0 + this.c * 2.3283064365386963e-10 // 2^-32
    this.s0 = this.s1
    this.s1 = this.s2
    this.s2 = t - (this.c = t | 0)
    return this.s2
  }

  set state(state: State) {
    this.c = state.c
    this.s0 = state.s0
    this.s1 = state.s1
    this.s2 = state.s2
  }

  get state(): State {
    return {
      c: this.c,
      s0: this.s0,
      s1: this.s1,
      s2: this.s2,
    }
  }
}

function Mash() {
  let n = 0xefc8249d
  return function mash(data: string | number): number {
    data = String(data)
    for (let i = 0; i < data.length; i++) {
      n += data.charCodeAt(i)
      let h = 0.02519603282416938 * n
      n = h >>> 0
      h -= n
      h *= n
      n = h >>> 0
      h -= n
      n += h * 0x100000000 // 2^32
    }
    return (n >>> 0) * 2.3283064365386963e-10 // 2^-32
  }
}

function alea(seed?: number | string) {
  const xg = new Alea(seed)
  const prng = () => xg.next()

  prng.int32 = () => (xg.next() * 0x100000000) | 0
  prng.double = () =>
    prng() + ((prng() * 0x200000) | 0) * 1.1102230246251565e-16 // 2^-53
  prng.state = () => xg.state
  prng.importState = (state: State) => {
    xg.state = state
    return prng
  }
  return prng
}

export { alea }


================================================
File: src/fsrs/algorithm.ts
================================================
import { generatorParameters } from './default'
import { FSRSParameters, FSRSState, Grade, Rating } from './models'
import type { int } from './types'
import { clamp, get_fuzz_range } from './help'
import { alea } from './alea'

/**
 * @default DECAY = -0.5
 */
export const DECAY: number = -0.5
/**
 * FACTOR = Math.pow(0.9, 1 / DECAY) - 1= 19 / 81
 *
 * $$\text{FACTOR} = \frac{19}{81}$$
 * @default FACTOR = 19 / 81
 */
export const FACTOR: number = 19 / 81

/**
 * @see https://github.com/open-spaced-repetition/fsrs4anki/wiki/The-Algorithm#fsrs-45
 */
export class FSRSAlgorithm {
  protected param!: FSRSParameters
  protected intervalModifier!: number
  protected _seed?: string

  constructor(params: Partial<FSRSParameters>) {
    this.param = new Proxy(
      generatorParameters(params),
      this.params_handler_proxy()
    )
    this.intervalModifier = this.calculate_interval_modifier(
      this.param.request_retention
    )
  }

  get interval_modifier(): number {
    return this.intervalModifier
  }

  set seed(seed: string) {
    this._seed = seed
  }

  /**
   * @see https://github.com/open-spaced-repetition/fsrs4anki/wiki/The-Algorithm#fsrs-45
   *
   * The formula used is: $$I(r,s) = (r^{\frac{1}{DECAY}} - 1) / FACTOR \times s$$
   * @param request_retention 0<request_retention<=1,Requested retention rate
   * @throws {Error} Requested retention rate should be in the range (0,1]
   */
  calculate_interval_modifier(request_retention: number): number {
    if (request_retention <= 0 || request_retention > 1) {
      throw new Error('Requested retention rate should be in the range (0,1]')
    }
    return +((Math.pow(request_retention, 1 / DECAY) - 1) / FACTOR).toFixed(8)
  }

  /**
   * Get the parameters of the algorithm.
   */
  get parameters(): FSRSParameters {
    return this.param
  }

  /**
   * Set the parameters of the algorithm.
   * @param params Partial<FSRSParameters>
   */
  set parameters(params: Partial<FSRSParameters>) {
    this.update_parameters(params)
  }

  protected params_handler_proxy(): ProxyHandler<FSRSParameters> {
    const _this = this satisfies FSRSAlgorithm
    return {
      set: function (
        target: FSRSParameters,
        prop: keyof FSRSParameters,
        value: FSRSParameters[keyof FSRSParameters]
      ) {
        if (prop === 'request_retention' && Number.isFinite(value)) {
          _this.intervalModifier = _this.calculate_interval_modifier(
            Number(value)
          )
        }
        Reflect.set(target, prop, value)
        return true
      },
    }
  }

  private update_parameters(params: Partial<FSRSParameters>): void {
    const _params = generatorParameters(params)
    for (const key in _params) {
      if (key in this.param) {
        const paramKey = key as keyof FSRSParameters
        this.param[paramKey] = _params[paramKey] as never
      }
    }
  }

  /**
   * The formula used is :
   * $$ S_0(G) = w_{G-1}$$
   * $$S_0 = \max \lbrace S_0,0.1\rbrace $$

   * @param g Grade (rating at Anki) [1.again,2.hard,3.good,4.easy]
   * @return Stability (interval when R=90%)
   */
  init_stability(g: Grade): number {
    return Math.max(this.param.w[g - 1], 0.1)
  }

  /**
   * The formula used is :
   * $$D_0(G) = w_4 - e^{(G-1) \cdot w_5} + 1 $$
   * $$D_0 = \min \lbrace \max \lbrace D_0(G),1 \rbrace,10 \rbrace$$
   * where the $$D_0(1)=w_4$$ when the first rating is good.
   *
   * @param {Grade} g Grade (rating at Anki) [1.again,2.hard,3.good,4.easy]
   * @return {number} Difficulty $$D \in [1,10]$$
   */
  init_difficulty(g: Grade): number {
    return this.constrain_difficulty(
      this.param.w[4] - Math.exp((g - 1) * this.param.w[5]) + 1
    )
  }

  /**
   * If fuzzing is disabled or ivl is less than 2.5, it returns the original interval.
   * @param {number} ivl - The interval to be fuzzed.
   * @param {number} elapsed_days t days since the last review
   * @return {number} - The fuzzed interval.
   **/
  apply_fuzz(ivl: number, elapsed_days: number): int {
    if (!this.param.enable_fuzz || ivl < 2.5) return Math.round(ivl) as int
    const generator = alea(this._seed) // I do not want others to directly access the seed externally.
    const fuzz_factor = generator()
    const { min_ivl, max_ivl } = get_fuzz_range(
      ivl,
      elapsed_days,
      this.param.maximum_interval
    )
    return Math.floor(fuzz_factor * (max_ivl - min_ivl + 1) + min_ivl) as int
  }

  /**
   *   @see The formula used is : {@link FSRSAlgorithm.calculate_interval_modifier}
   *   @param {number} s - Stability (interval when R=90%)
   *   @param {number} elapsed_days t days since the last review
   */
  next_interval(s: number, elapsed_days: number): int {
    const newInterval = Math.min(
      Math.max(1, Math.round(s * this.intervalModifier)),
      this.param.maximum_interval
    ) as int
    return this.apply_fuzz(newInterval, elapsed_days)
  }

  /**
   * @see https://github.com/open-spaced-repetition/fsrs4anki/issues/697
   */
  linear_damping(delta_d: number, old_d: number): number {
    return +(delta_d * (10 - old_d) / 9).toFixed(8)
  }

  /**
   * The formula used is :
   * $$\text{delta}_d = -w_6 \cdot (g - 3)$$
   * $$\text{next}_d = D + \text{linear damping}(\text{delta}_d , D)$$
   * $$D^\prime(D,R) = w_7 \cdot D_0(4) +(1 - w_7) \cdot \text{next}_d$$
   * @param {number} d Difficulty $$D \in [1,10]$$
   * @param {Grade} g Grade (rating at Anki) [1.again,2.hard,3.good,4.easy]
   * @return {number} $$\text{next}_D$$
   */
  next_difficulty(d: number, g: Grade): number {
    const delta_d = -this.param.w[6] * (g - 3)
    const next_d = d + this.linear_damping(delta_d, d)
    return this.constrain_difficulty(
      this.mean_reversion(this.init_difficulty(Rating.Easy), next_d)
    )
  }

  /**
   * The formula used is :
   * $$\min \lbrace \max \lbrace D_0,1 \rbrace,10\rbrace$$
   * @param {number} difficulty $$D \in [1,10]$$
   */
  constrain_difficulty(difficulty: number): number {
    return Math.min(Math.max(+difficulty.toFixed(8), 1), 10)
  }

  /**
   * The formula used is :
   * $$w_7 \cdot \text{init} +(1 - w_7) \cdot \text{current}$$
   * @param {number} init $$w_2 : D_0(3) = w_2 + (R-2) \cdot w_3= w_2$$
   * @param {number} current $$D - w_6 \cdot (R - 2)$$
   * @return {number} difficulty
   */
  mean_reversion(init: number, current: number): number {
    return +(this.param.w[7] * init + (1 - this.param.w[7]) * current).toFixed(
      8
    )
  }

  /**
   * The formula used is :
   * $$S^\prime_r(D,S,R,G) = S\cdot(e^{w_8}\cdot (11-D)\cdot S^{-w_9}\cdot(e^{w_{10}\cdot(1-R)}-1)\cdot w_{15}(\text{if} G=2) \cdot w_{16}(\text{if} G=4)+1)$$
   * @param {number} d Difficulty D \in [1,10]
   * @param {number} s Stability (interval when R=90%)
   * @param {number} r Retrievability (probability of recall)
   * @param {Grade} g Grade (Rating[0.again,1.hard,2.good,3.easy])
   * @return {number} S^\prime_r new stability after recall
   */
  next_recall_stability(d: number, s: number, r: number, g: Grade): number {
    const hard_penalty = Rating.Hard === g ? this.param.w[15] : 1
    const easy_bound = Rating.Easy === g ? this.param.w[16] : 1
    return +clamp(
      s *
        (1 +
          Math.exp(this.param.w[8]) *
            (11 - d) *
            Math.pow(s, -this.param.w[9]) *
            (Math.exp((1 - r) * this.param.w[10]) - 1) *
            hard_penalty *
            easy_bound),
      0.01,
      36500.0
    ).toFixed(8)
  }

  /**
   * The formula used is :
   * $$S^\prime_f(D,S,R) = w_{11}\cdot D^{-w_{12}}\cdot ((S+1)^{w_{13}}-1) \cdot e^{w_{14}\cdot(1-R)}$$
   * enable_short_term = true : $$S^\prime_f \in \min \lbrace \max \lbrace S^\prime_f,0.01\rbrace, \frac{S}{e^{w_{17} \cdot w_{18}}} \rbrace$$
   * enable_short_term = false : $$S^\prime_f \in \min \lbrace \max \lbrace S^\prime_f,0.01\rbrace, S \rbrace$$
   * @param {number} d Difficulty D \in [1,10]
   * @param {number} s Stability (interval when R=90%)
   * @param {number} r Retrievability (probability of recall)
   * @return {number} S^\prime_f new stability after forgetting
   */
  next_forget_stability(d: number, s: number, r: number): number {
    return +clamp(
      this.param.w[11] *
        Math.pow(d, -this.param.w[12]) *
        (Math.pow(s + 1, this.param.w[13]) - 1) *
        Math.exp((1 - r) * this.param.w[14]),
      0.01,
      36500.0
    ).toFixed(8)
  }

  /**
   * The formula used is :
   * $$S^\prime_s(S,G) = S \cdot e^{w_{17} \cdot (G-3+w_{18})}$$
   * @param {number} s Stability (interval when R=90%)
   * @param {Grade} g Grade (Rating[0.again,1.hard,2.good,3.easy])
   */
  next_short_term_stability(s: number, g: Grade): number {
    return +clamp(
      s * Math.exp(this.param.w[17] * (g - 3 + this.param.w[18])),
      0.01,
      36500.0
    ).toFixed(8)
  }

  /**
   * The formula used is :
   * $$R(t,S) = (1 + \text{FACTOR} \times \frac{t}{9 \cdot S})^{\text{DECAY}}$$
   * @param {number} elapsed_days t days since the last review
   * @param {number} stability Stability (interval when R=90%)
   * @return {number} r Retrievability (probability of recall)
   */
  forgetting_curve(elapsed_days: number, stability: number): number {
    return +Math.pow(1 + (FACTOR * elapsed_days) / stability, DECAY).toFixed(8)
  }

  /**
   * Calculates the next state of memory based on the current state, time elapsed, and grade.
   *
   * @param memory_state - The current state of memory, which can be null.
   * @param t - The time elapsed since the last review.
   * @param {Rating} g Grade (Rating[0.Manual,1.Again,2.Hard,3.Good,4.Easy])
   * @returns The next state of memory with updated difficulty and stability.
   */
  next_state(memory_state: FSRSState | null, t: number, g: number): FSRSState {
    const { difficulty: d, stability: s } = memory_state ?? {
      difficulty: 0,
      stability: 0,
    }
    if (t < 0) {
      throw new Error(`Invalid delta_t "${t}"`)
    }
    if (g < 0 || g > 4) {
      throw new Error(`Invalid grade "${g}"`)
    }
    if (d === 0 && s === 0) {
      return {
        difficulty: this.init_difficulty(g),
        stability: this.init_stability(g),
      }
    }
    if (g === 0) {
      return {
        difficulty: d,
        stability: s,
      }
    }
    if (d < 1 || s < 0.01) {
      throw new Error(`Invalid memory state { difficulty: ${d}, stability: ${s} }`)
    }
    const r = this.forgetting_curve(t, s)
    const s_after_success = this.next_recall_stability(d, s, r, g)
    const s_after_fail = this.next_forget_stability(d, s, r)
    const s_after_short_term = this.next_short_term_stability(s, g)
    let new_s = s_after_success
    if (g === 1) {
      let [w_17, w_18] = [0, 0]
      if (this.param.enable_short_term) {
        w_17 = this.param.w[17]
        w_18 = this.param.w[18]
      }
      const next_s_min = s / Math.exp(w_17 * w_18)
      new_s = clamp(next_s_min, 0.01, s_after_fail)
    }
    if (t === 0 && this.param.enable_short_term) {
      new_s = s_after_short_term
    }

    const new_d = this.next_difficulty(d, g)
    return { difficulty: new_d, stability: new_s }
  }
}


================================================
File: src/fsrs/convert.ts
================================================
import {
  Card,
  CardInput,
  DateInput,
  Rating,
  ReviewLog,
  ReviewLogInput,
  State,
} from './models'

export class TypeConvert {
  static card<T extends Card | CardInput>(card: T): Card {
    return {
      ...card,
      state: TypeConvert.state(card.state),
      due: TypeConvert.time(card.due),
      last_review: card.last_review
        ? TypeConvert.time(card.last_review)
        : undefined,
    } as Card
  }
  static rating(value: unknown): Rating {
    if (typeof value === 'string') {
      const firstLetter = value.charAt(0).toUpperCase()
      const restOfString = value.slice(1).toLowerCase()
      const ret = Rating[`${firstLetter}${restOfString}` as keyof typeof Rating]
      if (ret === undefined) {
        throw new Error(`Invalid rating:[${value}]`)
      }
      return ret
    } else if (typeof value === 'number') {
      return value as Rating
    }
    throw new Error(`Invalid rating:[${value}]`)
  }
  static state(value: unknown): State {
    if (typeof value === 'string') {
      const firstLetter = value.charAt(0).toUpperCase()
      const restOfString = value.slice(1).toLowerCase()
      const ret = State[`${firstLetter}${restOfString}` as keyof typeof State]
      if (ret === undefined) {
        throw new Error(`Invalid state:[${value}]`)
      }
      return ret
    } else if (typeof value === 'number') {
      return value as State
    }
    throw new Error(`Invalid state:[${value}]`)
  }
  static time(value: unknown): Date {
    if (typeof value === 'object' && value instanceof Date) {
      return value
    } else if (typeof value === 'string') {
      const timestamp = Date.parse(value)
      if (!isNaN(timestamp)) {
        return new Date(timestamp)
      } else {
        throw new Error(`Invalid date:[${value}]`)
      }
    } else if (typeof value === 'number') {
      return new Date(value)
    }
    throw new Error(`Invalid date:[${value}]`)
  }
  static review_log(log: ReviewLogInput | ReviewLog): ReviewLog {
    return {
      ...log,
      due: TypeConvert.time(log.due),
      rating: TypeConvert.rating(log.rating),
      state: TypeConvert.state(log.state),
      review: TypeConvert.time(log.review),
    } satisfies ReviewLog
  }
}


================================================
File: src/fsrs/default.ts
================================================
import { Card, DateInput, FSRSParameters, State } from './models'
import { TypeConvert } from './convert'

export const default_request_retention = 0.9
export const default_maximum_interval = 36500
export const default_w = [
  0.40255, 1.18385, 3.173, 15.69105, 7.1949, 0.5345, 1.4604, 0.0046, 1.54575,
  0.1192, 1.01925, 1.9395, 0.11, 0.29605, 2.2698, 0.2315, 2.9898, 0.51655,
  0.6621,
]
export const default_enable_fuzz = false
export const default_enable_short_term = true

export const FSRSVersion: string = 'v4.6.0 using FSRS-5.0'

export const generatorParameters = (
  props?: Partial<FSRSParameters>
): FSRSParameters => {
  let w = default_w
  if (props?.w) {
    if (props.w.length === 19) {
      w = props?.w
    } else if (props.w.length === 17) {
      w = props?.w.concat([0.0, 0.0])
      w[4] = +(w[5] * 2.0 + w[4]).toFixed(8)
      w[5] = +(Math.log(w[5] * 3.0 + 1.0) / 3.0).toFixed(8)
      w[6] = +(w[6] + 0.5).toFixed(8)
      console.debug('[FSRS V5]auto fill w to 19 length')
    }
  }
  return {
    request_retention: props?.request_retention || default_request_retention,
    maximum_interval: props?.maximum_interval || default_maximum_interval,
    w: w,
    enable_fuzz: props?.enable_fuzz ?? default_enable_fuzz,
    enable_short_term: props?.enable_short_term ?? default_enable_short_term,
  } satisfies FSRSParameters
}

/**
 * Create an empty card
 * @param now Current time
 * @param afterHandler Convert the result to another type. (Optional)
 * @example
 * ```
 * const card: Card = createEmptyCard(new Date());
 * ```
 * @example
 * ```
 * interface CardUnChecked
 *   extends Omit<Card, "due" | "last_review" | "state"> {
 *   cid: string;
 *   due: Date | number;
 *   last_review: Date | null | number;
 *   state: StateType;
 * }
 *
 * function cardAfterHandler(card: Card) {
 *      return {
 *       ...card,
 *       cid: "test001",
 *       state: State[card.state],
 *       last_review: card.last_review ?? null,
 *     } as CardUnChecked;
 * }
 *
 * const card: CardUnChecked = createEmptyCard(new Date(), cardAfterHandler);
 * ```
 */
export function createEmptyCard<R = Card>(
  now?: DateInput,
  afterHandler?: (card: Card) => R
): R {
  const emptyCard: Card = {
    due: now ? TypeConvert.time(now) : new Date(),
    stability: 0,
    difficulty: 0,
    elapsed_days: 0,
    scheduled_days: 0,
    reps: 0,
    lapses: 0,
    state: State.New,
    last_review: undefined,
  }
  if (afterHandler && typeof afterHandler === 'function') {
    return afterHandler(emptyCard)
  } else {
    return emptyCard as R
  }
}


================================================
File: src/fsrs/fsrs.ts
================================================
import {
  Card,
  CardInput,
  DateInput,
  FSRSHistory,
  FSRSParameters,
  Grade,
  Rating,
  RecordLogItem,
  ReviewLog,
  ReviewLogInput,
  State,
} from './models'
import {
  type IPreview,
  type IReschedule,
  type RescheduleOptions,
  type IScheduler,
} from './types'
import { FSRSAlgorithm } from './algorithm'
import { TypeConvert } from './convert'
import BasicScheduler from './impl/basic_scheduler'
import LongTermScheduler from './impl/long_term_scheduler'
import { createEmptyCard } from './default'
import { Reschedule } from './reschedule'
import { DefaultInitSeedStrategy } from './strategies/seed'
import {
  StrategyMode,
  type TSeedStrategy,
  type TSchedulerStrategy,
  type TStrategyHandler,
} from './strategies/types'

export class FSRS extends FSRSAlgorithm {
  private strategyHandler = new Map<StrategyMode, TStrategyHandler>()
  private Scheduler: TSchedulerStrategy
  constructor(param: Partial<FSRSParameters>) {
    super(param)
    const { enable_short_term } = this.parameters
    this.Scheduler = enable_short_term ? BasicScheduler : LongTermScheduler
  }

  protected override params_handler_proxy(): ProxyHandler<FSRSParameters> {
    const _this = this satisfies FSRS
    return {
      set: function (
        target: FSRSParameters,
        prop: keyof FSRSParameters,
        value: FSRSParameters[keyof FSRSParameters]
      ) {
        if (prop === 'request_retention' && Number.isFinite(value)) {
          _this.intervalModifier = _this.calculate_interval_modifier(
            Number(value)
          )
        } else if (prop === 'enable_short_term') {
          _this.Scheduler = value === true ? BasicScheduler : LongTermScheduler
        }
        Reflect.set(target, prop, value)
        return true
      },
    }
  }

  useStrategy<T extends StrategyMode>(
    mode: T,
    handler: TStrategyHandler<T>
  ): this {
    this.strategyHandler.set(mode, handler)
    return this
  }

  clearStrategy(mode?: StrategyMode): this {
    if (mode) {
      this.strategyHandler.delete(mode)
    } else {
      this.strategyHandler.clear()
    }
    return this
  }

  private getScheduler(card: CardInput | Card, now: DateInput): IScheduler {
    const seedStrategy = this.strategyHandler.get(StrategyMode.SEED) as
      | TSeedStrategy
      | undefined

    // Strategy scheduler
    const schedulerStrategy = this.strategyHandler.get(
      StrategyMode.SCHEDULER
    ) as TSchedulerStrategy | undefined

    const Scheduler = schedulerStrategy || this.Scheduler
    const Seed = seedStrategy || DefaultInitSeedStrategy
    const instance = new Scheduler(card, now, this, {
      seed: Seed,
    })

    return instance
  }

  /**
   * Display the collection of cards and logs for the four scenarios after scheduling the card at the current time.
   * @param card Card to be processed
   * @param now Current time or scheduled time
   * @param afterHandler Convert the result to another type. (Optional)
   * @example
   * ```
   * const card: Card = createEmptyCard(new Date());
   * const f = fsrs();
   * const recordLog = f.repeat(card, new Date());
   * ```
   * @example
   * ```
   * interface RevLogUnchecked
   *   extends Omit<ReviewLog, "due" | "review" | "state" | "rating"> {
   *   cid: string;
   *   due: Date | number;
   *   state: StateType;
   *   review: Date | number;
   *   rating: RatingType;
   * }
   *
   * interface RepeatRecordLog {
   *   card: CardUnChecked; //see method: createEmptyCard
   *   log: RevLogUnchecked;
   * }
   *
   * function repeatAfterHandler(recordLog: RecordLog) {
   *     const record: { [key in Grade]: RepeatRecordLog } = {} as {
   *       [key in Grade]: RepeatRecordLog;
   *     };
   *     for (const grade of Grades) {
   *       record[grade] = {
   *         card: {
   *           ...(recordLog[grade].card as Card & { cid: string }),
   *           due: recordLog[grade].card.due.getTime(),
   *           state: State[recordLog[grade].card.state] as StateType,
   *           last_review: recordLog[grade].card.last_review
   *             ? recordLog[grade].card.last_review!.getTime()
   *             : null,
   *         },
   *         log: {
   *           ...recordLog[grade].log,
   *           cid: (recordLog[grade].card as Card & { cid: string }).cid,
   *           due: recordLog[grade].log.due.getTime(),
   *           review: recordLog[grade].log.review.getTime(),
   *           state: State[recordLog[grade].log.state] as StateType,
   *           rating: Rating[recordLog[grade].log.rating] as RatingType,
   *         },
   *       };
   *     }
   *     return record;
   * }
   * const card: Card = createEmptyCard(new Date(), cardAfterHandler); //see method:  createEmptyCard
   * const f = fsrs();
   * const recordLog = f.repeat(card, new Date(), repeatAfterHandler);
   * ```
   */
  repeat<R = IPreview>(
    card: CardInput | Card,
    now: DateInput,
    afterHandler?: (recordLog: IPreview) => R
  ): R {
    const instance = this.getScheduler(card, now)
    const recordLog = instance.preview()
    if (afterHandler && typeof afterHandler === 'function') {
      return afterHandler(recordLog)
    } else {
      return recordLog as R
    }
  }

  /**
   * Display the collection of cards and logs for the card scheduled at the current time, after applying a specific grade rating.
   * @param card Card to be processed
   * @param now Current time or scheduled time
   * @param grade Rating of the review (Again, Hard, Good, Easy)
   * @param afterHandler Convert the result to another type. (Optional)
   * @example
   * ```
   * const card: Card = createEmptyCard(new Date());
   * const f = fsrs();
   * const recordLogItem = f.next(card, new Date(), Rating.Again);
   * ```
   * @example
   * ```
   * interface RevLogUnchecked
   *   extends Omit<ReviewLog, "due" | "review" | "state" | "rating"> {
   *   cid: string;
   *   due: Date | number;
   *   state: StateType;
   *   review: Date | number;
   *   rating: RatingType;
   * }
   *
   * interface NextRecordLog {
   *   card: CardUnChecked; //see method: createEmptyCard
   *   log: RevLogUnchecked;
   * }
   *
  function nextAfterHandler(recordLogItem: RecordLogItem) {
    const recordItem = {
      card: {
        ...(recordLogItem.card as Card & { cid: string }),
        due: recordLogItem.card.due.getTime(),
        state: State[recordLogItem.card.state] as StateType,
        last_review: recordLogItem.card.last_review
          ? recordLogItem.card.last_review!.getTime()
          : null,
      },
      log: {
        ...recordLogItem.log,
        cid: (recordLogItem.card as Card & { cid: string }).cid,
        due: recordLogItem.log.due.getTime(),
        review: recordLogItem.log.review.getTime(),
        state: State[recordLogItem.log.state] as StateType,
        rating: Rating[recordLogItem.log.rating] as RatingType,
      },
    };
    return recordItem
  }
   * const card: Card = createEmptyCard(new Date(), cardAfterHandler); //see method:  createEmptyCard
   * const f = fsrs();
   * const recordLogItem = f.repeat(card, new Date(), Rating.Again, nextAfterHandler);
   * ```
   */
  next<R = RecordLogItem>(
    card: CardInput | Card,
    now: DateInput,
    grade: Grade,
    afterHandler?: (recordLog: RecordLogItem) => R
  ): R {
    const instance = this.getScheduler(card, now)
    const g = TypeConvert.rating(grade)
    if (g === Rating.Manual) {
      throw new Error('Cannot review a manual rating')
    }
    const recordLogItem = instance.review(g)
    if (afterHandler && typeof afterHandler === 'function') {
      return afterHandler(recordLogItem)
    } else {
      return recordLogItem as R
    }
  }

  /**
   * Get the retrievability of the card
   * @param card  Card to be processed
   * @param now  Current time or scheduled time
   * @param format  default:true , Convert the result to another type. (Optional)
   * @returns  The retrievability of the card,if format is true, the result is a string, otherwise it is a number
   */
  get_retrievability<T extends boolean>(
    card: CardInput | Card,
    now?: DateInput,
    format: T = true as T
  ): T extends true ? string : number {
    const processedCard = TypeConvert.card(card)
    now = now ? TypeConvert.time(now) : new Date()
    const t =
      processedCard.state !== State.New
        ? Math.max(now.diff(processedCard.last_review as Date, 'days'), 0)
        : 0
    const r =
      processedCard.state !== State.New
        ? this.forgetting_curve(t, +processedCard.stability.toFixed(8))
        : 0
    return (format ? `${(r * 100).toFixed(2)}%` : r) as T extends true
      ? string
      : number
  }

  /**
   *
   * @param card Card to be processed
   * @param log last review log
   * @param afterHandler Convert the result to another type. (Optional)
   * @example
   * ```
   * const now = new Date();
   * const f = fsrs();
   * const emptyCardFormAfterHandler = createEmptyCard(now);
   * const repeatFormAfterHandler = f.repeat(emptyCardFormAfterHandler, now);
   * const { card, log } = repeatFormAfterHandler[Rating.Hard];
   * const rollbackFromAfterHandler = f.rollback(card, log);
   * ```
   *
   * @example
   * ```
   * const now = new Date();
   * const f = fsrs();
   * const emptyCardFormAfterHandler = createEmptyCard(now, cardAfterHandler);  //see method: createEmptyCard
   * const repeatFormAfterHandler = f.repeat(emptyCardFormAfterHandler, now, repeatAfterHandler); //see method: fsrs.repeat()
   * const { card, log } = repeatFormAfterHandler[Rating.Hard];
   * const rollbackFromAfterHandler = f.rollback(card, log, cardAfterHandler);
   * ```
   */
  rollback<R = Card>(
    card: CardInput | Card,
    log: ReviewLogInput,
    afterHandler?: (prevCard: Card) => R
  ): R {
    const processedCard = TypeConvert.card(card)
    const processedLog = TypeConvert.review_log(log)
    if (processedLog.rating === Rating.Manual) {
      throw new Error('Cannot rollback a manual rating')
    }
    let last_due, last_review, last_lapses
    switch (processedLog.state) {
      case State.New:
        last_due = processedLog.due
        last_review = undefined
        last_lapses = 0
        break
      case State.Learning:
      case State.Relearning:
      case State.Review:
        last_due = processedLog.review
        last_review = processedLog.due
        last_lapses =
          processedCard.lapses -
          (processedLog.rating === Rating.Again &&
          processedLog.state === State.Review
            ? 1
            : 0)
        break
    }

    const prevCard: Card = {
      ...processedCard,
      due: last_due,
      stability: processedLog.stability,
      difficulty: processedLog.difficulty,
      elapsed_days: processedLog.last_elapsed_days,
      scheduled_days: processedLog.scheduled_days,
      reps: Math.max(0, processedCard.reps - 1),
      lapses: Math.max(0, last_lapses),
      state: processedLog.state,
      last_review: last_review,
    }
    if (afterHandler && typeof afterHandler === 'function') {
      return afterHandler(prevCard)
    } else {
      return prevCard as R
    }
  }

  /**
   *
   * @param card Card to be processed
   * @param now Current time or scheduled time
   * @param reset_count Should the review count information(reps,lapses) be reset. (Optional)
   * @param afterHandler Convert the result to another type. (Optional)
   * @example
   * ```
   * const now = new Date();
   * const f = fsrs();
   * const emptyCard = createEmptyCard(now);
   * const scheduling_cards = f.repeat(emptyCard, now);
   * const { card, log } = scheduling_cards[Rating.Hard];
   * const forgetCard = f.forget(card, new Date(), true);
   * ```
   *
   * @example
   * ```
   * interface RepeatRecordLog {
   *   card: CardUnChecked; //see method: createEmptyCard
   *   log: RevLogUnchecked; //see method: fsrs.repeat()
   * }
   *
   * function forgetAfterHandler(recordLogItem: RecordLogItem): RepeatRecordLog {
   *     return {
   *       card: {
   *         ...(recordLogItem.card as Card & { cid: string }),
   *         due: recordLogItem.card.due.getTime(),
   *         state: State[recordLogItem.card.state] as StateType,
   *         last_review: recordLogItem.card.last_review
   *           ? recordLogItem.card.last_review!.getTime()
   *           : null,
   *       },
   *       log: {
   *         ...recordLogItem.log,
   *         cid: (recordLogItem.card as Card & { cid: string }).cid,
   *         due: recordLogItem.log.due.getTime(),
   *         review: recordLogItem.log.review.getTime(),
   *         state: State[recordLogItem.log.state] as StateType,
   *         rating: Rating[recordLogItem.log.rating] as RatingType,
   *       },
   *     };
   * }
   * const now = new Date();
   * const f = fsrs();
   * const emptyCardFormAfterHandler = createEmptyCard(now, cardAfterHandler); //see method:  createEmptyCard
   * const repeatFormAfterHandler = f.repeat(emptyCardFormAfterHandler, now, repeatAfterHandler); //see method: fsrs.repeat()
   * const { card } = repeatFormAfterHandler[Rating.Hard];
   * const forgetFromAfterHandler = f.forget(card, date_scheduler(now, 1, true), false, forgetAfterHandler);
   * ```
   */
  forget<R = RecordLogItem>(
    card: CardInput | Card,
    now: DateInput,
    reset_count: boolean = false,
    afterHandler?: (recordLogItem: RecordLogItem) => R
  ): R {
    const processedCard = TypeConvert.card(card)
    now = TypeConvert.time(now)
    const scheduled_days =
      processedCard.state === State.New
        ? 0
        : now.diff(processedCard.last_review as Date, 'days')
    const forget_log: ReviewLog = {
      rating: Rating.Manual,
      state: processedCard.state,
      due: processedCard.due,
      stability: processedCard.stability,
      difficulty: processedCard.difficulty,
      elapsed_days: 0,
      last_elapsed_days: processedCard.elapsed_days,
      scheduled_days: scheduled_days,
      review: now,
    }
    const forget_card: Card = {
      ...processedCard,
      due: now,
      stability: 0,
      difficulty: 0,
      elapsed_days: 0,
      scheduled_days: 0,
      reps: reset_count ? 0 : processedCard.reps,
      lapses: reset_count ? 0 : processedCard.lapses,
      state: State.New,
      last_review: processedCard.last_review,
    }
    const recordLogItem: RecordLogItem = { card: forget_card, log: forget_log }
    if (afterHandler && typeof afterHandler === 'function') {
      return afterHandler(recordLogItem)
    } else {
      return recordLogItem as R
    }
  }

  /**
   * Reschedules the current card and returns the rescheduled collections and reschedule item.
   *
   * @template T - The type of the record log item.
   * @param {CardInput | Card} current_card - The current card to be rescheduled.
   * @param {Array<FSRSHistory>} reviews - The array of FSRSHistory objects representing the reviews.
   * @param {Partial<RescheduleOptions<T>>} options - The optional reschedule options.
   * @returns {IReschedule<T>} - The rescheduled collections and reschedule item.
   * 
   * @example
   * ```
    const f = fsrs()
        const grades: Grade[] = [Rating.Good, Rating.Good, Rating.Good, Rating.Good]
        const reviews_at = [
          new Date(2024, 8, 13),
          new Date(2024, 8, 13),
          new Date(2024, 8, 17),
          new Date(2024, 8, 28),
        ]

        const reviews: FSRSHistory[] = []
        for (let i = 0; i < grades.length; i++) {
          reviews.push({
            rating: grades[i],
            review: reviews_at[i],
          })
        }

        const results_short = scheduler.reschedule(
          createEmptyCard(),
          reviews,
          {
            skipManual: false,
          }
        )
        console.log(results_short)
   * ```
   */
  reschedule<T = RecordLogItem>(
    current_card: CardInput | Card,
    reviews: FSRSHistory[] = [],
    options: Partial<RescheduleOptions<T>> = {}
  ): IReschedule<T> {
    const {
      recordLogHandler,
      reviewsOrderBy,
      skipManual: skipManual = true,
      now: now = new Date(),
      update_memory_state: updateMemoryState = false,
    } = options
    if (reviewsOrderBy && typeof reviewsOrderBy === 'function') {
      reviews.sort(reviewsOrderBy)
    }
    if (skipManual) {
      reviews = reviews.filter((review) => review.rating !== Rating.Manual)
    }
    const rescheduleSvc = new Reschedule(this)

    const collections = rescheduleSvc.reschedule(
      options.first_card || createEmptyCard(),
      reviews
    )
    const len = collections.length
    const cur_card = TypeConvert.card(current_card)
    const manual_item = rescheduleSvc.calculateManualRecord(
      cur_card,
      now,
      len ? collections[len - 1] : undefined,
      updateMemoryState
    )

    if (recordLogHandler && typeof recordLogHandler === 'function') {
      return {
        collections: collections.map(recordLogHandler),
        reschedule_item: manual_item ? recordLogHandler(manual_item) : null,
      }
    }
    return {
      collections,
      reschedule_item: manual_item,
    } as IReschedule<T>
  }
}

/**
 * Create a new instance of TS-FSRS
 * @param params FSRSParameters
 * @example
 * ```typescript
 * const f = fsrs();
 * ```
 * @example
 * ```typescript
 * const params: FSRSParameters = generatorParameters({ maximum_interval: 1000 });
 * const f = fsrs(params);
 * ```
 * @example
 * ```typescript
 * const f = fsrs({ maximum_interval: 1000 });
 * ```
 */
export const fsrs = (params?: Partial<FSRSParameters>) => {
  return new FSRS(params || {})
}


================================================
File: src/fsrs/help.ts
================================================
import type { int, unit } from './types'
import type { DateInput, Grade } from './models'
import { Rating, State } from './models'
import { TypeConvert } from './convert'

declare global {
  export interface Date {
    scheduler(t: int, isDay?: boolean): Date

    diff(pre: Date, unit: unit): int

    format(): string

    dueFormat(last_review: Date, unit?: boolean, timeUnit?: string[]): string
  }
}

Date.prototype.scheduler = function (t: int, isDay?: boolean): Date {
  return date_scheduler(this, t, isDay)
}

/**
 * 当前时间与之前的时间差值
 * @param pre 比当前时间还要之前
 * @param unit 单位: days | minutes
 */
Date.prototype.diff = function (pre: Date, unit: unit): int {
  return date_diff(this, pre, unit) as int
}

Date.prototype.format = function (): string {
  return formatDate(this)
}

Date.prototype.dueFormat = function (
  last_review: Date,
  unit?: boolean,
  timeUnit?: string[]
) {
  return show_diff_message(this, last_review, unit, timeUnit)
}

/**
 * 计算日期和时间的偏移，并返回一个新的日期对象。
 * @param now 当前日期和时间
 * @param t 时间偏移量，当 isDay 为 true 时表示天数，为 false 时表示分钟
 * @param isDay （可选）是否按天数单位进行偏移，默认为 false，表示按分钟单位计算偏移
 * @returns 偏移后的日期和时间对象
 */
export function date_scheduler(
  now: DateInput,
  t: number,
  isDay?: boolean
): Date {
  return new Date(
    isDay
      ? fixDate(now).getTime() + t * 24 * 60 * 60 * 1000
      : fixDate(now).getTime() + t * 60 * 1000
  )
}

export function date_diff(now: DateInput, pre: DateInput, unit: unit): number {
  if (!now || !pre) {
    throw new Error('Invalid date')
  }
  const diff = fixDate(now).getTime() - fixDate(pre).getTime()
  let r = 0
  switch (unit) {
    case 'days':
      r = Math.floor(diff / (24 * 60 * 60 * 1000))
      break
    case 'minutes':
      r = Math.floor(diff / (60 * 1000))
      break
  }
  return r
}

export function formatDate(dateInput: DateInput): string {
  const date = fixDate(dateInput)
  const year: number = date.getFullYear()
  const month: number = date.getMonth() + 1
  const day: number = date.getDate()
  const hours: number = date.getHours()
  const minutes: number = date.getMinutes()
  const seconds: number = date.getSeconds()

  return `${year}-${padZero(month)}-${padZero(day)} ${padZero(hours)}:${padZero(
    minutes
  )}:${padZero(seconds)}`
}

function padZero(num: number): string {
  return num < 10 ? `0${num}` : `${num}`
}

const TIMEUNIT = [60, 60, 24, 31, 12]
const TIMEUNITFORMAT = ['second', 'min', 'hour', 'day', 'month', 'year']

export function show_diff_message(
  due: DateInput,
  last_review: DateInput,
  unit?: boolean,
  timeUnit: string[] = TIMEUNITFORMAT
): string {
  due = fixDate(due)
  last_review = fixDate(last_review)
  if (timeUnit.length !== TIMEUNITFORMAT.length) {
    timeUnit = TIMEUNITFORMAT
  }
  let diff = due.getTime() - last_review.getTime()
  let i
  diff /= 1000
  for (i = 0; i < TIMEUNIT.length; i++) {
    if (diff < TIMEUNIT[i]) {
      break
    } else {
      diff /= TIMEUNIT[i]
    }
  }
  return `${Math.floor(diff)}${unit ? timeUnit[i] : ''}`
}

/**
 *
 * @deprecated Use TypeConvert.time instead
 */
export function fixDate(value: unknown) {
  return TypeConvert.time(value)
}

/**
 * @deprecated Use TypeConvert.state instead
 */
export function fixState(value: unknown): State {
  return TypeConvert.state(value)
}

/**
 * @deprecated Use TypeConvert.rating instead
 */
export function fixRating(value: unknown): Rating {
  return TypeConvert.rating(value)
}

export const Grades: Readonly<Grade[]> = [
  Rating.Again,
  Rating.Hard,
  Rating.Good,
  Rating.Easy,
] as const

const FUZZ_RANGES = [
  {
    start: 2.5,
    end: 7.0,
    factor: 0.15,
  },
  {
    start: 7.0,
    end: 20.0,
    factor: 0.1,
  },
  {
    start: 20.0,
    end: Infinity,
    factor: 0.05,
  },
] as const

export function get_fuzz_range(
  interval: number,
  elapsed_days: number,
  maximum_interval: number
) {
  let delta = 1.0
  for (const range of FUZZ_RANGES) {
    delta +=
      range.factor * Math.max(Math.min(interval, range.end) - range.start, 0.0)
  }
  interval = Math.min(interval, maximum_interval)
  let min_ivl = Math.max(2, Math.round(interval - delta))
  const max_ivl = Math.min(Math.round(interval + delta), maximum_interval)
  if (interval > elapsed_days) {
    min_ivl = Math.max(min_ivl, elapsed_days + 1)
  }
  min_ivl = Math.min(min_ivl, max_ivl)
  return { min_ivl, max_ivl }
}

export function clamp(value: number, min: number, max: number): number {
  return Math.min(Math.max(value, min), max)
}

export function dateDiffInDays(last: Date, cur: Date) {
  // Discard the time and time-zone information.
  const utc1 = Date.UTC(
    last.getUTCFullYear(),
    last.getUTCMonth(),
    last.getUTCDate()
  )
  const utc2 = Date.UTC(
    cur.getUTCFullYear(),
    cur.getUTCMonth(),
    cur.getUTCDate()
  )

  return Math.floor((utc2 - utc1) / 86400000 /** 1000 * 60 * 60 * 24*/)
}


================================================
File: src/fsrs/index.ts
================================================
export * from './default'
export * from './help'
export * from './algorithm'
export * from './fsrs'

export type * from './types'
export type {
  FSRSParameters,
  Card,
  ReviewLog,
  RecordLog,
  RecordLogItem,
  StateType,
  RatingType,
  Grade,
  CardInput,
  ReviewLogInput,
  DateInput,
  FSRSReview,
  FSRSHistory,
  FSRSState
} from './models'
export { State, Rating } from './models'

export * from './convert'

export * from './strategies'
export * from './abstract_scheduler'
export * from './impl/basic_scheduler'
export * from './impl/long_term_scheduler'


================================================
File: src/fsrs/models.ts
================================================
export type StateType = 'New' | 'Learning' | 'Review' | 'Relearning'

export enum State {
  New = 0,
  Learning = 1,
  Review = 2,
  Relearning = 3,
}

export type RatingType = 'Manual' | 'Again' | 'Hard' | 'Good' | 'Easy'

export enum Rating {
  Manual = 0,
  Again = 1,
  Hard = 2,
  Good = 3,
  Easy = 4,
}

type ExcludeManual<T> = Exclude<T, Rating.Manual>

export type Grade = ExcludeManual<Rating>

export interface ReviewLog {
  rating: Rating // Rating of the review (Again, Hard, Good, Easy)
  state: State // State of the review (New, Learning, Review, Relearning)
  due: Date // Date of the last scheduling
  stability: number // Memory stability during the review
  difficulty: number // Difficulty of the card during the review
  elapsed_days: number // Number of days elapsed since the last review
  last_elapsed_days: number // Number of days between the last two reviews
  scheduled_days: number // Number of days until the next review
  review: Date // Date of the review
}

export type RecordLogItem = {
  card: Card
  log: ReviewLog
}
export type RecordLog = {
  [key in Grade]: RecordLogItem
}

export interface Card {
  due: Date // Due date
  stability: number // Stability
  difficulty: number // Difficulty level
  elapsed_days: number // Number of days elapsed
  scheduled_days: number // Number of days scheduled
  reps: number // Repetition count
  lapses: number // Number of lapses or mistakes
  state: State // Card's state (New, Learning, Review, Relearning)
  last_review?: Date // Date of the last review (optional)
}

export interface CardInput extends Omit<Card, 'state' | 'due' | 'last_review'> {
  state: StateType | State // Card's state (New, Learning, Review, Relearning)
  due: DateInput // Due date
  last_review?: DateInput | null // Date of the last review (optional)
}

export type DateInput = Date | number | string

export interface ReviewLogInput
  extends Omit<ReviewLog, 'rating' | 'state' | 'due' | 'review'> {
  rating: RatingType | Rating // Rating of the review (Again, Hard, Good, Easy)
  state: StateType | State // Card's state (New, Learning, Review, Relearning)
  due: DateInput // Due date
  review: DateInput // Date of the last review
}

export interface FSRSParameters {
  request_retention: number
  maximum_interval: number
  w: number[]
  enable_fuzz: boolean
  enable_short_term: boolean
}

export interface FSRSReview {
  /**
   * 0-4: Manual, Again, Hard, Good, Easy
   * = revlog.rating
   */
  rating: Rating
  /**
   * The number of days that passed
   * = revlog.elapsed_days
   * = round(revlog[-1].review - revlog[-2].review)
   */
  delta_t: number
}

export type FSRSHistory = Partial<
  Omit<ReviewLog, 'rating' | 'review' | 'elapsed_days'>
> &
  (
    | {
        rating: Grade
        review: DateInput | Date
      }
    | {
        rating: Rating.Manual
        due: DateInput | Date
        state: State
        review: DateInput | Date
      }
  )

export interface FSRSState {
  stability: number
  difficulty: number
}


================================================
File: src/fsrs/reschedule.ts
================================================
import { TypeConvert } from './convert'
import { createEmptyCard } from './default'
import type { FSRS } from './fsrs'
import {
  type Card,
  type CardInput,
  DateInput,
  type FSRSHistory,
  type Grade,
  Rating,
  type RecordLogItem,
  type ReviewLog,
  State,
} from './models'

/**
 * The `Reschedule` class provides methods to handle the rescheduling of cards based on their review history.
 * determine the next review dates and update the card's state accordingly.
 */
export class Reschedule {
  private fsrs: FSRS
  /**
   * Creates an instance of the `Reschedule` class.
   * @param fsrs - An instance of the FSRS class used for scheduling.
   */
  constructor(fsrs: FSRS) {
    this.fsrs = fsrs
  }

  /**
   * Replays a review for a card and determines the next review date based on the given rating.
   * @param card - The card being reviewed.
   * @param reviewed - The date the card was reviewed.
   * @param rating - The grade given to the card during the review.
   * @returns A `RecordLogItem` containing the updated card and review log.
   */
  replay(card: Card, reviewed: Date, rating: Grade): RecordLogItem {
    return this.fsrs.next(card, reviewed, rating)
  }

  /**
   * Processes a manual review for a card, allowing for custom state, stability, difficulty, and due date.
   * @param card - The card being reviewed.
   * @param state - The state of the card after the review.
   * @param reviewed - The date the card was reviewed.
   * @param elapsed_days - The number of days since the last review.
   * @param stability - (Optional) The stability of the card.
   * @param difficulty - (Optional) The difficulty of the card.
   * @param due - (Optional) The due date for the next review.
   * @returns A `RecordLogItem` containing the updated card and review log.
   * @throws Will throw an error if the state or due date is not provided when required.
   */
  handleManualRating(
    card: Card,
    state: State,
    reviewed: Date,
    elapsed_days: number,
    stability?: number,
    difficulty?: number,
    due?: Date
  ): RecordLogItem {
    if (typeof state === 'undefined') {
      throw new Error('reschedule: state is required for manual rating')
    }
    let log: ReviewLog
    let next_card: Card
    if (<State>state === State.New) {
      log = {
        rating: Rating.Manual,
        state: state,
        due: <Date>due ?? reviewed,
        stability: card.stability,
        difficulty: card.difficulty,
        elapsed_days: elapsed_days,
        last_elapsed_days: card.elapsed_days,
        scheduled_days: card.scheduled_days,
        review: <Date>reviewed,
      } satisfies ReviewLog
      next_card = createEmptyCard<Card>(reviewed)
      next_card.last_review = reviewed
    } else {
      if (typeof due === 'undefined') {
        throw new Error('reschedule: due is required for manual rating')
      }
      const scheduled_days = due.diff(reviewed as Date, 'days')
      log = {
        rating: Rating.Manual,
        state: <State>card.state,
        due: card.last_review || card.due,
        stability: card.stability,
        difficulty: card.difficulty,
        elapsed_days: elapsed_days,
        last_elapsed_days: card.elapsed_days,
        scheduled_days: card.scheduled_days,
        review: <Date>reviewed,
      } satisfies ReviewLog
      next_card = {
        ...card,
        state: <State>state,
        due: <Date>due,
        last_review: <Date>reviewed,
        stability: stability || card.stability,
        difficulty: difficulty || card.difficulty,
        elapsed_days: elapsed_days,
        scheduled_days: scheduled_days,
        reps: card.reps + 1,
      } satisfies Card
    }

    return { card: next_card, log }
  }

  /**
   * Reschedules a card based on its review history.
   *
   * @param current_card - The card to be rescheduled.
   * @param reviews - An array of review history objects.
   * @returns An array of record log items representing the rescheduling process.
   */
  reschedule(current_card: CardInput, reviews: FSRSHistory[]) {
    const collections: RecordLogItem[] = []
    let cur_card = createEmptyCard<Card>(current_card.due)
    for (const review of reviews) {
      let item: RecordLogItem
      review.review = TypeConvert.time(review.review)
      if (review.rating === Rating.Manual) {
        // ref: abstract_scheduler.ts#init
        let interval = 0
        if (cur_card.state !== State.New && cur_card.last_review) {
          interval = review.review.diff(cur_card.last_review as Date, 'days')
        }
        item = this.handleManualRating(
          cur_card,
          review.state,
          review.review,
          interval,
          review.stability,
          review.difficulty,
          review.due ? TypeConvert.time(review.due) : undefined
        )
      } else {
        item = this.replay(cur_card, review.review, review.rating)
      }
      collections.push(item)
      cur_card = item.card
    }
    return collections
  }

  calculateManualRecord(
    current_card: CardInput,
    now: DateInput,
    record_log_item?: RecordLogItem,
    update_memory?: boolean
  ): RecordLogItem | null {
    if (!record_log_item) {
      return null
    }
    // if first_card === recordItem.card then return null
    const { card: reschedule_card, log } = record_log_item
    const cur_card = <Card>TypeConvert.card(current_card) // copy card
    if (cur_card.due.getTime() === reschedule_card.due.getTime()) {
      return null
    }
    cur_card.scheduled_days = reschedule_card.due.diff(
      cur_card.due as Date,
      'days'
    )
    return this.handleManualRating(
      cur_card,
      reschedule_card.state,
      TypeConvert.time(now),
      log.elapsed_days,
      update_memory ? reschedule_card.stability : undefined,
      update_memory ? reschedule_card.difficulty : undefined,
      reschedule_card.due
    )
  }
}


================================================
File: src/fsrs/types.ts
================================================
import type {
  CardInput,
  DateInput,
  FSRSHistory,
  Grade,
  RecordLog,
  RecordLogItem,
} from './models'

export type unit = 'days' | 'minutes'
export type int = number & { __int__: void }
export type double = number & { __double__: void }

export interface IPreview extends RecordLog {
  [Symbol.iterator](): IterableIterator<RecordLogItem>
}

export interface IScheduler {
  preview(): IPreview
  review(state: Grade): RecordLogItem
}

/**
 * Options for rescheduling.
 *
 * @template T - The type of the result returned by the `recordLogHandler` function.
 */
export type RescheduleOptions<T = RecordLogItem> = {
  /**
   * A function that handles recording the log.
   *
   * @param recordLog - The log to be recorded.
   * @returns The result of recording the log.
   */
  recordLogHandler: (recordLog: RecordLogItem) => T

  /**
   * A function that defines the order of reviews.
   *
   * @param a - The first FSRSHistory object.
   * @param b - The second FSRSHistory object.
   * @returns A negative number if `a` should be ordered before `b`, a positive number if `a` should be ordered after `b`, or 0 if they have the same order.
   */
  reviewsOrderBy: (a: FSRSHistory, b: FSRSHistory) => number

  /**
   * Indicating whether to skip manual steps.
   */
  skipManual: boolean

  /**
   * Indicating whether to update the FSRS memory state.
   */
  update_memory_state: boolean

  /**
   * The current date and time.
   */
  now: DateInput

  /**
   * The input for the first card.
   */
  first_card?: CardInput
}

export type IReschedule<T = RecordLogItem> = {
  collections: T[]
  reschedule_item: T | null
}


================================================
File: src/fsrs/impl/basic_scheduler.ts
================================================
import { AbstractScheduler } from '../abstract_scheduler'
import { TypeConvert } from '../convert'
import {
  type Card,
  type Grade,
  Rating,
  type RecordLogItem,
  State,
} from '../models'
import type { int } from '../types'

export default class BasicScheduler extends AbstractScheduler {
  protected override newState(grade: Grade): RecordLogItem {
    const exist = this.next.get(grade)
    if (exist) {
      return exist
    }
    const next = TypeConvert.card(this.current)
    next.difficulty = this.algorithm.init_difficulty(grade)
    next.stability = this.algorithm.init_stability(grade)

    switch (grade) {
      case Rating.Again:
        next.scheduled_days = 0
        next.due = this.review_time.scheduler(1 as int)
        next.state = State.Learning
        break
      case Rating.Hard:
        next.scheduled_days = 0
        next.due = this.review_time.scheduler(5 as int)
        next.state = State.Learning
        break
      case Rating.Good:
        next.scheduled_days = 0
        next.due = this.review_time.scheduler(10 as int)
        next.state = State.Learning
        break
      case Rating.Easy: {
        const easy_interval = this.algorithm.next_interval(
          next.stability,
          this.current.elapsed_days
        )
        next.scheduled_days = easy_interval
        next.due = this.review_time.scheduler(easy_interval as int, true)
        next.state = State.Review
        break
      }
      default:
        throw new Error('Invalid grade')
    }
    const item = {
      card: next,
      log: this.buildLog(grade),
    } satisfies RecordLogItem
    this.next.set(grade, item)
    return item
  }

  protected override learningState(grade: Grade): RecordLogItem {
    const exist = this.next.get(grade)
    if (exist) {
      return exist
    }
    const { state, difficulty, stability } = this.last
    const next = TypeConvert.card(this.current)
    const interval = this.current.elapsed_days
    next.difficulty = this.algorithm.next_difficulty(difficulty, grade)
    next.stability = this.algorithm.next_short_term_stability(stability, grade)

    switch (grade) {
      case Rating.Again: {
        next.scheduled_days = 0
        next.due = this.review_time.scheduler(5 as int, false)
        next.state = state
        break
      }
      case Rating.Hard: {
        next.scheduled_days = 0
        next.due = this.review_time.scheduler(10 as int)
        next.state = state
        break
      }
      case Rating.Good: {
        const good_interval = this.algorithm.next_interval(
          next.stability,
          interval
        )
        next.scheduled_days = good_interval
        next.due = this.review_time.scheduler(good_interval as int, true)
        next.state = State.Review
        break
      }
      case Rating.Easy: {
        const good_stability = this.algorithm.next_short_term_stability(
          stability,
          Rating.Good
        )
        const good_interval = this.algorithm.next_interval(
          good_stability,
          interval
        )
        const easy_interval = Math.max(
          this.algorithm.next_interval(next.stability, interval),
          good_interval + 1
        ) as int
        next.scheduled_days = easy_interval
        next.due = this.review_time.scheduler(easy_interval as int, true)
        next.state = State.Review
        break
      }
      default:
        throw new Error('Invalid grade')
    }
    const item = {
      card: next,
      log: this.buildLog(grade),
    } satisfies RecordLogItem
    this.next.set(grade, item)
    return item
  }

  protected override reviewState(grade: Grade): RecordLogItem {
    const exist = this.next.get(grade)
    if (exist) {
      return exist
    }
    const interval = this.current.elapsed_days
    const { difficulty, stability } = this.last
    const retrievability = this.algorithm.forgetting_curve(interval, stability)
    const next_again = TypeConvert.card(this.current)
    const next_hard = TypeConvert.card(this.current)
    const next_good = TypeConvert.card(this.current)
    const next_easy = TypeConvert.card(this.current)

    this.next_ds(
      next_again,
      next_hard,
      next_good,
      next_easy,
      difficulty,
      stability,
      retrievability
    )

    this.next_interval(next_again, next_hard, next_good, next_easy, interval)
    this.next_state(next_again, next_hard, next_good, next_easy)
    next_again.lapses += 1

    const item_again = {
      card: next_again,
      log: this.buildLog(Rating.Again),
    } satisfies RecordLogItem
    const item_hard = {
      card: next_hard,
      log: super.buildLog(Rating.Hard),
    } satisfies RecordLogItem
    const item_good = {
      card: next_good,
      log: super.buildLog(Rating.Good),
    } satisfies RecordLogItem
    const item_easy = {
      card: next_easy,
      log: super.buildLog(Rating.Easy),
    } satisfies RecordLogItem

    this.next.set(Rating.Again, item_again)
    this.next.set(Rating.Hard, item_hard)
    this.next.set(Rating.Good, item_good)
    this.next.set(Rating.Easy, item_easy)
    return this.next.get(grade)!
  }

  /**
   * Review next_ds
   */
  private next_ds(
    next_again: Card,
    next_hard: Card,
    next_good: Card,
    next_easy: Card,
    difficulty: number,
    stability: number,
    retrievability: number
  ): void {
    next_again.difficulty = this.algorithm.next_difficulty(
      difficulty,
      Rating.Again
    )
    const nextSMin =
      stability /
      Math.exp(
        this.algorithm.parameters.w[17] * this.algorithm.parameters.w[18]
      )
    next_again.stability = Math.min(
      +nextSMin.toFixed(8),
      this.algorithm.next_forget_stability(
        difficulty,
        stability,
        retrievability
      )
    )

    next_hard.difficulty = this.algorithm.next_difficulty(
      difficulty,
      Rating.Hard
    )
    next_hard.stability = this.algorithm.next_recall_stability(
      difficulty,
      stability,
      retrievability,
      Rating.Hard
    )
    next_good.difficulty = this.algorithm.next_difficulty(
      difficulty,
      Rating.Good
    )
    next_good.stability = this.algorithm.next_recall_stability(
      difficulty,
      stability,
      retrievability,
      Rating.Good
    )
    next_easy.difficulty = this.algorithm.next_difficulty(
      difficulty,
      Rating.Easy
    )
    next_easy.stability = this.algorithm.next_recall_stability(
      difficulty,
      stability,
      retrievability,
      Rating.Easy
    )
  }

  /**
   * Review next_interval
   */
  private next_interval(
    next_again: Card,
    next_hard: Card,
    next_good: Card,
    next_easy: Card,
    interval: number
  ): void {
    let hard_interval: int, good_interval: int
    hard_interval = this.algorithm.next_interval(next_hard.stability, interval)
    good_interval = this.algorithm.next_interval(next_good.stability, interval)
    hard_interval = Math.min(hard_interval, good_interval) as int
    good_interval = Math.max(good_interval, hard_interval + 1) as int
    const easy_interval = Math.max(
      this.algorithm.next_interval(next_easy.stability, interval),
      good_interval + 1
    ) as int
    next_again.scheduled_days = 0
    next_again.due = this.review_time.scheduler(5 as int)

    next_hard.scheduled_days = hard_interval
    next_hard.due = this.review_time.scheduler(hard_interval, true)
    next_good.scheduled_days = good_interval
    next_good.due = this.review_time.scheduler(good_interval, true)

    next_easy.scheduled_days = easy_interval
    next_easy.due = this.review_time.scheduler(easy_interval, true)
  }

  /**
   * Review next_state
   */
  private next_state(
    next_again: Card,
    next_hard: Card,
    next_good: Card,
    next_easy: Card
  ) {
    next_again.state = State.Relearning
    // next_again.lapses += 1

    next_hard.state = State.Review

    next_good.state = State.Review

    next_easy.state = State.Review
  }
}


================================================
File: src/fsrs/impl/long_term_scheduler.ts
================================================
import { AbstractScheduler } from '../abstract_scheduler'
import { TypeConvert } from '../convert'
import {
  type Card,
  type Grade,
  Rating,
  type RecordLogItem,
  State,
} from '../models'
import type { int } from '../types'

export default class LongTermScheduler extends AbstractScheduler {
  protected override newState(grade: Grade): RecordLogItem {
    const exist = this.next.get(grade)
    if (exist) {
      return exist
    }

    this.current.scheduled_days = 0
    this.current.elapsed_days = 0

    const next_again = TypeConvert.card(this.current)
    const next_hard = TypeConvert.card(this.current)
    const next_good = TypeConvert.card(this.current)
    const next_easy = TypeConvert.card(this.current)

    this.init_ds(next_again, next_hard, next_good, next_easy)
    const first_interval = 0

    this.next_interval(
      next_again,
      next_hard,
      next_good,
      next_easy,
      first_interval
    )

    this.next_state(next_again, next_hard, next_good, next_easy)
    this.update_next(next_again, next_hard, next_good, next_easy)
    return this.next.get(grade)!
  }

  private init_ds(
    next_again: Card,
    next_hard: Card,
    next_good: Card,
    next_easy: Card
  ): void {
    next_again.difficulty = this.algorithm.init_difficulty(Rating.Again)
    next_again.stability = this.algorithm.init_stability(Rating.Again)

    next_hard.difficulty = this.algorithm.init_difficulty(Rating.Hard)
    next_hard.stability = this.algorithm.init_stability(Rating.Hard)

    next_good.difficulty = this.algorithm.init_difficulty(Rating.Good)
    next_good.stability = this.algorithm.init_stability(Rating.Good)

    next_easy.difficulty = this.algorithm.init_difficulty(Rating.Easy)
    next_easy.stability = this.algorithm.init_stability(Rating.Easy)
  }

  /**
   * @see https://github.com/open-spaced-repetition/ts-fsrs/issues/98#issuecomment-2241923194
   */
  protected override learningState(grade: Grade): RecordLogItem {
    return this.reviewState(grade)
  }
  protected override reviewState(grade: Grade): RecordLogItem {
    const exist = this.next.get(grade)
    if (exist) {
      return exist
    }
    const interval = this.current.elapsed_days
    const { difficulty, stability } = this.last
    const retrievability = this.algorithm.forgetting_curve(interval, stability)
    const next_again = TypeConvert.card(this.current)
    const next_hard = TypeConvert.card(this.current)
    const next_good = TypeConvert.card(this.current)
    const next_easy = TypeConvert.card(this.current)

    this.next_ds(
      next_again,
      next_hard,
      next_good,
      next_easy,
      difficulty,
      stability,
      retrievability
    )

    this.next_interval(next_again, next_hard, next_good, next_easy, interval)
    this.next_state(next_again, next_hard, next_good, next_easy)
    next_again.lapses += 1

    this.update_next(next_again, next_hard, next_good, next_easy)
    return this.next.get(grade)!
  }

  /**
   * Review next_ds
   */
  private next_ds(
    next_again: Card,
    next_hard: Card,
    next_good: Card,
    next_easy: Card,
    difficulty: number,
    stability: number,
    retrievability: number
  ): void {
    next_again.difficulty = this.algorithm.next_difficulty(
      difficulty,
      Rating.Again
    )
    next_again.stability = Math.min(
      stability,
      this.algorithm.next_forget_stability(
        difficulty,
        stability,
        retrievability
      )
    )

    next_hard.difficulty = this.algorithm.next_difficulty(
      difficulty,
      Rating.Hard
    )
    next_hard.stability = this.algorithm.next_recall_stability(
      difficulty,
      stability,
      retrievability,
      Rating.Hard
    )
    next_good.difficulty = this.algorithm.next_difficulty(
      difficulty,
      Rating.Good
    )
    next_good.stability = this.algorithm.next_recall_stability(
      difficulty,
      stability,
      retrievability,
      Rating.Good
    )
    next_easy.difficulty = this.algorithm.next_difficulty(
      difficulty,
      Rating.Easy
    )
    next_easy.stability = this.algorithm.next_recall_stability(
      difficulty,
      stability,
      retrievability,
      Rating.Easy
    )
  }

  /**
   * Review/New next_interval
   */
  private next_interval(
    next_again: Card,
    next_hard: Card,
    next_good: Card,
    next_easy: Card,
    interval: number
  ): void {
    let again_interval: int,
      hard_interval: int,
      good_interval: int,
      easy_interval: int
    again_interval = this.algorithm.next_interval(
      next_again.stability,
      interval
    )
    hard_interval = this.algorithm.next_interval(next_hard.stability, interval)
    good_interval = this.algorithm.next_interval(next_good.stability, interval)
    easy_interval = this.algorithm.next_interval(next_easy.stability, interval)

    again_interval = Math.min(again_interval, hard_interval) as int
    hard_interval = Math.max(hard_interval, again_interval + 1) as int
    good_interval = Math.max(good_interval, hard_interval + 1) as int
    easy_interval = Math.max(easy_interval, good_interval + 1) as int

    next_again.scheduled_days = again_interval
    next_again.due = this.review_time.scheduler(again_interval, true)

    next_hard.scheduled_days = hard_interval
    next_hard.due = this.review_time.scheduler(hard_interval, true)

    next_good.scheduled_days = good_interval
    next_good.due = this.review_time.scheduler(good_interval, true)

    next_easy.scheduled_days = easy_interval
    next_easy.due = this.review_time.scheduler(easy_interval, true)
  }

  /**
   * Review/New next_state
   */
  private next_state(
    next_again: Card,
    next_hard: Card,
    next_good: Card,
    next_easy: Card
  ) {
    next_again.state = State.Review
    // next_again.lapses += 1

    next_hard.state = State.Review

    next_good.state = State.Review

    next_easy.state = State.Review
  }

  private update_next(
    next_again: Card,
    next_hard: Card,
    next_good: Card,
    next_easy: Card
  ) {
    const item_again = {
      card: next_again,
      log: this.buildLog(Rating.Again),
    } satisfies RecordLogItem
    const item_hard = {
      card: next_hard,
      log: super.buildLog(Rating.Hard),
    } satisfies RecordLogItem
    const item_good = {
      card: next_good,
      log: super.buildLog(Rating.Good),
    } satisfies RecordLogItem
    const item_easy = {
      card: next_easy,
      log: super.buildLog(Rating.Easy),
    } satisfies RecordLogItem

    this.next.set(Rating.Again, item_again)
    this.next.set(Rating.Hard, item_hard)
    this.next.set(Rating.Good, item_good)
    this.next.set(Rating.Easy, item_easy)
  }
}


================================================
File: src/fsrs/strategies/index.ts
================================================
export * from './seed'
export * from './types'


================================================
File: src/fsrs/strategies/seed.ts
================================================
import type { AbstractScheduler } from '../abstract_scheduler'
import type { TSeedStrategy } from './types'

export function DefaultInitSeedStrategy(this: AbstractScheduler): string {
  const time = this.review_time.getTime()
  const reps = this.current.reps
  const mul = this.current.difficulty * this.current.stability
  return `${time}_${reps}_${mul}`
}

/**
 * Generates a seed strategy function for card IDs.
 *
 * @param card_id_field - The field name of the card ID in the current object.
 * @returns A function that generates a seed based on the card ID and repetitions.
 *
 * @remarks
 * The returned function uses the `card_id_field` to retrieve the card ID from the current object.
 * It then adds the number of repetitions (`reps`) to the card ID to generate the seed.
 *
 * @example
 * ```typescript
 * const seedStrategy = GenCardIdSeedStrategy('card_id');
 * const f = fsrs().useStrategy(StrategyMode.SEED, seedStrategy)
 * const card = createEmptyCard<Card & { card_id: number }>()
 * card.card_id = 555
 * const record = f.repeat(card, new Date())
 * ```
 */
export function GenSeedStrategyWithCardId(
  card_id_field: string | number
): TSeedStrategy {
  return function (this: AbstractScheduler): string {
    // https://github.com/open-spaced-repetition/ts-fsrs/issues/131#issuecomment-2408426225
    const card_id = Reflect.get(this.current, card_id_field) ?? 0
    const reps = this.current.reps
    // ex1
    // card_id:string + reps:number = 'e2ecb1f7-8d15-420b-bec4-c7212ad2e5dc' + 4
    // = 'e2ecb1f7-8d15-420b-bec4-c7212ad2e5dc4'

    // ex2
    // card_id:number + reps:number = 1732452519198 + 4
    // = '17324525191984'
    return String(card_id + reps || 0)
  }
}


================================================
File: src/fsrs/strategies/types.ts
================================================
import type { AbstractScheduler } from '../abstract_scheduler'
import type { FSRSAlgorithm } from '../algorithm'
import type { Card, CardInput, DateInput } from '../models'
import type { IScheduler } from '../types'

export enum StrategyMode {
  SCHEDULER = 'Scheduler',
  SEED = 'Seed',
}

export type TSeedStrategy = (this: AbstractScheduler) => string
export type TSchedulerStrategy<T extends CardInput | Card = CardInput | Card> =
  new (
    card: T,
    now: DateInput,
    algorithm: FSRSAlgorithm,
    strategies: { seed: TSeedStrategy }
  ) => IScheduler

export type TStrategyHandler<E = StrategyMode> =
  E extends StrategyMode.SCHEDULER
    ? TSchedulerStrategy
    : E extends StrategyMode.SEED
      ? TSeedStrategy
      : never


================================================
File: .github/FUNDING.yml
================================================
# These are supported funding model platforms

github: ishiko732 # Replace with up to 4 GitHub Sponsors-enabled usernames e.g., [user1, user2]
patreon: # Replace with a single Patreon username
open_collective: # Replace with a single Open Collective username
ko_fi:  # Replace with a single Ko-fi username
tidelift: # Replace with a single Tidelift platform-name/package-name e.g., npm/babel
community_bridge: # Replace with a single Community Bridge project-name e.g., cloud-foundry
liberapay: # Replace with a single Liberapay username
issuehunt: # Replace with a single IssueHunt username
lfx_crowdfunding: # Replace with a single LFX Crowdfunding project-name e.g., cloud-foundry
polar: # Replace with a single Polar username
buy_me_a_coffee: # Replace with a single Buy Me a Coffee username
thanks_dev: # Replace with a single thanks.dev username
custom: # Replace with up to 4 custom sponsorship URLs e.g., ['link1', 'link2']


================================================
File: .github/workflows/ci.yml
================================================
name: ci

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

on:

  pull_request:
    branches:
      - main
      - master
      - dev
    paths-ignore:
      - ".devcontainer/**"
      # - '.github/**'
      - ".vscode/**"
      - ".gitignore"
      - ".npmignore"
      - "LICENSE"
      - "README.md"
  push:
    paths-ignore:
      - ".devcontainer/**"
      # - '.github/**'
      - ".vscode/**"
      - ".gitignore"
      - ".npmignore"
      - "LICENSE"
      - "README.md"
    branches:
      - main
      - master
      - dev

permissions:
  contents: read # to fetch code (actions/checkout)

jobs:
  build:
    strategy:
      matrix:
        node: [18]
        platform: [ubuntu-latest, macos-latest, windows-latest]
    name: "${{matrix.platform}} / Node.js ${{ matrix.node }}"
    runs-on: ${{matrix.platform}}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.5.0
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'pnpm'

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Lint
        run: pnpm run lint

      - name: Run tests and collect coverage
        run: pnpm run test::coverage

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true


================================================
File: .github/workflows/deploy.yml
================================================
name: Deploy to GitHub Pages

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 9.5.0
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Build docs
        run: pnpm run docs
      - name: Copy example folder
        run: cp -R example/* docs/

      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@4.1.1
        with:
          branch: gh-pages
          folder: docs

================================================
File: .github/workflows/npm-publish.yml
================================================
# This workflow will run tests using node and then publish a package to GitHub Packages when a release is created
# For more information see: https://docs.github.com/en/actions/publishing-packages/publishing-nodejs-packages

name: Publish Package

on:
  workflow_run:
    workflows: [ci]
    types:
      - completed
    branches: [main, master]
  release:
    types: [published]

jobs:
  publish-npm:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write # allow GITHUB_TOKEN to publish packages
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.5.0
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'pnpm'

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Lint
        run: pnpm run lint

      - name: Run tests and collect coverage
        run: pnpm run test::coverage

      - run: pnpm build

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true

      - name: Publish Package to NPM
        uses: JS-DevTools/npm-publish@v2
        with:
          token: ${{secrets.npm_token}}
          provenance: true
          tag: latest


