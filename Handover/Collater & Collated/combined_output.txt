File: c:\Users\SUN\Desktop\programs\IBDP-SIMS\indexengineer/src/app/layout.tsx

import type { Metadata } from "next";
import localFont from "next/font/local";
import "./globals.css";
import { CommandProvider } from "@/components/CommandProvider";

const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

export const metadata: Metadata = {
  title: "Scheduler App",
  description: "A simple scheduler application",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" className="overflow-hidden">
      <body className={`${geistSans.variable} ${geistMono.variable} antialiased bg-gray-100 min-h-screen text-gray-900`}>
        <CommandProvider>
          <main className="container mx-auto p-4">
            {children}
          </main>
        </CommandProvider>
      </body>
    </html>
  );
}

================================================================================

File: c:\Users\SUN\Desktop\programs\IBDP-SIMS\indexengineer/src/app/page.tsx

import SearchNavigation from '@/components/SearchNavigation';
import { Command } from '@/components/ui/command';
import SearchContent from '@/components/SearchContent';

export default function Home() {
  /*return (
    //<SearchContent />
    <div className="min-h-screen flex items-start justify-center pt-32">
      <div className="w-full max-w-2xl">
        <Command className="rounded-lg">
          
          <SearchNavigation />
        </Command>
        <div className="mt-4 flex justify-center space-x-4 text-sm">
          <span><kbd className="px-2 py-1 bg-gray-100 border border-gray-200 rounded">↑↓</kbd> to navigate</span>
          <span><kbd className="px-2 py-1 bg-gray-100 border border-gray-200 rounded">enter</kbd> to select</span>
          <span><kbd className="px-2 py-1 bg-gray-100 border border-gray-200 rounded">esc</kbd> to close</span>
        </div>
      </div>
    </div>
  );*/
  return <SearchNavigation />;
}

================================================================================

File: c:\Users\SUN\Desktop\programs\IBDP-SIMS\indexengineer/src/app/globals.css

@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  font-family: Arial, Helvetica, sans-serif;
}

@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
}

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;
    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;
    --primary: 222.2 47.4% 11.2%;
    --primary-foreground: 210 40% 98%;
    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;
    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;
    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;
    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 222.2 84% 4.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
  }
  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;
    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;
    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;
    --primary: 210 40% 98%;
    --primary-foreground: 222.2 47.4% 11.2%;
    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;
    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;
    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;
    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 212.7 26.8% 83.9%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}


================================================================================

File: c:\Users\SUN\Desktop\programs\IBDP-SIMS\indexengineer/src/app/scheduler/page.tsx

// src/app/scheduler/page.tsx
"use client";

import React, { useState, useEffect } from 'react';
import { Plus, Calendar, Filter, Search } from 'lucide-react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { useRouter } from 'next/navigation';

const TaskForm = ({ onSubmit, initialData = null, onClose }: any) => {
  const [task, setTask] = useState<Partial<Task>>(
  initialData || {
    title: '',
    description: '',
    category: 'Academic',
    priority: 'Medium',
    status: 'Pending',
    dueDate: new Date().toISOString().split('T')[0],
    concepts: [],
  }
  );

  const handleSubmit = (e: React.FormEvent) => {
  e.preventDefault();
  onSubmit({ ...task, id: initialData?.id || crypto.randomUUID() });
  onClose();
  };

  return (
  <form onSubmit={handleSubmit} className="space-y-4">
    <Input
    placeholder="Task Title"
    value={task.title}
    onChange={(e) => setTask({ ...task, title: e.target.value })}
    required
    />
    <Textarea
    placeholder="Description"
    value={task.description}
    onChange={(e) => setTask({ ...task, description: e.target.value })}
    />
    <div className="grid grid-cols-2 gap-4">
    <Select
      value={task.category}
      onValueChange={(value) => setTask({ ...task, category: value as Category })}
    >
      <SelectTrigger>
      <SelectValue placeholder="Category" />
      </SelectTrigger>
      <SelectContent>
      <SelectItem value="Academic">Academic</SelectItem>
      <SelectItem value="University">University</SelectItem>
      <SelectItem value="Sports">Sports</SelectItem>
      <SelectItem value="Extracurricular">Extracurricular</SelectItem>
      <SelectItem value="Mental Health">Mental Health</SelectItem>
      </SelectContent>
    </Select>
    <Select
      value={task.priority}
      onValueChange={(value) => setTask({ ...task, priority: value as Priority })}
    >
      <SelectTrigger>
      <SelectValue placeholder="Priority" />
      </SelectTrigger>
      <SelectContent>
      <SelectItem value="Low">Low</SelectItem>
      <SelectItem value="Medium">Medium</SelectItem>
      <SelectItem value="High">High</SelectItem>
      </SelectContent>
    </Select>
    </div>
    <Input
    type="date"
    value={task.dueDate}
    onChange={(e) => setTask({ ...task, dueDate: e.target.value })}
    />
    {task.category === 'Academic' && (
    <div className="space-y-4">
      <Input
      placeholder="Subject"
      value={task.subject}
      onChange={(e) => setTask({ ...task, subject: e.target.value })}
      />
      <Textarea
      placeholder="Syllabus Topics"
      value={task.syllabus}
      onChange={(e) => setTask({ ...task, syllabus: e.target.value })}
      />
      <Input
      placeholder="Add concepts (comma-separated)"
      value={task.concepts?.join(', ')}
      onChange={(e) => setTask({ 
        ...task, 
        concepts: e.target.value.split(',').map(c => c.trim()).filter(Boolean)
      })}
      />
    </div>
    )}
    <Button type="submit" className="w-full">
    {initialData ? 'Update Task' : 'Create Task'}
    </Button>
  </form>
  );
};

const TaskCard = ({ task, onEdit, onDelete, onStatusChange }: any) => {
  const getPriorityColor = (priority: Priority) => {
  const colors = {
    Low: 'bg-green-100 text-green-800',
    Medium: 'bg-yellow-100 text-yellow-800',
    High: 'bg-red-100 text-red-800'
  };
  return colors[priority];
  };

  const getStatusColor = (status: Status) => {
  const colors = {
    Pending: 'bg-gray-100 text-gray-800',
    'In Progress': 'bg-blue-100 text-blue-800',
    Completed: 'bg-green-100 text-green-800'
  };
  return colors[status];
  };

  return (
  <Card className="mb-4">
    <CardHeader>
    <div className="flex justify-between items-start">
      <div>
      <CardTitle>{task.title}</CardTitle>
      <CardDescription>{task.description}</CardDescription>
      </div>
      <div className="flex gap-2">
      <Badge className={getPriorityColor(task.priority)}>{task.priority}</Badge>
      <Badge className={getStatusColor(task.status)}>{task.status}</Badge>
      </div>
    </div>
    </CardHeader>
    <CardContent>
    <div className="space-y-2">
      <p className="text-sm">Due: {new Date(task.dueDate).toLocaleDateString()}</p>
      {task.subject && <p className="text-sm">Subject: {task.subject}</p>}
      {task.concepts?.length > 0 && (
      <div className="flex flex-wrap gap-2">
        {task.concepts.map((concept: string, index: number) => (
        <Badge key={index} variant="outline">{concept}</Badge>
        ))}
      </div>
      )}
    </div>
    </CardContent>
    <CardFooter className="justify-between">
    <Select
      value={task.status}
      onValueChange={(value) => onStatusChange(task.id, value)}
    >
      <SelectTrigger className="w-32">
      <SelectValue />
      </SelectTrigger>
      <SelectContent>
      <SelectItem value="Pending">Pending</SelectItem>
      <SelectItem value="In Progress">In Progress</SelectItem>
      <SelectItem value="Completed">Completed</SelectItem>
      </SelectContent>
    </Select>
    <div className="space-x-2">
      <Button variant="outline" size="sm" onClick={() => onEdit(task)}>
      Edit
      </Button>
      <Button variant="destructive" size="sm" onClick={() => onDelete(task.id)}>
      Delete
      </Button>
    </div>
    </CardFooter>
  </Card>
  );
};

export default function SchedulerPage() {
  const router = useRouter();

  const [tasks, setTasks] = useState<Task[]>([]);
  const [filter, setFilter] = useState<Status | 'All'>('All');
  const [search, setSearch] = useState('');
  const [editTask, setEditTask] = useState<Task | null>(null);
  const [isDialogOpen, setIsDialogOpen] = useState(false);

  useEffect(() => {
  const savedTasks = localStorage.getItem('tasks');
  if (savedTasks) {
    setTasks(JSON.parse(savedTasks));
  }
  }, []);

  useEffect(() => {
  localStorage.setItem('tasks', JSON.stringify(tasks));
  }, [tasks]);

  const handleSubmit = (task: Task) => {
  if (editTask) {
    setTasks(tasks.map(t => t.id === task.id ? task : t));
  } else {
    setTasks([...tasks, task]);
  }
  };

  const handleDelete = (id: string) => {
  setTasks(tasks.filter(task => task.id !== id));
  };

  const handleStatusChange = (id: string, status: Status) => {
  setTasks(tasks.map(task => 
    task.id === id ? { ...task, status } : task
  ));
  };

  const handleEdit = (task: Task) => {
  setEditTask(task);
  setIsDialogOpen(true);
  };

  const filteredTasks = tasks
  .filter(task => filter === 'All' || task.status === filter)
  .filter(task => 
    task.title.toLowerCase().includes(search.toLowerCase()) ||
    task.description.toLowerCase().includes(search.toLowerCase())
  );

  return (
  <div className="max-w-4xl mx-auto py-8">
    <div className="flex justify-between items-center mb-6">
      <h1 className="text-3xl font-bold">Task Scheduler</h1>
      <div className="flex gap-2">
        <Button variant="outline" onClick={() => router.push('/scheduler/tracking')}>
          <Calendar className="mr-2 h-4 w-4" /> Track Progress
        </Button>
        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
          <DialogTrigger asChild>
            <Button>
              <Plus className="mr-2 h-4 w-4" /> Add Task
            </Button>
          </DialogTrigger>
          <DialogContent>
            <DialogHeader>
              <DialogTitle>{editTask ? 'Edit Task' : 'Create New Task'}</DialogTitle>
            </DialogHeader>
            <TaskForm
              onSubmit={handleSubmit}
              initialData={editTask}
              onClose={() => {
                setIsDialogOpen(false);
                setEditTask(null);
              }}
            />
          </DialogContent>
        </Dialog>
      </div>
    </div>

    <div className="flex gap-4 mb-6">
    <div className="flex-1">
      <div className="relative">
        <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
        <Input
          placeholder="Search tasks..."
          value={search}
          onChange={(e) => setSearch(e.target.value)}
          className="w-full pl-10"
        />
      </div>
    </div>
    <Select value={filter} onValueChange={(value: any) => setFilter(value)}>
      <SelectTrigger className="w-32">
      <SelectValue placeholder="Filter" />
      </SelectTrigger>
      <SelectContent>
      <SelectItem value="All">All</SelectItem>
      <SelectItem value="Pending">Pending</SelectItem>
      <SelectItem value="In Progress">In Progress</SelectItem>
      <SelectItem value="Completed">Completed</SelectItem>
      </SelectContent>
    </Select>
    </div>

    <Tabs defaultValue="all" className="w-full">
    <TabsList className="mb-4">
      <TabsTrigger value="all">All Tasks</TabsTrigger>
      <TabsTrigger value="academic">Academic</TabsTrigger>
      <TabsTrigger value="university">University</TabsTrigger>
      <TabsTrigger value="other">Other</TabsTrigger>
    </TabsList>

    <ScrollArea className="h-[calc(100vh-300px)]">
      <TabsContent value="all">
      {filteredTasks.map(task => (
        <TaskCard
        key={task.id}
        task={task}
        onEdit={handleEdit}
        onDelete={handleDelete}
        onStatusChange={handleStatusChange}
        />
      ))}
      </TabsContent>

      <TabsContent value="academic">
      {filteredTasks
        .filter(task => task.category === 'Academic')
        .map(task => (
        <TaskCard
          key={task.id}
          task={task}
          onEdit={handleEdit}
          onDelete={handleDelete}
          onStatusChange={handleStatusChange}
        />
        ))}
      </TabsContent>

      <TabsContent value="university">
      {filteredTasks
        .filter(task => task.category === 'University')
        .map(task => (
        <TaskCard
          key={task.id}
          task={task}
          onEdit={handleEdit}
          onDelete={handleDelete}
          onStatusChange={handleStatusChange}
        />
        ))}
      </TabsContent>

      <TabsContent value="other">
      {filteredTasks
        .filter(task => !['Academic', 'University'].includes(task.category))
        .map(task => (
        <TaskCard
          key={task.id}
          task={task}
          onEdit={handleEdit}
          onDelete={handleDelete}
          onStatusChange={handleStatusChange}
        />
        ))}
      </TabsContent>
    </ScrollArea>
    </Tabs>
  </div>
  );
}

================================================================================

File: c:\Users\SUN\Desktop\programs\IBDP-SIMS\indexengineer/src/components/Calendar.tsx

"use client";

import React from "react";
import { Task } from "@/types/task";

interface CalendarProps {
  tasks: Task[];
}

export default function Calendar({ tasks }: CalendarProps) {
  const today = new Date();
  const firstDayOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);
  const lastDayOfMonth = new Date(today.getFullYear(), today.getMonth() + 1, 0);

  const daysInMonth = lastDayOfMonth.getDate();
  const startingDay = firstDayOfMonth.getDay();

  const calendar = [];
  let day = 1;

  for (let i = 0; i < 6; i++) {
    const week = [];
    for (let j = 0; j < 7; j++) {
      if (i === 0 && j < startingDay) {
        week.push(<td key={`empty-${j}`} className="p-2 border"></td>);
      } else if (day > daysInMonth) {
        break;
      } else {
        const currentDate = new Date(
          today.getFullYear(),
          today.getMonth(),
          day
        );
        const tasksForDay = tasks.filter(
          (task) =>
            new Date(task.date).toDateString() === currentDate.toDateString()
        );
        week.push(
          <td key={day} className="p-2 border">
            <div className="font-bold">{day}</div>
            {tasksForDay.map((task) => (
              <div
                key={task.id}
                className="text-xs bg-blue-100 p-1 mt-1 rounded"
              >
                {task.title}
              </div>
            ))}
          </td>
        );
        day++;
      }
    }
    calendar.push(<tr key={i}>{week}</tr>);
    if (day > daysInMonth) break;
  }

  return (
    <div className="mt-4">
      <h2 className="text-xl font-bold mb-2">Calendar</h2>
      <table className="w-full border-collapse">
        <thead>
          <tr>
            {["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"].map((day) => (
              <th key={day} className="p-2 border">
                {day}
              </th>
            ))}
          </tr>
        </thead>
        <tbody>{calendar}</tbody>
      </table>
    </div>
  );
}


================================================================================

File: c:\Users\SUN\Desktop\programs\IBDP-SIMS\indexengineer/src/app/scheduler/Types.ts

// src/app/scheduler/types.ts
type Priority = 'Low' | 'Medium' | 'High';
type Status = 'Pending' | 'In Progress' | 'Completed';
type Category = 'Academic' | 'University' | 'Sports' | 'Extracurricular' | 'Mental Health';

interface Task {
  id: string;
  title: string;
  description: string;
  category: Category;
  priority: Priority;
  status: Status;
  dueDate: string;
  subject?: string;
  syllabus?: string;
  concepts?: string[];
  reviewDates: string[];
  lastReviewDate?: string;
}

================================================================================

File: c:\Users\SUN\Desktop\programs\IBDP-SIMS\indexengineer/src/types/task.ts

export interface Task {
    id: number;
    title: string;
    date: string;
    duration: number;
  }

================================================================================

File: c:\Users\SUN\Desktop\programs\IBDP-SIMS\indexengineer/src/app/scheduler/tracking/page.tsx

// src/app/scheduler/tracking/page.tsx
"use client";

import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { ArrowLeft } from 'lucide-react';
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { ScrollArea } from "@/components/ui/scroll-area";

interface TrackingEntry {
  taskId: string;
  date: string;
  qualitativeNotes: string;
  effectiveness: 1 | 2 | 3 | 4 | 5;
  challenges: string;
  nextSteps: string;
}

export default function TrackingPage() {
  const router = useRouter();
  const [tasks, setTasks] = useState<Task[]>([]);
  const [selectedTask, setSelectedTask] = useState<string>('');
  const [trackingEntries, setTrackingEntries] = useState<TrackingEntry[]>([]);
  const [currentEntry, setCurrentEntry] = useState<Partial<TrackingEntry>>({
    date: new Date().toISOString().split('T')[0],
    effectiveness: 3
  });

  useEffect(() => {
    const savedTasks = localStorage.getItem('tasks');
    const savedEntries = localStorage.getItem('trackingEntries');
    if (savedTasks) setTasks(JSON.parse(savedTasks));
    if (savedEntries) setTrackingEntries(JSON.parse(savedEntries));
  }, []);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    const newEntry: TrackingEntry = {
      taskId: selectedTask,
      date: currentEntry.date || new Date().toISOString().split('T')[0],
      qualitativeNotes: currentEntry.qualitativeNotes || '',
      effectiveness: currentEntry.effectiveness as 1 | 2 | 3 | 4 | 5,
      challenges: currentEntry.challenges || '',
      nextSteps: currentEntry.nextSteps || ''
    };

    const updatedEntries = [...trackingEntries, newEntry];
    setTrackingEntries(updatedEntries);
    localStorage.setItem('trackingEntries', JSON.stringify(updatedEntries));

    // Reset form
    setCurrentEntry({
      date: new Date().toISOString().split('T')[0],
      effectiveness: 3
    });
    setSelectedTask('');
  };

  const getTaskById = (id: string) => tasks.find(t => t.id === id);

  return (
    <div className="max-w-4xl mx-auto py-8">
      <div className="flex items-center gap-4 mb-6">
        <Button variant="ghost" onClick={() => router.push('/scheduler')}>
          <ArrowLeft className="h-4 w-4 mr-2" />
          Back to Scheduler
        </Button>
        <h1 className="text-3xl font-bold">Task Tracking</h1>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardTitle>New Tracking Entry</CardTitle>
          </CardHeader>
          <CardContent>
            <form onSubmit={handleSubmit} className="space-y-4">
              <Select
                value={selectedTask}
                onValueChange={setSelectedTask}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Select Task" />
                </SelectTrigger>
                <SelectContent>
                  {tasks
                    .filter(t => t.status !== 'Completed')
                    .map(task => (
                      <SelectItem key={task.id} value={task.id}>
                        {task.title}
                      </SelectItem>
                    ))}
                </SelectContent>
              </Select>

              <input
                type="date"
                className="w-full px-3 py-2 border rounded-md"
                value={currentEntry.date}
                onChange={e => setCurrentEntry({...currentEntry, date: e.target.value})}
              />

              <Textarea
                placeholder="Qualitative Notes"
                value={currentEntry.qualitativeNotes}
                onChange={e => setCurrentEntry({...currentEntry, qualitativeNotes: e.target.value})}
              />

              <Select
                value={currentEntry.effectiveness?.toString()}
                onValueChange={value => setCurrentEntry({...currentEntry, effectiveness: parseInt(value) as 1 | 2 | 3 | 4 | 5})}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Effectiveness Rating" />
                </SelectTrigger>
                <SelectContent>
                  {[1, 2, 3, 4, 5].map(rating => (
                    <SelectItem key={rating} value={rating.toString()}>
                      {rating} - {rating === 1 ? 'Poor' : rating === 5 ? 'Excellent' : ''}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>

              <Textarea
                placeholder="Challenges Faced"
                value={currentEntry.challenges}
                onChange={e => setCurrentEntry({...currentEntry, challenges: e.target.value})}
              />

              <Textarea
                placeholder="Next Steps"
                value={currentEntry.nextSteps}
                onChange={e => setCurrentEntry({...currentEntry, nextSteps: e.target.value})}
              />

              <Button type="submit" className="w-full">
                Save Entry
              </Button>
            </form>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>Recent Entries</CardTitle>
          </CardHeader>
          <CardContent>
            <ScrollArea className="h-[600px] pr-4">
              {trackingEntries
                .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())
                .map((entry, index) => {
                  const task = getTaskById(entry.taskId);
                  return (
                    <Card key={index} className="mb-4">
                      <CardContent className="pt-6">
                        <div className="space-y-2">
                          <div className="flex justify-between items-start">
                            <h3 className="font-semibold">{task?.title}</h3>
                            <Badge>{new Date(entry.date).toLocaleDateString()}</Badge>
                          </div>
                          <p className="text-sm text-gray-600">{entry.qualitativeNotes}</p>
                          <div className="flex gap-2">
                            <Badge variant="outline">
                              Effectiveness: {entry.effectiveness}/5
                            </Badge>
                          </div>
                          {entry.challenges && (
                            <div className="text-sm">
                              <strong>Challenges:</strong> {entry.challenges}
                            </div>
                          )}
                          {entry.nextSteps && (
                            <div className="text-sm">
                              <strong>Next Steps:</strong> {entry.nextSteps}
                            </div>
                          )}
                        </div>
                      </CardContent>
                    </Card>
                  );
                })}
            </ScrollArea>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}

================================================================================

