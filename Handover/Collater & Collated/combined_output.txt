Combined files content generated on 2024-11-01 11:50:15


================================================================================
Directory: src
================================================================================

File: middleware.ts
--------------------------------------------------------------------------------

import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';

// Add any paths that should be public
const publicPaths = new Set([
  '/',
  '/favicon.ico',
]);

export function middleware(request: NextRequest) {
  // Check if the path is public
  if (publicPaths.has(request.nextUrl.pathname)) {
    return NextResponse.next();
  }

  // Check for auth token in cookies
  const authToken = request.cookies.get('auth_token');

  // If no token and trying to access protected route, redirect to home
  if (!authToken) {
    return NextResponse.redirect(new URL('/', request.url));
  }

  return NextResponse.next();
}

export const config = {
  matcher: '/((?!api|_next/static|_next/image|.*\\.).*)' // Protect all routes except api, static files, and public paths
};



================================================================================
Directory: src\app
================================================================================

File: globals.css
--------------------------------------------------------------------------------

@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  font-family: Arial, Helvetica, sans-serif;
}

@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
}

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;
    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;
    --primary: 222.2 47.4% 11.2%;
    --primary-foreground: 210 40% 98%;
    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;
    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;
    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;
    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 222.2 84% 4.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
  }
  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;
    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;
    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;
    --primary: 210 40% 98%;
    --primary-foreground: 222.2 47.4% 11.2%;
    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;
    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;
    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;
    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 212.7 26.8% 83.9%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}


File: layout.tsx
--------------------------------------------------------------------------------

import type { Metadata } from "next";
import localFont from "next/font/local";
import "./globals.css";
import { CommandProvider } from "@/components/CommandProvider";
import { AuthCheck } from "@/components/AuthCheck";

const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

export const metadata: Metadata = {
  title: "Scheduler App",
  description: "A simple scheduler application",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" className="overflow-hidden">
      <body className={`${geistSans.variable} ${geistMono.variable} antialiased bg-gray-100 min-h-screen text-gray-900`}>
        <CommandProvider>
          <main className="container mx-auto p-4">
            {children}
          </main>
        </CommandProvider>
      </body>
    </html>
  );
}


File: page.tsx
--------------------------------------------------------------------------------

// src/app/page.tsx (modified)
"use client";

import React, { useState, useEffect } from 'react';
import { authenticate, isAuthenticated } from '@/lib/auth';
import SearchNavigation from '@/components/SearchNavigation';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';

export default function Home() {
  const [isAuth, setIsAuth] = useState(false);
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    setIsAuth(isAuthenticated());
    setIsLoading(false);
  }, []);

  const handleLogin = () => {
    if (authenticate(password)) {
      setIsAuth(true);
      setError('');
    } else {
      setError('Incorrect password');
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      handleLogin();
    }
  };

  if (isLoading) {
    return <div className="min-h-screen flex items-center justify-center">
      <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900"></div>
    </div>;
  }

  if (!isAuth) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="w-full max-w-md p-6 bg-white rounded-xl shadow-md space-y-4">
          <h1 className="text-2xl font-bold text-center text-gray-900">Welcome</h1>
          <div className="space-y-4">
            <Input
              type="password"
              placeholder="Enter password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              onKeyDown={handleKeyPress}
              className="w-full"
            />
            {error && <p className="text-sm text-red-500">{error}</p>}
            <Button 
              onClick={handleLogin}
              className="w-full"
            >
              Enter
            </Button>
          </div>
        </div>
      </div>
    );
  }

  return <SearchNavigation />;
}



================================================================================
Directory: src\components
================================================================================

File: AuthCheck.tsx
--------------------------------------------------------------------------------

// src/components/AuthCheck.tsx
"use client";

import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import { isAuthenticated } from '@/lib/auth';

export function AuthCheck({ children }: { children: React.ReactNode }) {
  const router = useRouter();
  const [isAuthed, setIsAuthed] = useState(false);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    const authStatus = isAuthenticated();
    setIsAuthed(authStatus);
    setIsLoading(false);
    
    if (!authStatus) {
      router.push('/');
    }
  }, [router]);

  // Show nothing while checking authentication status
  if (isLoading) {
    return null;
  }

  // Only render children if authenticated
  return isAuthed ? <>{children}</> : null;
}

File: CommandProvider.tsx
--------------------------------------------------------------------------------

"use client"

import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import { CommandDialog } from "@/components/ui/command";
import SearchContent from '@/components/SearchContent';

const CommandContext = createContext<{ openCommandBar: () => void }>({
  openCommandBar: () => {},
});

export const CommandProvider = ({ children }: { children: ReactNode }) => {
  const [open, setOpen] = useState(false);

  useEffect(() => {
    const down = (e: KeyboardEvent) => {
      if (e.key === "/" && 
          !(e.target instanceof HTMLInputElement) && 
          !(e.target instanceof HTMLTextAreaElement) &&
          window.location.pathname !== '/') {
        e.preventDefault();
        setOpen(true);
      }
    };

    document.addEventListener("keydown", down);
    return () => document.removeEventListener("keydown", down);
  }, []);

  return (
    <CommandContext.Provider value={{ openCommandBar: () => setOpen(true) }}>
      {children}
      <CommandDialog open={open} onOpenChange={setOpen}>
        <SearchContent />
      </CommandDialog>
    </CommandContext.Provider>
  );
};

export const useCommand = () => useContext(CommandContext);

File: SearchContent.tsx
--------------------------------------------------------------------------------

"use client";

import React from 'react';
import {
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandSeparator,
} from "@/components/ui/command";
import { 
  ArrowRight, 
  LogOut, 
  Home,
  Settings,
  User,
  History,
  Calendar,
  Clock,
  Search,
  Keyboard
} from "lucide-react";
import { logout } from '@/lib/auth';

const pages = [
  { title: 'Scheduler', path: '/scheduler', description: 'Manage your tasks and calendar' },
  { title: 'Note Taker', path: '/notes', description: 'Take and organize your study notes' },
  { title: 'University', path: '/university', description: 'Track university applications and deadlines' },
  { title: 'Sports Tracker', path: '/sports', description: 'Monitor your triathlon, Muay Thai, and fitness progress' },
  { title: 'Mental Health', path: '/mental-health', description: 'Track your well-being and relaxation activities' },
  { title: 'Analytics', path: '/analytics', description: 'View your performance metrics and insights' }
];

const quickActions = [
  { title: 'Today\'s Tasks', path: '/scheduler/today', icon: Calendar, description: 'View today\'s scheduled items' },
  { title: 'Recent Activity', path: '/history', icon: History, description: 'View your recent actions' },
  { title: 'Quick Search', icon: Search, description: 'Search across all your content', action: () => {/* Implement global search */} },
  { title: 'Keyboard Shortcuts', icon: Keyboard, description: 'View all keyboard shortcuts', action: () => {/* Show shortcuts dialog */} }
];

const SearchContent = () => {
  const handleLogout = () => {
    logout();
    window.location.href = '/';
  };

  const handleNavigation = (path: string) => {
    window.location.href = path;
  };

  const getCurrentTime = () => {
    return new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
  };

  const [currentTime, setCurrentTime] = React.useState(getCurrentTime());

  React.useEffect(() => {
    const timer = setInterval(() => {
      setCurrentTime(getCurrentTime());
    }, 1000);
    return () => clearInterval(timer);
  }, []);

  return (
    <>
      <CommandInput placeholder="Search pages or commands... (Press '/' to focus)" />
      <CommandList>
        <CommandEmpty>No results found.</CommandEmpty>
        
        <div className="px-3 py-2 text-xs text-muted-foreground">
          {currentTime} - Quick Access Menu
        </div>

        <CommandGroup heading="Navigation">
          <CommandItem
            value="Home"
            onSelect={() => handleNavigation('/')}
            className="flex items-center justify-between py-3"
          >
            <div className="flex items-center">
              <Home className="h-4 w-4 mr-2" />
              <span className="font-medium text-sm">Home</span>
            </div>
            <ArrowRight className="h-4 w-4 text-blue-500 opacity-0 group-aria-selected:opacity-100" />
          </CommandItem>
          <CommandItem
            value="Profile Settings"
            onSelect={() => handleNavigation('/profile')}
            className="flex items-center justify-between py-3"
          >
            <div className="flex items-center">
              <User className="h-4 w-4 mr-2" />
              <span className="font-medium text-sm">Profile</span>
            </div>
            <ArrowRight className="h-4 w-4 text-blue-500 opacity-0 group-aria-selected:opacity-100" />
          </CommandItem>
          <CommandItem
            value="Settings"
            onSelect={() => handleNavigation('/settings')}
            className="flex items-center justify-between py-3"
          >
            <div className="flex items-center">
              <Settings className="h-4 w-4 mr-2" />
              <span className="font-medium text-sm">Settings</span>
            </div>
            <ArrowRight className="h-4 w-4 text-blue-500 opacity-0 group-aria-selected:opacity-100" />
          </CommandItem>
        </CommandGroup>

        <CommandSeparator className="my-2" />

        <CommandGroup heading="Quick Actions">
          {quickActions.map((action) => (
            <CommandItem
              key={action.title}
              value={action.title}
              onSelect={() => action.path ? handleNavigation(action.path) : action.action?.()}
              className="flex items-center justify-between py-3"
            >
              <div className="flex items-center">
                <action.icon className="h-4 w-4 mr-2" />
                <div>
                  <p className="font-medium text-sm">{action.title}</p>
                  <p className="text-xs text-gray-500">{action.description}</p>
                </div>
              </div>
              <ArrowRight className="h-4 w-4 text-blue-500 opacity-0 group-aria-selected:opacity-100" />
            </CommandItem>
          ))}
        </CommandGroup>

        <CommandSeparator className="my-2" />

        <CommandGroup heading="Pages">
          {pages.map((page) => (
            <CommandItem
              key={page.path}
              value={page.title}
              onSelect={() => handleNavigation(page.path)}
              className="flex items-center justify-between py-3"
            >
              <div>
                <p className="font-medium text-sm">{page.title}</p>
                <p className="text-sm text-gray-500">{page.description}</p>
              </div>
              <ArrowRight className="h-4 w-4 text-blue-500 opacity-0 group-aria-selected:opacity-100" />
            </CommandItem>
          ))}
        </CommandGroup>

        <CommandSeparator className="my-2" />
        
        <CommandGroup heading="Actions">
          <CommandItem
            value="Logout"
            onSelect={handleLogout}
            className="flex items-center justify-between py-3 text-red-500 hover:text-red-600"
          >
            <div className="flex items-center">
              <LogOut className="h-4 w-4 mr-2" />
              <span className="font-medium text-sm">Logout</span>
            </div>
            <ArrowRight className="h-4 w-4 opacity-0 group-aria-selected:opacity-100" />
          </CommandItem>
        </CommandGroup>
      </CommandList>
    </>
  );
};

export default SearchContent;

File: SearchNavigation.tsx
--------------------------------------------------------------------------------

import React from 'react';
import {
  Command,
  CommandDialog,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
  CommandSeparator,
} from "@/components/ui/command";
import { 
  Search, 
  ArrowRight, 
  LogOut, 
  Home,
  Settings,
  User,
  History,
  Calendar,
  Clock,
  Keyboard
} from "lucide-react";
import { logout } from '@/lib/auth';

const pages = [
  { title: 'Scheduler', path: '/scheduler', description: 'Manage your tasks and calendar' },
  { title: 'Note Taker', path: '/notes', description: 'Take and organize your study notes' },
  { title: 'University', path: '/university', description: 'Track university applications and deadlines' },
  { title: 'Sports Tracker', path: '/sports', description: 'Monitor your triathlon, Muay Thai, and fitness progress' },
  { title: 'Mental Health', path: '/mental-health', description: 'Track your well-being and relaxation activities' },
  { title: 'Analytics', path: '/analytics', description: 'View your performance metrics and insights' }
];

const quickActions = [
  { title: 'Today\'s Tasks', path: '/scheduler/today', icon: Calendar, description: 'View today\'s scheduled items' },
  { title: 'Recent Activity', path: '/history', icon: History, description: 'View your recent actions' },
  { title: 'Quick Search', icon: Search, description: 'Search across all your content', action: () => {/* Implement global search */} },
  { title: 'Keyboard Shortcuts', icon: Keyboard, description: 'View all keyboard shortcuts', action: () => {/* Show shortcuts dialog */} }
];

const SearchNavigation = () => {
  const [open, setOpen] = React.useState(false);
  const inputRef = React.useRef<HTMLInputElement>(null);
  const [currentTime, setCurrentTime] = React.useState('');

  React.useEffect(() => {
    const updateTime = () => {
      setCurrentTime(new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }));
    };
    
    updateTime();
    const timer = setInterval(updateTime, 1000);
    
    const handleKeyDown = (e: KeyboardEvent) => {
      if (e.key === "/" && (e.target as HTMLElement).tagName !== "INPUT") {
        e.preventDefault();
        inputRef.current?.focus();
        setOpen(true);
      }
    };
    
    document.addEventListener("keydown", handleKeyDown);
    return () => {
      clearInterval(timer);
      document.removeEventListener("keydown", handleKeyDown);
    };
  }, []);

  const handleLogout = () => {
    logout();
    window.location.href = '/';
  };

  const handleNavigation = (path: string) => {
    window.location.href = path;
  };

  return (
    <div className="flex items-start justify-center pt-32">
      <div className="w-full max-w-2xl">
        <div className="flex justify-end mb-4">
          <button
            onClick={handleLogout}
            className="flex items-center text-sm text-gray-500 hover:text-gray-700"
          >
            <LogOut className="h-4 w-4 mr-2" />
            Logout
          </button>
        </div>
        <Command className="rounded-xl shadow-md overflow-visible">
          <div className="relative">
            <CommandInput 
              ref={inputRef}
              placeholder="Search pages... (Press '/' to focus)" 
              className="h-12"
              onFocus={() => setOpen(true)}
              onBlur={() => {
                setTimeout(() => setOpen(false), 200);
              }}
              onKeyDown={(e) => {
                if (e.key === "Escape") {
                  inputRef.current?.blur();
                  setOpen(false);
                }
              }}
            />
          </div>
          {open && (
            <CommandList>
              <CommandEmpty>No results found.</CommandEmpty>
              
              <div className="px-3 py-2 text-xs text-muted-foreground">
                {currentTime} - Quick Access Menu
              </div>

              <CommandGroup heading="Navigation">
                <CommandItem
                  value="Home"
                  onSelect={() => handleNavigation('/')}
                  className="flex items-center justify-between py-3"
                >
                  <div className="flex items-center">
                    <Home className="h-4 w-4 mr-2" />
                    <span className="font-medium text-sm">Home</span>
                  </div>
                  <ArrowRight className="h-4 w-4 text-blue-500 opacity-0 group-aria-selected:opacity-100" />
                </CommandItem>
                <CommandItem
                  value="Profile Settings"
                  onSelect={() => handleNavigation('/profile')}
                  className="flex items-center justify-between py-3"
                >
                  <div className="flex items-center">
                    <User className="h-4 w-4 mr-2" />
                    <span className="font-medium text-sm">Profile</span>
                  </div>
                  <ArrowRight className="h-4 w-4 text-blue-500 opacity-0 group-aria-selected:opacity-100" />
                </CommandItem>
                <CommandItem
                  value="Settings"
                  onSelect={() => handleNavigation('/settings')}
                  className="flex items-center justify-between py-3"
                >
                  <div className="flex items-center">
                    <Settings className="h-4 w-4 mr-2" />
                    <span className="font-medium text-sm">Settings</span>
                  </div>
                  <ArrowRight className="h-4 w-4 text-blue-500 opacity-0 group-aria-selected:opacity-100" />
                </CommandItem>
              </CommandGroup>

              <CommandSeparator className="my-2" />

              <CommandGroup heading="Quick Actions">
                {quickActions.map((action) => (
                  <CommandItem
                    key={action.title}
                    value={action.title}
                    onSelect={() => action.path ? handleNavigation(action.path) : action.action?.()}
                    className="flex items-center justify-between py-3"
                  >
                    <div className="flex items-center">
                      <action.icon className="h-4 w-4 mr-2" />
                      <div>
                        <p className="font-medium text-sm">{action.title}</p>
                        <p className="text-xs text-gray-500">{action.description}</p>
                      </div>
                    </div>
                    <ArrowRight className="h-4 w-4 text-blue-500 opacity-0 group-aria-selected:opacity-100" />
                  </CommandItem>
                ))}
              </CommandGroup>

              <CommandSeparator className="my-2" />

              <CommandGroup heading="Pages">
                {pages.map((page) => (
                  <CommandItem
                    key={page.path}
                    value={page.title}
                    onSelect={() => handleNavigation(page.path)}
                    className="flex items-center justify-between py-3"
                  >
                    <div>
                      <p className="font-medium text-sm">{page.title}</p>
                      <p className="text-sm text-gray-500">{page.description}</p>
                    </div>
                    <ArrowRight className="h-4 w-4 text-blue-500 opacity-0 group-aria-selected:opacity-100" />
                  </CommandItem>
                ))}
              </CommandGroup>
            </CommandList>
          )}
        </Command>

        <div className="mt-4 flex justify-center space-x-4 text-sm text-gray-500">
          <span>
            <kbd className="px-2 py-1 bg-gray-100 border border-gray-200 rounded">↑↓</kbd>{' '}
            to navigate
          </span>
          <span>
            <kbd className="px-2 py-1 bg-gray-100 border border-gray-200 rounded">enter</kbd>{' '}
            to select
          </span>
          <span>
            <kbd className="px-2 py-1 bg-gray-100 border border-gray-200 rounded">esc</kbd>{' '}
            to close
          </span>
        </div>
      </div>
    </div>
  );
};

export default SearchNavigation;


================================================================================
Directory: src\lib
================================================================================

File: auth.ts
--------------------------------------------------------------------------------

// src/lib/auth.ts
export const MASTER_PASSWORD = "idx"; // Replace with "idxengfrevr"
export const AUTH_KEY = "auth_token";

export const authenticate = (password: string): boolean => {
  if (password === MASTER_PASSWORD) {
    // Only run in browser environment
    if (typeof window !== 'undefined') {
      const token = generateAuthToken();
      localStorage.setItem(AUTH_KEY, token);
      document.cookie = `auth_token=${token}; path=/; max-age=86400`; // 24 hours
    }
    return true;
  }
  return false;
};

export const isAuthenticated = (): boolean => {
  // Check if we're in a browser environment
  if (typeof window === 'undefined') {
    return false;
  }

  // Check both localStorage and cookies
  const localToken = localStorage.getItem(AUTH_KEY);
  const cookieToken = document.cookie
    .split('; ')
    .find(row => row.startsWith('auth_token='))
    ?.split('=')[1];
    
  return !!(localToken && cookieToken);
};

export const logout = () => {
  if (typeof window !== 'undefined') {
    localStorage.removeItem(AUTH_KEY);
    document.cookie = 'auth_token=; path=/; expires=Thu, 01 Jan 1970 00:00:01 GMT;';
  }
};

const generateAuthToken = () => {
  return Math.random().toString(36).substring(2) + Date.now().toString(36);
};

