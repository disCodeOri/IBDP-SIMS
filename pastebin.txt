could you add the feature to add, assign, remove, delete, and edit tags for the workouts.
I also need you to change the colour scheme so that it matches the colour scheme of the main application, I have provided the page.tsx for reference.
```
// @/components/Workouts.tsx
import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog';
import { saveWorkout, getWorkouts, updateWorkout, deleteWorkout } from '@/lib/workouts-actions';

// Define workout type to match server-side schema
type Workout = {
  id: string;
  content: string;
  createdAt: string;
};

export default function Workouts() {
  const [workoutInput, setWorkoutInput] = useState('');
  const [workouts, setWorkouts] = useState<Workout[]>([]);
  const [selectedWorkout, setSelectedWorkout] = useState<Workout | null>(null);
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [isEditing, setIsEditing] = useState(false);
  const [editContent, setEditContent] = useState('');

  // Fetch workouts on component mount
  React.useEffect(() => {
    async function fetchWorkouts() {
      const fetchedWorkouts = await getWorkouts();
      setWorkouts(fetchedWorkouts);
    }
    fetchWorkouts();
  }, []);

  // Handle workout submission
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    const formData = new FormData();
    formData.append('workout', workoutInput);
    
    const result = await saveWorkout(formData);
    
    if (result.success) {
      // Refresh workouts list
      const updatedWorkouts = await getWorkouts();
      setWorkouts(updatedWorkouts);
      setWorkoutInput('');
    }
  };

  // Open workout details
  const openWorkoutDetails = (workout: Workout) => {
    setSelectedWorkout(workout);
    setEditContent(workout.content);
    setIsDialogOpen(true);
    setIsEditing(false);
  };

  // Handle workout update
  const handleUpdateWorkout = async () => {
    if (selectedWorkout) {
      const result = await updateWorkout(selectedWorkout.id, editContent);
      
      if (result.success) {
        // Refresh workouts list
        const updatedWorkouts = await getWorkouts();
        setWorkouts(updatedWorkouts);
        
        // Update selected workout
        setSelectedWorkout({
          ...selectedWorkout,
          content: editContent
        });
        
        // Exit editing mode
        setIsEditing(false);
      }
    }
  };

  // Handle workout deletion
  const handleDeleteWorkout = async () => {
    if (selectedWorkout) {
      const result = await deleteWorkout(selectedWorkout.id);
      
      if (result.success) {
        // Refresh workouts list
        const updatedWorkouts = await getWorkouts();
        setWorkouts(updatedWorkouts);
        
        // Close dialog
        setIsDialogOpen(false);
        setSelectedWorkout(null);
      }
    }
  };

  return (
    <div className="max-w-4xl mx-auto p-4">
      {/* Workout Input Form */}
      <form onSubmit={handleSubmit} className="mb-6">
        <Textarea
          value={workoutInput}
          onChange={(e) => setWorkoutInput(e.target.value)}
          placeholder="Enter your workout details..."
          className="mb-4"
        />
        <Button type="submit" disabled={!workoutInput.trim()}>
          Save Workout
        </Button>
      </form>

      {/* Workouts Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {workouts.map((workout) => (
          <Card 
            key={workout.id} 
            onClick={() => openWorkoutDetails(workout)}
            className="cursor-pointer hover:shadow-lg transition-shadow"
          >
            <CardHeader>
              <CardTitle>
                Workout on {new Date(workout.createdAt).toLocaleDateString()}
              </CardTitle>
            </CardHeader>
            <CardContent>
              <p className="line-clamp-3">{workout.content}</p>
            </CardContent>
          </Card>
        ))}
      </div>

      {/* Workout Details Dialog */}
      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle>
              {selectedWorkout && `Workout on ${new Date(selectedWorkout.createdAt).toLocaleString()}`}
            </DialogTitle>
          </DialogHeader>

          {isEditing ? (
            <Textarea
              value={editContent}
              onChange={(e) => setEditContent(e.target.value)}
              className="h-64"
            />
          ) : (
            <div className="w-full overflow-auto max-h-[60vh] p-2 whitespace-pre-wrap break-words">
              {selectedWorkout?.content}
            </div>
          )}

          <DialogFooter>
            {isEditing ? (
              <>
                <Button variant="outline" onClick={() => setIsEditing(false)}>
                  Cancel
                </Button>
                <Button onClick={handleUpdateWorkout}>
                  Save Changes
                </Button>
              </>
            ) : (
              <>
                <Button variant="destructive" onClick={handleDeleteWorkout}>
                  Delete
                </Button>
                <Button onClick={() => setIsEditing(true)}>
                  Edit
                </Button>
              </>
            )}
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
}
```
```
// @/lib/workouts-actions.ts
'use server';

import fs from 'fs/promises';
import path from 'path';
import { revalidatePath } from 'next/cache';
import { z } from 'zod';

// Workout schema for type safety
const WorkoutSchema = z.object({
  id: z.string(),
  content: z.string(),
  createdAt: z.string()
});

type Workout = z.infer<typeof WorkoutSchema>;

// Path to the workouts JSON file
const WORKOUTS_FILE = path.join(process.cwd(), '@/data/workouts.json');

// Ensure the data directory exists
async function ensureDirectoryExists() {
  try {
    const dataDir = path.dirname(WORKOUTS_FILE);
    await fs.mkdir(dataDir, { recursive: true });
  } catch (error) {
    console.error('Failed to create data directory:', error);
  }
}

// Read existing workouts from JSON file
async function readWorkouts(): Promise<Workout[]> {
  try {
    await ensureDirectoryExists();
    
    // Check if file exists, if not, return empty array
    try {
      await fs.access(WORKOUTS_FILE);
    } catch {
      await fs.writeFile(WORKOUTS_FILE, JSON.stringify([]));
      return [];
    }

    const fileContents = await fs.readFile(WORKOUTS_FILE, 'utf-8');
    const workouts = JSON.parse(fileContents);
    return WorkoutSchema.array().parse(workouts);
  } catch (error) {
    console.error('Failed to read workouts:', error);
    return [];
  }
}

// Save workouts to JSON file
async function saveWorkouts(workouts: Workout[]) {
  try {
    await fs.writeFile(WORKOUTS_FILE, JSON.stringify(workouts, null, 2));
  } catch (error) {
    console.error('Failed to save workouts:', error);
  }
}

// Save a new workout
export async function saveWorkout(formData: FormData) {
  const workout = formData.get('workout') as string;
  
  if (!workout) {
    return { success: false, message: 'Workout cannot be empty' };
  }

  try {
    const existingWorkouts = await readWorkouts();
    
    const newWorkout: Workout = {
      id: crypto.randomUUID(), // Use built-in UUID generation
      content: workout,
      createdAt: new Date().toISOString()
    };

    const updatedWorkouts = [newWorkout, ...existingWorkouts];
    
    await saveWorkouts(updatedWorkouts);
    revalidatePath('/');
    
    return { success: true, message: 'Workout saved successfully' };
  } catch (error) {
    console.error('Failed to save workout:', error);
    return { success: false, message: 'Failed to save workout' };
  }
}

// Get all workouts
export async function getWorkouts() {
  try {
    const workouts = await readWorkouts();
    return workouts.sort((a, b) => 
      new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()
    );
  } catch (error) {
    console.error('Failed to get workouts:', error);
    return [];
  }
}

// Update a specific workout
export async function updateWorkout(id: string, newContent: string) {
  try {
    const workouts = await readWorkouts();
    
    const updatedWorkouts = workouts.map(workout => 
      workout.id === id 
        ? { ...workout, content: newContent } 
        : workout
    );
    
    await saveWorkouts(updatedWorkouts);
    revalidatePath('/');
    
    return { success: true, message: 'Workout updated successfully' };
  } catch (error) {
    console.error('Failed to update workout:', error);
    return { success: false, message: 'Failed to update workout' };
  }
}

// Delete a specific workout
export async function deleteWorkout(id: string) {
  try {
    const workouts = await readWorkouts();
    
    const filteredWorkouts = workouts.filter(workout => workout.id !== id);
    
    await saveWorkouts(filteredWorkouts);
    revalidatePath('/');
    
    return { success: true, message: 'Workout deleted successfully' };
  } catch (error) {
    console.error('Failed to delete workout:', error);
    return { success: false, message: 'Failed to delete workout' };
  }
}
```
```
// src/app/page.tsx
'use client';
import { useState } from 'react';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Focus, Book, Target, Medal, Clock, Dumbbell, FlameKindling, Axe } from 'lucide-react';
import { Card, CardContent } from '@/components/ui/card';
import { BreakTimerProvider } from '@/components/contexts/BreakTimerContext';
import BreakTimer from '@/components/BreakTimer';
import Cookies from '@/components/CookieJar';
import PKM from '@/components/PKM';
import Workouts from '@/components/Workouts';

export default function MissionControlDashboard() {
  const [activeTab, setActiveTab] = useState('workouts');
  return (
      <BreakTimerProvider>
        <div className="min-h-screen bg-black text-green-400 p-6">
          <div className="max-w-7xl mx-auto">
            <h1 className="text-4xl font-bold mb-8 text-green-500 tracking-tight">MISSION CONTROL</h1>
            <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
              {/* Tabs List */}
              <TabsList className="grid w-full grid-cols-8 bg-gray-900 mb-6">
                <TabsTrigger value="randy" className="flex items-center gap-2 text-green-300 data-[state=active]:bg-green-900">
                  <FlameKindling className="h-5 w-5" /> Randy
                </TabsTrigger>
                <TabsTrigger value="fuel" className="flex items-center gap-2 text-green-300 data-[state=active]:bg-green-900">
                  <Axe className="h-5 w-5" /> Fuel
                </TabsTrigger>
                <TabsTrigger value="pkm" className="flex items-center gap-2 text-green-300 data-[state=active]:bg-green-900">
                  <Focus className="h-5 w-5" /> PKM 
                </TabsTrigger>
                <TabsTrigger value="resources" className="flex items-center gap-2 text-green-300 data-[state=active]:bg-green-900">
                  <Book className="h-5 w-5" /> Resources
                </TabsTrigger>
                <TabsTrigger value="habits" className="flex items-center gap-2 text-green-300 data-[state=active]:bg-green-900">
                  <Target className="h-5 w-5" /> Habits
                </TabsTrigger>
                <TabsTrigger value="cookies" className="flex items-center gap-2 text-green-300 data-[state=active]:bg-green-900">
                  <Medal className="h-5 w-5" /> Cookies
                </TabsTrigger>
                <TabsTrigger value="breaks" className="flex items-center gap-2 text-green-300 data-[state=active]:bg-green-900">
                  <Clock className="h-5 w-5" /> Break Timer
                </TabsTrigger>
                <TabsTrigger value="workouts" className="flex items-center gap-2 text-green-300 data-[state=active]:bg-green-900">
                  <Dumbbell className="h-5 w-5" /> Workouts
                </TabsTrigger>
              </TabsList>
              
              {/* Randy */}
              <TabsContent value="randy">
                <Card className="bg-gray-900 border-green-800">
                  <CardContent className="p-6">
                    <h2 className="text-2xl font-bold mb-4 text-green-500">Randy</h2>
                    {}
                  </CardContent>
                </Card>
              </TabsContent>

              {/* Fuel */}
              <TabsContent value="fuel">
                <Card className="bg-gray-900 border-green-800">
                  <CardContent className="p-6">
                    <h2 className="text-2xl font-bold mb-4 text-green-500">Fuel</h2>
                    {}
                  </CardContent>
                </Card>
              </TabsContent>

              {/* PKM */}
              <TabsContent value="pkm">
                <Card className="bg-gray-900 border-green-800">
                  <CardContent className="p-6">
                  <h2 className="text-2xl font-bold mb-4 text-green-500">PKM</h2>
                  <PKM />
                  </CardContent>
                </Card>
              </TabsContent>

              {/* Resources */}
              <TabsContent value="resources">
                <Card className="bg-gray-900 border-green-800">
                  <CardContent className="p-6">
                    <h2 className="text-2xl font-bold mb-4 text-green-500">Resources</h2>
                    {}
                  </CardContent>
                </Card>
              </TabsContent>

              {/* Habits */}
              <TabsContent value="habits">
                <Card className="bg-gray-900 border-green-800">
                  <CardContent className="p-6">
                    <h2 className="text-2xl font-bold mb-4 text-green-500">Habits</h2>
                    {}
                  </CardContent>
                </Card>
              </TabsContent>

              {/* Acheivements */}
              <TabsContent value="cookies">
                <Card className="bg-gray-900 border-green-800">
                  <CardContent className="p-6">
                    <h2 className="text-2xl font-bold mb-4 text-green-500">Cookies</h2>
                    <Cookies />
                  </CardContent>
                </Card>
              </TabsContent>

              {/* Break Timer */}
              <TabsContent value="breaks">
                <BreakTimer />
              </TabsContent>

              {/* Workouts */}
              <TabsContent value="workouts">
                <Card className="bg-gray-900 border-green-800">
                  <CardContent className="p-6">
                    <h2 className="text-2xl font-bold mb-4 text-green-500">Workouts</h2>
                    <Workouts />
                  </CardContent>
                </Card>
              </TabsContent>
            </Tabs>
          </div>
        </div>
      </BreakTimerProvider>
  );
}
```