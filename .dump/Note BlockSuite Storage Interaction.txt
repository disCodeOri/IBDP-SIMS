Note: BlockSuite Storage Interaction Requirements

Core Goal: To seamlessly save and reload documents created within the BlockSuite editor, preserving their complete and complex structure, using GitHub as the persistent storage mechanism.

Key Requirements:

Structured Export (to GitHub):

When a user saves a document in the BlockSuite editor, the application MUST export the entire document state, including all blocks, formatting, embedded content, and metadata.

The export format MUST be JSON to ensure preservation of the complex document structure.

The exported JSON data SHOULD be well-formed and easily parsable.

The application SHOULD automatically handle the export process when the user initiates a "save" action within the editor.

Storage in GitHub Repository:

The exported JSON data for each document MUST be stored as an individual file within the designated GitHub repository.

Each document SHOULD have a corresponding .json file in the repository.

File naming conventions SHOULD be clear and consistent (e.g., based on document title or a unique ID).

The application MUST handle the process of creating or updating these .json files in the GitHub repository (via Git operations).

Structured Import (from GitHub):

When a user wants to open or reload a document, the application MUST retrieve the corresponding .json file from the GitHub repository.

The application MUST parse the JSON data from the file.

The application MUST then use the BlockSuite editor's capabilities to reconstruct the entire document, with its complete structure and content, from the parsed JSON data.

Preservation of Complex Structure:

The export and import mechanisms MUST ensure that the complex structure of BlockSuite documents is fully preserved. This includes (but is not limited to):

Different types of blocks (text, headings, lists, code blocks, etc.).

Formatting within blocks (bold, italics, links, etc.).

Nested structures and relationships between blocks.

Any embedded content or metadata associated with the document.

User Experience:

The saving and loading process SHOULD be intuitive for the user. The user should not need to manually perform export or import steps as separate actions. The "save" and "open" actions within the application should handle the GitHub interaction behind the scenes.

Clear feedback SHOULD be provided to the user regarding the saving and loading status.

Technical Considerations:

The application will need to utilize the BlockSuite editor's API for serializing and deserializing the document state to/from JSON.

The application will need to implement Git operations (add, commit, push, pull/fetch) to interact with the GitHub repository.

Error handling for GitHub API interactions and JSON parsing is crucial.

Non-Goals (For Clarity):

Real-time, simultaneous collaborative editing directly through GitHub file changes is not a primary requirement at this stage. The focus is on preserving the structure through structured export/import.

This note clearly outlines the desired behavior for BlockSuite storage interaction in your application, emphasizing the preservation of complex structures through JSON and the integration with your GitHub repository. Make sure to refer to this when implementing the saving and loading functionalities.